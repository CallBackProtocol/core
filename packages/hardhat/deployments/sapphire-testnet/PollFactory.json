{
  "address": "0x135971dC56C10391E88148710577307aaE5f66A2",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidMaxValues",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MESSAGE_DATA_LENGTH",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "maxMessages",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxVoteOptions",
              "type": "uint256"
            }
          ],
          "internalType": "struct Params.MaxValues",
          "name": "_maxValues",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "intStateTreeDepth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "messageTreeSubDepth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "messageTreeDepth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "voteOptionTreeDepth",
              "type": "uint8"
            }
          ],
          "internalType": "struct Params.TreeDepths",
          "name": "_treeDepths",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct DomainObjs.PubKey",
          "name": "_coordinatorPubKey",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_maci",
          "type": "address"
        },
        {
          "internalType": "contract TopupCredit",
          "name": "_topupCredit",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pollOwner",
          "type": "address"
        }
      ],
      "name": "deploy",
      "outputs": [
        {
          "internalType": "address",
          "name": "pollAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa1631bfe2731dea2253a03288be95f5e376c64e66e673fb7406f9435c354093b",
  "receipt": {
    "to": null,
    "from": "0xa916330337ff3143691fA95aE084e59C28E0CDC2",
    "contractAddress": "0x135971dC56C10391E88148710577307aaE5f66A2",
    "transactionIndex": 0,
    "gasUsed": "4163575",
    "logsBloom": "0x
    "blockHash": "0x688d240248627a8fb2b002afd54e1cc6f2fd503b762b94c860e3e5d946fa1422",
    "transactionHash": "0xa1631bfe2731dea2253a03288be95f5e376c64e66e673fb7406f9435c354093b",
    "logs": [],
    "blockNumber": 5783646,
    "cumulativeGasUsed": "4163575",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "79ae3e088114d792164a9068ef4ed3b4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidMaxValues\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MESSAGE_DATA_LENGTH\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"maxMessages\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxVoteOptions\",\"type\":\"uint256\"}],\"internalType\":\"struct Params.MaxValues\",\"name\":\"_maxValues\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"intStateTreeDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"messageTreeSubDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"messageTreeDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"voteOptionTreeDepth\",\"type\":\"uint8\"}],\"internalType\":\"struct Params.TreeDepths\",\"name\":\"_treeDepths\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct DomainObjs.PubKey\",\"name\":\"_coordinatorPubKey\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_maci\",\"type\":\"address\"},{\"internalType\":\"contract TopupCredit\",\"name\":\"_topupCredit\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pollOwner\",\"type\":\"address\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pollAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deploy(uint256,(uint256,uint256),(uint8,uint8,uint8,uint8),(uint256,uint256),address,address,address)\":{\"params\":{\"_coordinatorPubKey\":\"The coordinator's public key\",\"_duration\":\"The duration of the poll\",\"_maci\":\"The MACI contract interface reference\",\"_maxValues\":\"The max values for the poll\",\"_pollOwner\":\"The owner of the poll\",\"_topupCredit\":\"The TopupCredit contract\",\"_treeDepths\":\"The depths of the merkle trees\"},\"returns\":{\"pollAddr\":\"The deployed Poll contract\"}}},\"title\":\"PollFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"MESSAGE_DATA_LENGTH()\":{\"notice\":\"the length of a MACI message\"},\"constructor\":{\"notice\":\"The PollFactory constructor\"},\"deploy(uint256,(uint256,uint256),(uint8,uint8,uint8,uint8),(uint256,uint256),address,address,address)\":{\"notice\":\"Deploy a new Poll contract and AccQueue contract for messages.\"}},\"notice\":\"A factory contract which deploys Poll contracts. It allows the MACI contract size to stay within the limit set by EIP-170.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/maci-contracts/PollFactory.sol\":\"PollFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/maci-contracts/Poll.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { Params } from \\\"./utilities/Params.sol\\\";\\nimport { SnarkCommon } from \\\"./crypto/SnarkCommon.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { EmptyBallotRoots } from \\\"./trees/EmptyBallotRoots.sol\\\";\\nimport { IPoll } from \\\"./interfaces/IPoll.sol\\\";\\nimport { Utilities } from \\\"./utilities/Utilities.sol\\\";\\n\\n/// @title Poll\\n/// @notice A Poll contract allows voters to submit encrypted messages\\n/// which can be either votes, key change messages or topup messages.\\n/// @dev Do not deploy this directly. Use PollFactory.deploy() which performs some\\n/// checks on the Poll constructor arguments.\\ncontract Poll is Params, Utilities, SnarkCommon, Ownable, EmptyBallotRoots, IPoll {\\n  using SafeERC20 for ERC20;\\n\\n  /// @notice Whether the Poll has been initialized\\n  bool internal isInit;\\n\\n  /// @notice The coordinator's public key\\n  PubKey public coordinatorPubKey;\\n\\n  /// @notice Hash of the coordinator's public key\\n  uint256 public immutable coordinatorPubKeyHash;\\n\\n  /// @notice the state root of the state merkle tree\\n  uint256 public mergedStateRoot;\\n\\n  // The timestamp of the block at which the Poll was deployed\\n  uint256 internal immutable deployTime;\\n\\n  // The duration of the polling period, in seconds\\n  uint256 internal immutable duration;\\n\\n  /// @notice Whether the MACI contract's stateAq has been merged by this contract\\n  bool public stateAqMerged;\\n\\n  /// @notice Get the commitment to the state leaves and the ballots. This is\\n  /// hash3(stateRoot, ballotRoot, salt).\\n  /// Its initial value should be\\n  /// hash(maciStateRootSnapshot, emptyBallotRoot, 0)\\n  /// Each successful invocation of processMessages() should use a different\\n  /// salt to update this value, so that an external observer cannot tell in\\n  /// the case that none of the messages are valid.\\n  uint256 public currentSbCommitment;\\n\\n  /// @notice The number of messages that have been published\\n  uint256 public numMessages;\\n\\n  /// @notice The number of signups that have been processed\\n  /// before the Poll ended (stateAq merged)\\n  uint256 public numSignups;\\n\\n  /// @notice Max values for the poll\\n  MaxValues public maxValues;\\n\\n  /// @notice Depths of the merkle trees\\n  TreeDepths public treeDepths;\\n\\n  /// @notice The contracts used by the Poll\\n  ExtContracts public extContracts;\\n\\n  error VotingPeriodOver();\\n  error VotingPeriodNotOver();\\n  error PollAlreadyInit();\\n  error TooManyMessages();\\n  error MaciPubKeyLargerThanSnarkFieldSize();\\n  error StateAqAlreadyMerged();\\n  error StateAqSubtreesNeedMerge();\\n  error InvalidBatchLength();\\n\\n  event PublishMessage(Message _message, PubKey _encPubKey);\\n  event TopupMessage(Message _message);\\n  event MergeMaciStateAqSubRoots(uint256 indexed _numSrQueueOps);\\n  event MergeMaciStateAq(uint256 indexed _stateRoot, uint256 indexed _numSignups);\\n  event MergeMessageAqSubRoots(uint256 indexed _numSrQueueOps);\\n  event MergeMessageAq(uint256 indexed _messageRoot);\\n\\n  /// @notice Each MACI instance can have multiple Polls.\\n  /// When a Poll is deployed, its voting period starts immediately.\\n  /// @param _duration The duration of the voting period, in seconds\\n  /// @param _maxValues The maximum number of messages and vote options\\n  /// @param _treeDepths The depths of the merkle trees\\n  /// @param _coordinatorPubKey The coordinator's public key\\n  /// @param _extContracts The external contracts\\n  constructor(\\n    uint256 _duration,\\n    MaxValues memory _maxValues,\\n    TreeDepths memory _treeDepths,\\n    PubKey memory _coordinatorPubKey,\\n    ExtContracts memory _extContracts\\n  ) payable {\\n    // check that the coordinator public key is valid\\n    if (_coordinatorPubKey.x >= SNARK_SCALAR_FIELD || _coordinatorPubKey.y >= SNARK_SCALAR_FIELD) {\\n      revert MaciPubKeyLargerThanSnarkFieldSize();\\n    }\\n\\n    // store the pub key as object then calculate the hash\\n    coordinatorPubKey = _coordinatorPubKey;\\n    // we hash it ourselves to ensure we store the correct value\\n    coordinatorPubKeyHash = hashLeftRight(_coordinatorPubKey.x, _coordinatorPubKey.y);\\n    // store the external contracts to interact with\\n    extContracts = _extContracts;\\n    // store duration of the poll\\n    duration = _duration;\\n    // store max values\\n    maxValues = _maxValues;\\n    // store tree depth\\n    treeDepths = _treeDepths;\\n    // Record the current timestamp\\n    deployTime = block.timestamp;\\n  }\\n\\n  /// @notice A modifier that causes the function to revert if the voting period is\\n  /// not over.\\n  modifier isAfterVotingDeadline() {\\n    uint256 secondsPassed = block.timestamp - deployTime;\\n    if (secondsPassed <= duration) revert VotingPeriodNotOver();\\n    _;\\n  }\\n\\n  /// @notice A modifier that causes the function to revert if the voting period is\\n  /// over\\n  modifier isWithinVotingDeadline() {\\n    uint256 secondsPassed = block.timestamp - deployTime;\\n    if (secondsPassed >= duration) revert VotingPeriodOver();\\n    _;\\n  }\\n\\n  /// @notice The initialization function.\\n  /// @dev Should be called immediately after Poll creation\\n  /// and messageAq ownership transferred\\n  function init() public {\\n    if (isInit) revert PollAlreadyInit();\\n    // set to true so it cannot be called again\\n    isInit = true;\\n\\n    unchecked {\\n      numMessages++;\\n    }\\n\\n    // init messageAq here by inserting placeholderLeaf\\n    uint256[2] memory dat = [NOTHING_UP_MY_SLEEVE, 0];\\n\\n    (Message memory _message, PubKey memory _padKey, uint256 placeholderLeaf) = padAndHashMessage(dat, 1);\\n    extContracts.messageAq.enqueue(placeholderLeaf);\\n\\n    emit PublishMessage(_message, _padKey);\\n  }\\n\\n  /// @inheritdoc IPoll\\n  function topup(uint256 stateIndex, uint256 amount) public virtual isWithinVotingDeadline {\\n    // we check that we do not exceed the max number of messages\\n    if (numMessages >= maxValues.maxMessages) revert TooManyMessages();\\n\\n    // cannot realistically overflow\\n    unchecked {\\n      numMessages++;\\n    }\\n\\n    /// @notice topupCredit is a trusted token contract which reverts if the transfer fails\\n    extContracts.topupCredit.transferFrom(msg.sender, address(this), amount);\\n\\n    uint256[2] memory dat = [stateIndex, amount];\\n    (Message memory _message, , uint256 messageLeaf) = padAndHashMessage(dat, 2);\\n\\n    extContracts.messageAq.enqueue(messageLeaf);\\n\\n    emit TopupMessage(_message);\\n  }\\n\\n  /// @inheritdoc IPoll\\n  function publishMessage(Message memory _message, PubKey calldata _encPubKey) public virtual isWithinVotingDeadline {\\n    // we check that we do not exceed the max number of messages\\n    if (numMessages >= maxValues.maxMessages) revert TooManyMessages();\\n\\n    // validate that the public key is valid\\n    if (_encPubKey.x >= SNARK_SCALAR_FIELD || _encPubKey.y >= SNARK_SCALAR_FIELD) {\\n      revert MaciPubKeyLargerThanSnarkFieldSize();\\n    }\\n\\n    // cannot realistically overflow\\n    unchecked {\\n      numMessages++;\\n    }\\n\\n    // we enforce that msgType here is 1 so we don't need checks\\n    // at the circuit level\\n    _message.msgType = 1;\\n\\n    uint256 messageLeaf = hashMessageAndEncPubKey(_message, _encPubKey);\\n    extContracts.messageAq.enqueue(messageLeaf);\\n\\n    emit PublishMessage(_message, _encPubKey);\\n  }\\n\\n  /// @notice submit a message batch\\n  /// @dev Can only be submitted before the voting deadline\\n  /// @param _messages the messages\\n  /// @param _encPubKeys the encrypted public keys\\n  function publishMessageBatch(Message[] calldata _messages, PubKey[] calldata _encPubKeys) external {\\n    if (_messages.length != _encPubKeys.length) {\\n      revert InvalidBatchLength();\\n    }\\n\\n    uint256 len = _messages.length;\\n    for (uint256 i = 0; i < len; ) {\\n      // an event will be published by this function already\\n      publishMessage(_messages[i], _encPubKeys[i]);\\n\\n      unchecked {\\n        i++;\\n      }\\n    }\\n  }\\n\\n  /// @inheritdoc IPoll\\n  function mergeMaciStateAqSubRoots(uint256 _numSrQueueOps, uint256 _pollId) public onlyOwner isAfterVotingDeadline {\\n    // This function cannot be called after the stateAq was merged\\n    if (stateAqMerged) revert StateAqAlreadyMerged();\\n\\n    // merge subroots\\n    extContracts.maci.mergeStateAqSubRoots(_numSrQueueOps, _pollId);\\n\\n    emit MergeMaciStateAqSubRoots(_numSrQueueOps);\\n  }\\n\\n  /// @inheritdoc IPoll\\n  function mergeMaciStateAq(uint256 _pollId) public onlyOwner isAfterVotingDeadline {\\n    // This function can only be called once per Poll after the voting\\n    // deadline\\n    if (stateAqMerged) revert StateAqAlreadyMerged();\\n\\n    // set merged to true so it cannot be called again\\n    stateAqMerged = true;\\n\\n    // the subtrees must have been merged first\\n    if (!extContracts.maci.stateAq().subTreesMerged()) revert StateAqSubtreesNeedMerge();\\n\\n    mergedStateRoot = extContracts.maci.mergeStateAq(_pollId);\\n\\n    // Set currentSbCommitment\\n    uint256[3] memory sb;\\n    sb[0] = mergedStateRoot;\\n    sb[1] = emptyBallotRoots[treeDepths.voteOptionTreeDepth - 1];\\n    sb[2] = uint256(0);\\n\\n    currentSbCommitment = hash3(sb);\\n\\n    numSignups = extContracts.maci.numSignUps();\\n    emit MergeMaciStateAq(mergedStateRoot, numSignups);\\n  }\\n\\n  /// @inheritdoc IPoll\\n  function mergeMessageAqSubRoots(uint256 _numSrQueueOps) public onlyOwner isAfterVotingDeadline {\\n    extContracts.messageAq.mergeSubRoots(_numSrQueueOps);\\n    emit MergeMessageAqSubRoots(_numSrQueueOps);\\n  }\\n\\n  /// @inheritdoc IPoll\\n  function mergeMessageAq() public onlyOwner isAfterVotingDeadline {\\n    uint256 root = extContracts.messageAq.merge(treeDepths.messageTreeDepth);\\n    emit MergeMessageAq(root);\\n  }\\n\\n  /// @inheritdoc IPoll\\n  function getDeployTimeAndDuration() public view returns (uint256 pollDeployTime, uint256 pollDuration) {\\n    pollDeployTime = deployTime;\\n    pollDuration = duration;\\n  }\\n\\n  /// @inheritdoc IPoll\\n  function numSignUpsAndMessages() public view returns (uint256 numSUps, uint256 numMsgs) {\\n    numSUps = numSignups;\\n    numMsgs = numMessages;\\n  }\\n}\\n\",\"keccak256\":\"0xa1d6b7f5642632172429ae8920c56985d104d453dba04243517fa771dc46fa1d\",\"license\":\"MIT\"},\"contracts/maci-contracts/PollFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { IMACI } from \\\"./interfaces/IMACI.sol\\\";\\nimport { AccQueue } from \\\"./trees/AccQueue.sol\\\";\\nimport { AccQueueQuinaryMaci } from \\\"./trees/AccQueueQuinaryMaci.sol\\\";\\nimport { TopupCredit } from \\\"./TopupCredit.sol\\\";\\nimport { Params } from \\\"./utilities/Params.sol\\\";\\nimport { DomainObjs } from \\\"./utilities/DomainObjs.sol\\\";\\nimport { Poll } from \\\"./Poll.sol\\\";\\nimport { IPollFactory } from \\\"./interfaces/IPollFactory.sol\\\";\\n\\n/// @title PollFactory\\n/// @notice A factory contract which deploys Poll contracts. It allows the MACI contract\\n/// size to stay within the limit set by EIP-170.\\ncontract PollFactory is Params, DomainObjs, IPollFactory {\\n  // The number of children each node in the message tree has\\n  uint256 internal constant TREE_ARITY = 5;\\n\\n  // custom error\\n  error InvalidMaxValues();\\n\\n  /// @notice The PollFactory constructor\\n  // solhint-disable-next-line no-empty-blocks\\n  constructor() payable {}\\n\\n  /// @inheritdoc IPollFactory\\n  function deploy(\\n    uint256 _duration,\\n    MaxValues calldata _maxValues,\\n    TreeDepths calldata _treeDepths,\\n    PubKey calldata _coordinatorPubKey,\\n    address _maci,\\n    TopupCredit _topupCredit,\\n    address _pollOwner\\n  ) public virtual returns (address pollAddr) {\\n    /// @notice Validate _maxValues\\n    /// maxVoteOptions must be less than 2 ** 50 due to circuit limitations;\\n    /// it will be packed as a 50-bit value along with other values as one\\n    /// of the inputs (aka packedVal)\\n    if (_maxValues.maxVoteOptions >= (2 ** 50)) {\\n      revert InvalidMaxValues();\\n    }\\n\\n    /// @notice deploy a new AccQueue contract to store messages\\n    AccQueue messageAq = new AccQueueQuinaryMaci(_treeDepths.messageTreeSubDepth);\\n\\n    /// @notice the smart contracts that a Poll would interact with\\n    ExtContracts memory extContracts = ExtContracts({\\n      maci: IMACI(_maci),\\n      messageAq: messageAq,\\n      topupCredit: _topupCredit\\n    });\\n\\n    // deploy the poll\\n    Poll poll = new Poll(_duration, _maxValues, _treeDepths, _coordinatorPubKey, extContracts);\\n\\n    // Make the Poll contract own the messageAq contract, so only it can\\n    // run enqueue/merge\\n    messageAq.transferOwnership(address(poll));\\n\\n    // init Poll\\n    poll.init();\\n\\n    poll.transferOwnership(_pollOwner);\\n\\n    pollAddr = address(poll);\\n  }\\n}\\n\",\"keccak256\":\"0x53f7b3b7adf5a53c3bb85a1697148714399eabfc78f98be1e53f192826900255\",\"license\":\"MIT\"},\"contracts/maci-contracts/TopupCredit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title TopupCredit\\n/// @notice A contract representing a token used to topup a MACI's voter\\n/// credits\\ncontract TopupCredit is ERC20, Ownable {\\n  uint8 public constant DECIMALS = 1;\\n  uint256 public constant MAXIMUM_AIRDROP_AMOUNT = 100000 * 10 ** DECIMALS;\\n\\n  /// @notice custom errors\\n  error ExceedLimit();\\n\\n  /// @notice create  a new TopupCredit token\\n  constructor() payable ERC20(\\\"TopupCredit\\\", \\\"TopupCredit\\\") {}\\n\\n  /// @notice mint tokens to an account\\n  /// @param account the account to mint tokens to\\n  /// @param amount the amount of tokens to mint\\n  function airdropTo(address account, uint256 amount) public onlyOwner {\\n    if (amount >= MAXIMUM_AIRDROP_AMOUNT) {\\n      revert ExceedLimit();\\n    }\\n\\n    _mint(account, amount);\\n  }\\n\\n  /// @notice mint tokens to the contract owner\\n  /// @param amount the amount of tokens to mint\\n  function airdrop(uint256 amount) public onlyOwner {\\n    if (amount >= MAXIMUM_AIRDROP_AMOUNT) {\\n      revert ExceedLimit();\\n    }\\n\\n    _mint(msg.sender, amount);\\n  }\\n}\\n\",\"keccak256\":\"0x088cf42d9b7eb3cc3606131bd810feb9edc9b3c78219c0088e6ae6a44632d6a1\",\"license\":\"MIT\"},\"contracts/maci-contracts/crypto/Hasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { SnarkConstants } from \\\"./SnarkConstants.sol\\\";\\nimport { PoseidonT3 } from \\\"./PoseidonT3.sol\\\";\\nimport { PoseidonT4 } from \\\"./PoseidonT4.sol\\\";\\nimport { PoseidonT5 } from \\\"./PoseidonT5.sol\\\";\\nimport { PoseidonT6 } from \\\"./PoseidonT6.sol\\\";\\n\\n/// @notice A SHA256 hash function for any number of input elements, and Poseidon hash\\n/// functions for 2, 3, 4, 5, and 12 input elements.\\ncontract Hasher is SnarkConstants {\\n  /// @notice Computes the SHA256 hash of an array of uint256 elements.\\n  /// @param array The array of uint256 elements.\\n  /// @return result The SHA256 hash of the array.\\n  function sha256Hash(uint256[] memory array) public pure returns (uint256 result) {\\n    result = uint256(sha256(abi.encodePacked(array))) % SNARK_SCALAR_FIELD;\\n  }\\n\\n  /// @notice Computes the Poseidon hash of two uint256 elements.\\n  /// @param array An array of two uint256 elements.\\n  /// @return result The Poseidon hash of the two elements.\\n  function hash2(uint256[2] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT3.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of three uint256 elements.\\n  /// @param array An array of three uint256 elements.\\n  /// @return result The Poseidon hash of the three elements.\\n  function hash3(uint256[3] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT4.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of four uint256 elements.\\n  /// @param array An array of four uint256 elements.\\n  /// @return result The Poseidon hash of the four elements.\\n  function hash4(uint256[4] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT5.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of five uint256 elements.\\n  /// @param array An array of five uint256 elements.\\n  /// @return result The Poseidon hash of the five elements.\\n  function hash5(uint256[5] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT6.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of two uint256 elements.\\n  /// @param left the first element to hash.\\n  /// @param right the second element to hash.\\n  /// @return result The Poseidon hash of the two elements.\\n  function hashLeftRight(uint256 left, uint256 right) public pure returns (uint256 result) {\\n    uint256[2] memory input;\\n    input[0] = left;\\n    input[1] = right;\\n    result = hash2(input);\\n  }\\n}\\n\",\"keccak256\":\"0x64a6181ac6e0df316ab26432098f6fc48b2d356f2397d3886f887a13446c7137\",\"license\":\"MIT\"},\"contracts/maci-contracts/crypto/Pairing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to\\n// deal in the Software without restriction, including without limitation the\\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\\n// sell copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\\n// IN THE SOFTWARE.\\n\\n// 2019 OKIMS\\n\\npragma solidity ^0.8.10;\\n\\n/// @title Pairing\\n/// @notice A library implementing the alt_bn128 elliptic curve operations.\\nlibrary Pairing {\\n  uint256 public constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n  struct G1Point {\\n    uint256 x;\\n    uint256 y;\\n  }\\n\\n  // Encoding of field elements is: X[0] * z + X[1]\\n  struct G2Point {\\n    uint256[2] x;\\n    uint256[2] y;\\n  }\\n\\n  /// @notice custom errors\\n  error PairingAddFailed();\\n  error PairingMulFailed();\\n  error PairingOpcodeFailed();\\n\\n  /// @notice The negation of p, i.e. p.plus(p.negate()) should be zero.\\n  function negate(G1Point memory p) internal pure returns (G1Point memory) {\\n    // The prime q in the base field F_q for G1\\n    if (p.x == 0 && p.y == 0) {\\n      return G1Point(0, 0);\\n    } else {\\n      return G1Point(p.x, PRIME_Q - (p.y % PRIME_Q));\\n    }\\n  }\\n\\n  /// @notice r Returns the sum of two points of G1.\\n  function plus(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {\\n    uint256[4] memory input;\\n    input[0] = p1.x;\\n    input[1] = p1.y;\\n    input[2] = p2.x;\\n    input[3] = p2.y;\\n    bool success;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n\\n    if (!success) {\\n      revert PairingAddFailed();\\n    }\\n  }\\n\\n  /// @notice r Return the product of a point on G1 and a scalar, i.e.\\n  ///         p == p.scalarMul(1) and p.plus(p) == p.scalarMul(2) for all\\n  ///         points p.\\n  function scalarMul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {\\n    uint256[3] memory input;\\n    input[0] = p.x;\\n    input[1] = p.y;\\n    input[2] = s;\\n    bool success;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n\\n    if (!success) {\\n      revert PairingMulFailed();\\n    }\\n  }\\n\\n  /// @return isValid The result of computing the pairing check\\n  ///         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n  ///        For example,\\n  ///        pairing([P1(), P1().negate()], [P2(), P2()]) should return true.\\n  function pairing(\\n    G1Point memory a1,\\n    G2Point memory a2,\\n    G1Point memory b1,\\n    G2Point memory b2,\\n    G1Point memory c1,\\n    G2Point memory c2,\\n    G1Point memory d1,\\n    G2Point memory d2\\n  ) internal view returns (bool isValid) {\\n    G1Point[4] memory p1 = [a1, b1, c1, d1];\\n    G2Point[4] memory p2 = [a2, b2, c2, d2];\\n\\n    uint256 inputSize = 24;\\n    uint256[] memory input = new uint256[](inputSize);\\n\\n    for (uint256 i = 0; i < 4; i++) {\\n      uint256 j = i * 6;\\n      input[j + 0] = p1[i].x;\\n      input[j + 1] = p1[i].y;\\n      input[j + 2] = p2[i].x[0];\\n      input[j + 3] = p2[i].x[1];\\n      input[j + 4] = p2[i].y[0];\\n      input[j + 5] = p2[i].y[1];\\n    }\\n\\n    uint256[1] memory out;\\n    bool success;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n\\n    if (!success) {\\n      revert PairingOpcodeFailed();\\n    }\\n\\n    isValid = out[0] != 0;\\n  }\\n}\\n\",\"keccak256\":\"0x5ce2f85d56cec9a08960ebf54fe89a0867deb7f97d3151699ba238848598a1a4\",\"license\":\"MIT\"},\"contracts/maci-contracts/crypto/PoseidonT3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT3 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[2] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0xfff415a7054b60f0826d0f731aa47b8edf59a1ae485a803ca73b3280855a5cdf\",\"license\":\"MIT\"},\"contracts/maci-contracts/crypto/PoseidonT4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT4 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[3] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0xa5422f08624b09ec1766b8d36ea527ec8af3f76121fa136846a9adc9ea3cc717\",\"license\":\"MIT\"},\"contracts/maci-contracts/crypto/PoseidonT5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT5 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[4] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0xb27ffc3b4c053ab97006c9d2d634e326a101926f0f704d456cec3d33e5757cc5\",\"license\":\"MIT\"},\"contracts/maci-contracts/crypto/PoseidonT6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT6 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[5] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0x7e378eb768102153e5153b6f0f8bb08732d6950d0be09d5563973a31cc844fea\",\"license\":\"MIT\"},\"contracts/maci-contracts/crypto/SnarkCommon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\nimport { Pairing } from \\\"./Pairing.sol\\\";\\n\\n/// @title SnarkCommon\\n/// @notice a Contract which holds a struct\\n/// representing a Groth16 verifying key\\ncontract SnarkCommon {\\n  /// @notice a struct representing a Groth16 verifying key\\n  struct VerifyingKey {\\n    Pairing.G1Point alpha1;\\n    Pairing.G2Point beta2;\\n    Pairing.G2Point gamma2;\\n    Pairing.G2Point delta2;\\n    Pairing.G1Point[] ic;\\n  }\\n}\\n\",\"keccak256\":\"0xdccb710f060330d75763c92bd6828dd2cc891c3ea5a30ce30ae221c177a7eba7\",\"license\":\"MIT\"},\"contracts/maci-contracts/crypto/SnarkConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @title SnarkConstants\\n/// @notice This contract contains constants related to the SNARK\\n/// components of MACI.\\ncontract SnarkConstants {\\n  /// @notice The scalar field\\n  uint256 internal constant SNARK_SCALAR_FIELD =\\n    21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n  /// @notice The public key here is the first Pedersen base\\n  /// point from iden3's circomlib implementation of the Pedersen hash.\\n  /// Since it is generated using a hash-to-curve function, we are\\n  /// confident that no-one knows the private key associated with this\\n  /// public key. See:\\n  /// https://github.com/iden3/circomlib/blob/d5ed1c3ce4ca137a6b3ca48bec4ac12c1b38957a/src/pedersen_printbases.js\\n  /// Its hash should equal\\n  /// 6769006970205099520508948723718471724660867171122235270773600567925038008762.\\n  uint256 internal constant PAD_PUBKEY_X =\\n    10457101036533406547632367118273992217979173478358440826365724437999023779287;\\n  uint256 internal constant PAD_PUBKEY_Y =\\n    19824078218392094440610104313265183977899662750282163392862422243483260492317;\\n\\n  /// @notice The Keccack256 hash of 'Maci'\\n  uint256 internal constant NOTHING_UP_MY_SLEEVE =\\n    8370432830353022751713833565135785980866757267633941821328460903436894336785;\\n}\\n\",\"keccak256\":\"0xea489c5ac94d4f25f6255dbfeed0388c2841ead6d9d5e52a19bc8dd2c27b4d21\",\"license\":\"MIT\"},\"contracts/maci-contracts/interfaces/IMACI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { AccQueue } from \\\"../trees/AccQueue.sol\\\";\\n\\n/// @title IMACI\\n/// @notice MACI interface\\ninterface IMACI {\\n  /// @notice Get the depth of the state tree\\n  /// @return The depth of the state tree\\n  function stateTreeDepth() external view returns (uint8);\\n\\n  /// @notice Return the main root of the StateAq contract\\n  /// @return The Merkle root\\n  function getStateAqRoot() external view returns (uint256);\\n\\n  /// @notice Allow Poll contracts to merge the state subroots\\n  /// @param _numSrQueueOps Number of operations\\n  /// @param _pollId The ID of the active Poll\\n  function mergeStateAqSubRoots(uint256 _numSrQueueOps, uint256 _pollId) external;\\n\\n  /// @notice Allow Poll contracts to merge the state root\\n  /// @param _pollId The active Poll ID\\n  /// @return The calculated Merkle root\\n  function mergeStateAq(uint256 _pollId) external returns (uint256);\\n\\n  /// @notice Get the number of signups\\n  /// @return numsignUps The number of signups\\n  function numSignUps() external view returns (uint256);\\n\\n  /// @notice Get the state AccQueue\\n  /// @return The state AccQueue\\n  function stateAq() external view returns (AccQueue);\\n}\\n\",\"keccak256\":\"0x5046e3e06d927152c6cea0e910af0542bc0178381fd3d9e43b2023ca8ba2f3eb\",\"license\":\"MIT\"},\"contracts/maci-contracts/interfaces/IPoll.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { DomainObjs } from \\\"../utilities/DomainObjs.sol\\\";\\nimport { IMACI } from \\\"./IMACI.sol\\\";\\nimport { AccQueue } from \\\"../trees/AccQueue.sol\\\";\\nimport { TopupCredit } from \\\"../TopupCredit.sol\\\";\\n\\n/// @title IPoll\\n/// @notice Poll interface\\ninterface IPoll {\\n  /// @notice The number of messages which have been processed and the number of signups\\n  /// @return numSignups The number of signups\\n  /// @return numMsgs The number of messages sent by voters\\n  function numSignUpsAndMessages() external view returns (uint256 numSignups, uint256 numMsgs);\\n\\n  /// @notice Allows to publish a Topup message\\n  /// @param stateIndex The index of user in the state queue\\n  /// @param amount The amount of credits to topup\\n  function topup(uint256 stateIndex, uint256 amount) external;\\n\\n  /// @notice Allows anyone to publish a message (an encrypted command and signature).\\n  /// This function also enqueues the message.\\n  /// @param _message The message to publish\\n  /// @param _encPubKey An epheremal public key which can be combined with the\\n  /// coordinator's private key to generate an ECDH shared key with which\\n  /// to encrypt the message.\\n  function publishMessage(DomainObjs.Message memory _message, DomainObjs.PubKey calldata _encPubKey) external;\\n\\n  /// @notice The first step of merging the MACI state AccQueue. This allows the\\n  /// ProcessMessages circuit to access the latest state tree and ballots via\\n  /// currentSbCommitment.\\n  /// @param _numSrQueueOps Number of operations\\n  /// @param _pollId The ID of the active Poll\\n  function mergeMaciStateAqSubRoots(uint256 _numSrQueueOps, uint256 _pollId) external;\\n\\n  /// @notice The second step of merging the MACI state AccQueue. This allows the\\n  /// ProcessMessages circuit to access the latest state tree and ballots via\\n  /// currentSbCommitment.\\n  /// @param _pollId The ID of the active Poll\\n  function mergeMaciStateAq(uint256 _pollId) external;\\n\\n  /// @notice The first step in merging the message AccQueue so that the\\n  /// ProcessMessages circuit can access the message root.\\n  /// @param _numSrQueueOps The number of subroot queue operations to perform\\n  function mergeMessageAqSubRoots(uint256 _numSrQueueOps) external;\\n\\n  /// @notice The second step in merging the message AccQueue so that the\\n  /// ProcessMessages circuit can access the message root.\\n  function mergeMessageAq() external;\\n\\n  /// @notice Returns the Poll's deploy time and duration\\n  /// @return _deployTime The deployment timestamp\\n  /// @return _duration The duration of the poll\\n  function getDeployTimeAndDuration() external view returns (uint256 _deployTime, uint256 _duration);\\n\\n  /// @notice Get the result of whether the MACI contract's stateAq has been merged by this contract\\n  /// @return Whether the MACI contract's stateAq has been merged by this contract\\n  function stateAqMerged() external view returns (bool);\\n\\n  /// @notice Get the depths of the merkle trees\\n  /// @return intStateTreeDepth The depth of the state tree\\n  /// @return messageTreeSubDepth The subdepth of the message tree\\n  /// @return messageTreeDepth The depth of the message tree\\n  /// @return voteOptionTreeDepth The subdepth of the vote option tree\\n  function treeDepths()\\n    external\\n    view\\n    returns (uint8 intStateTreeDepth, uint8 messageTreeSubDepth, uint8 messageTreeDepth, uint8 voteOptionTreeDepth);\\n\\n  /// @notice Get the max values for the poll\\n  /// @return maxMessages The maximum number of messages\\n  /// @return maxVoteOptions The maximum number of vote options\\n  function maxValues() external view returns (uint256 maxMessages, uint256 maxVoteOptions);\\n\\n  /// @notice Get the external contracts\\n  /// @return maci The IMACI contract\\n  /// @return messageAq The AccQueue contract\\n  /// @return topupCredit The TopupCredit contract\\n  function extContracts() external view returns (IMACI maci, AccQueue messageAq, TopupCredit topupCredit);\\n\\n  /// @notice Get the hash of coordinator's public key\\n  /// @return _coordinatorPubKeyHash the hash of coordinator's public key\\n  function coordinatorPubKeyHash() external view returns (uint256 _coordinatorPubKeyHash);\\n\\n  /// @notice Get the commitment to the state leaves and the ballots. This is\\n  /// hash3(stateRoot, ballotRoot, salt).\\n  /// Its initial value should be\\n  /// hash(maciStateRootSnapshot, emptyBallotRoot, 0)\\n  /// Each successful invocation of processMessages() should use a different\\n  /// salt to update this value, so that an external observer cannot tell in\\n  /// the case that none of the messages are valid.\\n  /// @return The commitment to the state leaves and the ballots\\n  function currentSbCommitment() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6543c65572462d7e052503a4094a1900a12cb450ed91f097bed1e8d97ad0243c\",\"license\":\"MIT\"},\"contracts/maci-contracts/interfaces/IPollFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { TopupCredit } from \\\"../TopupCredit.sol\\\";\\nimport { Params } from \\\"../utilities/Params.sol\\\";\\nimport { DomainObjs } from \\\"../utilities/DomainObjs.sol\\\";\\n\\n/// @title IPollFactory\\n/// @notice PollFactory interface\\ninterface IPollFactory {\\n  /// @notice Deploy a new Poll contract and AccQueue contract for messages.\\n  /// @param _duration The duration of the poll\\n  /// @param _maxValues The max values for the poll\\n  /// @param _treeDepths The depths of the merkle trees\\n  /// @param _coordinatorPubKey The coordinator's public key\\n  /// @param _maci The MACI contract interface reference\\n  /// @param _topupCredit The TopupCredit contract\\n  /// @param _pollOwner The owner of the poll\\n  /// @return The deployed Poll contract\\n  function deploy(\\n    uint256 _duration,\\n    Params.MaxValues memory _maxValues,\\n    Params.TreeDepths memory _treeDepths,\\n    DomainObjs.PubKey memory _coordinatorPubKey,\\n    address _maci,\\n    TopupCredit _topupCredit,\\n    address _pollOwner\\n  ) external returns (address);\\n}\\n\",\"keccak256\":\"0xd729956bc34555baae893d62b4234a5cd17463f41737574a8e21def0045c13fc\",\"license\":\"MIT\"},\"contracts/maci-contracts/trees/AccQueue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Hasher } from \\\"../crypto/Hasher.sol\\\";\\n\\n/// @title AccQueue\\n/// @notice This contract defines a Merkle tree where each leaf insertion only updates a\\n/// subtree. To obtain the main tree root, the contract owner must merge the\\n/// subtrees together. Merging subtrees requires at least 2 operations:\\n/// mergeSubRoots(), and merge(). To get around the gas limit,\\n/// the mergeSubRoots() can be performed in multiple transactions.\\nabstract contract AccQueue is Ownable, Hasher {\\n  // The maximum tree depth\\n  uint256 public constant MAX_DEPTH = 32;\\n\\n  /// @notice A Queue is a 2D array of Merkle roots and indices which represents nodes\\n  /// in a Merkle tree while it is progressively updated.\\n  struct Queue {\\n    /// @notice IMPORTANT: the following declares an array of b elements of type T: T[b]\\n    /// And the following declares an array of b elements of type T[a]: T[a][b]\\n    /// As such, the following declares an array of MAX_DEPTH+1 arrays of\\n    /// uint256[4] arrays, **not the other way round**:\\n    uint256[4][MAX_DEPTH + 1] levels;\\n    uint256[MAX_DEPTH + 1] indices;\\n  }\\n\\n  // The depth of each subtree\\n  uint256 internal immutable subDepth;\\n\\n  // The number of elements per hash operation. Should be either 2 (for\\n  // binary trees) or 5 (quinary trees). The limit is 5 because that is the\\n  // maximum supported number of inputs for the EVM implementation of the\\n  // Poseidon hash function\\n  uint256 internal immutable hashLength;\\n\\n  // hashLength ** subDepth\\n  uint256 internal immutable subTreeCapacity;\\n\\n  // True hashLength == 2, false if hashLength == 5\\n  bool internal isBinary;\\n\\n  // The index of the current subtree. e.g. the first subtree has index 0, the\\n  // second has 1, and so on\\n  uint256 internal currentSubtreeIndex;\\n\\n  // Tracks the current subtree.\\n  Queue internal leafQueue;\\n\\n  // Tracks the smallest tree of subroots\\n  Queue internal subRootQueue;\\n\\n  // Subtree roots\\n  mapping(uint256 => uint256) internal subRoots;\\n\\n  // Merged roots\\n  uint256[MAX_DEPTH + 1] internal mainRoots;\\n\\n  // Whether the subtrees have been merged\\n  bool public subTreesMerged;\\n\\n  // Whether entire merkle tree has been merged\\n  bool public treeMerged;\\n\\n  // The root of the shortest possible tree which fits all current subtree\\n  // roots\\n  uint256 internal smallSRTroot;\\n\\n  // Tracks the next subroot to queue\\n  uint256 internal nextSubRootIndex;\\n\\n  // The number of leaves inserted across all subtrees so far\\n  uint256 public numLeaves;\\n\\n  /// @notice custom errors\\n  error SubDepthCannotBeZero();\\n  error SubdepthTooLarge(uint256 _subDepth, uint256 max);\\n  error InvalidHashLength();\\n  error DepthCannotBeZero();\\n  error SubTreesAlreadyMerged();\\n  error NothingToMerge();\\n  error SubTreesNotMerged();\\n  error DepthTooLarge(uint256 _depth, uint256 max);\\n  error DepthTooSmall(uint256 _depth, uint256 min);\\n  error InvalidIndex(uint256 _index);\\n  error InvalidLevel();\\n\\n  /// @notice Create a new AccQueue\\n  /// @param _subDepth The depth of each subtree.\\n  /// @param _hashLength The number of leaves per node (2 or 5).\\n  constructor(uint256 _subDepth, uint256 _hashLength) payable {\\n    /// validation\\n    if (_subDepth == 0) revert SubDepthCannotBeZero();\\n    if (_subDepth > MAX_DEPTH) revert SubdepthTooLarge(_subDepth, MAX_DEPTH);\\n    if (_hashLength != 2 && _hashLength != 5) revert InvalidHashLength();\\n\\n    isBinary = _hashLength == 2;\\n    subDepth = _subDepth;\\n    hashLength = _hashLength;\\n    subTreeCapacity = _hashLength ** _subDepth;\\n  }\\n\\n  /// @notice Hash the contents of the specified level and the specified leaf.\\n  /// This is a virtual function as the hash function which the overriding\\n  /// contract uses will be either hashLeftRight or hash5, which require\\n  /// different input array lengths.\\n  /// @param _level The level to hash.\\n  /// @param _leaf The leaf include with the level.\\n  /// @return _hash The hash of the level and leaf.\\n  // solhint-disable-next-line no-empty-blocks\\n  function hashLevel(uint256 _level, uint256 _leaf) internal virtual returns (uint256 _hash) {}\\n\\n  /// @notice Hash the contents of the specified level and the specified leaf.\\n  /// This is a virtual function as the hash function which the overriding\\n  /// contract uses will be either hashLeftRight or hash5, which require\\n  /// different input array lengths.\\n  /// @param _level The level to hash.\\n  /// @param _leaf The leaf include with the level.\\n  /// @return _hash The hash of the level and leaf.\\n  // solhint-disable-next-line no-empty-blocks\\n  function hashLevelLeaf(uint256 _level, uint256 _leaf) public view virtual returns (uint256 _hash) {}\\n\\n  /// @notice Returns the zero leaf at a specified level.\\n  /// This is a virtual function as the hash function which the overriding\\n  /// contract uses will be either hashLeftRight or hash5, which will produce\\n  /// different zero values (e.g. hashLeftRight(0, 0) vs\\n  /// hash5([0, 0, 0, 0, 0]). Moreover, the zero value may be a\\n  /// nothing-up-my-sleeve value.\\n  /// @param _level The level at which to return the zero leaf.\\n  /// @return zero The zero leaf at the specified level.\\n  // solhint-disable-next-line no-empty-blocks\\n  function getZero(uint256 _level) internal virtual returns (uint256 zero) {}\\n\\n  /// @notice Add a leaf to the queue for the current subtree.\\n  /// @param _leaf The leaf to add.\\n  /// @return leafIndex The index of the leaf in the queue.\\n  function enqueue(uint256 _leaf) public onlyOwner returns (uint256 leafIndex) {\\n    leafIndex = numLeaves;\\n    // Recursively queue the leaf\\n    _enqueue(_leaf, 0);\\n\\n    // Update the leaf counter\\n    numLeaves = leafIndex + 1;\\n\\n    // Now that a new leaf has been added, mainRoots and smallSRTroot are\\n    // obsolete\\n    delete mainRoots;\\n    delete smallSRTroot;\\n    subTreesMerged = false;\\n\\n    // If a subtree is full\\n    if (numLeaves % subTreeCapacity == 0) {\\n      // Store the subroot\\n      subRoots[currentSubtreeIndex] = leafQueue.levels[subDepth][0];\\n\\n      // Increment the index\\n      currentSubtreeIndex++;\\n\\n      // Delete ancillary data\\n      delete leafQueue.levels[subDepth][0];\\n      delete leafQueue.indices;\\n    }\\n  }\\n\\n  /// @notice Updates the queue at a given level and hashes any subroots\\n  /// that need to be hashed.\\n  /// @param _leaf The leaf to add.\\n  /// @param _level The level at which to queue the leaf.\\n  function _enqueue(uint256 _leaf, uint256 _level) internal {\\n    if (_level > subDepth) {\\n      revert InvalidLevel();\\n    }\\n\\n    while (true) {\\n      uint256 n = leafQueue.indices[_level];\\n\\n      if (n != hashLength - 1) {\\n        // Just store the leaf\\n        leafQueue.levels[_level][n] = _leaf;\\n\\n        if (_level != subDepth) {\\n          // Update the index\\n          leafQueue.indices[_level]++;\\n        }\\n\\n        return;\\n      }\\n\\n      // Hash the leaves to next level\\n      _leaf = hashLevel(_level, _leaf);\\n\\n      // Reset the index for this level\\n      delete leafQueue.indices[_level];\\n\\n      // Queue the hash of the leaves into to the next level\\n      _level++;\\n    }\\n  }\\n\\n  /// @notice Fill any empty leaves of the current subtree with zeros and store the\\n  /// resulting subroot.\\n  function fill() public onlyOwner {\\n    if (numLeaves % subTreeCapacity == 0) {\\n      // If the subtree is completely empty, then the subroot is a\\n      // precalculated zero value\\n      subRoots[currentSubtreeIndex] = getZero(subDepth);\\n    } else {\\n      // Otherwise, fill the rest of the subtree with zeros\\n      _fill(0);\\n\\n      // Store the subroot\\n      subRoots[currentSubtreeIndex] = leafQueue.levels[subDepth][0];\\n\\n      // Reset the subtree data\\n      delete leafQueue.levels;\\n\\n      // Reset the merged roots\\n      delete mainRoots;\\n    }\\n\\n    // Increment the subtree index\\n    uint256 curr = currentSubtreeIndex + 1;\\n    currentSubtreeIndex = curr;\\n\\n    // Update the number of leaves\\n    numLeaves = curr * subTreeCapacity;\\n\\n    // Reset the subroot tree root now that it is obsolete\\n    delete smallSRTroot;\\n\\n    subTreesMerged = false;\\n  }\\n\\n  /// @notice A function that queues zeros to the specified level, hashes,\\n  /// the level, and enqueues the hash to the next level.\\n  /// @param _level The level at which to queue zeros.\\n  // solhint-disable-next-line no-empty-blocks\\n  function _fill(uint256 _level) internal virtual {}\\n\\n  /// Insert a subtree. Used for batch enqueues.\\n  function insertSubTree(uint256 _subRoot) public onlyOwner {\\n    subRoots[currentSubtreeIndex] = _subRoot;\\n\\n    // Increment the subtree index\\n    currentSubtreeIndex++;\\n\\n    // Update the number of leaves\\n    numLeaves += subTreeCapacity;\\n\\n    // Reset the subroot tree root now that it is obsolete\\n    delete smallSRTroot;\\n\\n    subTreesMerged = false;\\n  }\\n\\n  /// @notice Calculate the lowest possible height of a tree with\\n  /// all the subroots merged together.\\n  /// @return depth The lowest possible height of a tree with all the\\n  function calcMinHeight() public view returns (uint256 depth) {\\n    depth = 1;\\n    while (true) {\\n      if (hashLength ** depth >= currentSubtreeIndex) {\\n        break;\\n      }\\n      depth++;\\n    }\\n  }\\n\\n  /// @notice Merge all subtrees to form the shortest possible tree.\\n  /// This function can be called either once to merge all subtrees in a\\n  /// single transaction, or multiple times to do the same in multiple\\n  /// transactions.\\n  /// @param _numSrQueueOps The number of times this function will call\\n  ///                       queueSubRoot(), up to the maximum number of times\\n  ///                       necessary. If it is set to 0, it will call\\n  ///                       queueSubRoot() as many times as is necessary. Set\\n  ///                       this to a low number and call this function\\n  ///                       multiple times if there are many subroots to\\n  ///                       merge, or a single transaction could run out of\\n  ///                       gas.\\n  function mergeSubRoots(uint256 _numSrQueueOps) public onlyOwner {\\n    // This function can only be called once unless a new subtree is created\\n    if (subTreesMerged) revert SubTreesAlreadyMerged();\\n\\n    // There must be subtrees to merge\\n    if (numLeaves == 0) revert NothingToMerge();\\n\\n    // Fill any empty leaves in the current subtree with zeros only if the\\n    // current subtree is not full\\n    if (numLeaves % subTreeCapacity != 0) {\\n      fill();\\n    }\\n\\n    // If there is only 1 subtree, use its root\\n    if (currentSubtreeIndex == 1) {\\n      smallSRTroot = getSubRoot(0);\\n      subTreesMerged = true;\\n      return;\\n    }\\n\\n    uint256 depth = calcMinHeight();\\n\\n    uint256 queueOpsPerformed = 0;\\n    for (uint256 i = nextSubRootIndex; i < currentSubtreeIndex; i++) {\\n      if (_numSrQueueOps != 0 && queueOpsPerformed == _numSrQueueOps) {\\n        // If the limit is not 0, stop if the limit has been reached\\n        return;\\n      }\\n\\n      // Queue the next subroot\\n      queueSubRoot(getSubRoot(nextSubRootIndex), 0, depth);\\n\\n      // Increment the next subroot counter\\n      nextSubRootIndex++;\\n\\n      // Increment the ops counter\\n      queueOpsPerformed++;\\n    }\\n\\n    // The height of the tree of subroots\\n    uint256 m = hashLength ** depth;\\n\\n    // Queue zeroes to fill out the SRT\\n    if (nextSubRootIndex == currentSubtreeIndex) {\\n      uint256 z = getZero(subDepth);\\n      for (uint256 i = currentSubtreeIndex; i < m; i++) {\\n        queueSubRoot(z, 0, depth);\\n      }\\n    }\\n\\n    // Store the smallest main root\\n    smallSRTroot = subRootQueue.levels[depth][0];\\n    subTreesMerged = true;\\n  }\\n\\n  /// @notice Queues a subroot into the subroot tree.\\n  /// @param _leaf The value to queue.\\n  /// @param _level The level at which to queue _leaf.\\n  /// @param _maxDepth The depth of the tree.\\n  function queueSubRoot(uint256 _leaf, uint256 _level, uint256 _maxDepth) internal {\\n    if (_level > _maxDepth) {\\n      return;\\n    }\\n\\n    uint256 n = subRootQueue.indices[_level];\\n\\n    if (n != hashLength - 1) {\\n      // Just store the leaf\\n      subRootQueue.levels[_level][n] = _leaf;\\n      subRootQueue.indices[_level]++;\\n    } else {\\n      // Hash the elements in this level and queue it in the next level\\n      uint256 hashed;\\n      if (isBinary) {\\n        uint256[2] memory inputs;\\n        inputs[0] = subRootQueue.levels[_level][0];\\n        inputs[1] = _leaf;\\n        hashed = hash2(inputs);\\n      } else {\\n        uint256[5] memory inputs;\\n        for (uint8 i = 0; i < n; i++) {\\n          inputs[i] = subRootQueue.levels[_level][i];\\n        }\\n        inputs[n] = _leaf;\\n        hashed = hash5(inputs);\\n      }\\n\\n      // TODO: change recursion to a while loop\\n      // Recurse\\n      delete subRootQueue.indices[_level];\\n      queueSubRoot(hashed, _level + 1, _maxDepth);\\n    }\\n  }\\n\\n  /// @notice Merge all subtrees to form a main tree with a desired depth.\\n  /// @param _depth The depth of the main tree. It must fit all the leaves or\\n  ///               this function will revert.\\n  /// @return root The root of the main tree.\\n  function merge(uint256 _depth) public onlyOwner returns (uint256 root) {\\n    // The tree depth must be more than 0\\n    if (_depth == 0) revert DepthCannotBeZero();\\n\\n    // Ensure that the subtrees have been merged\\n    if (!subTreesMerged) revert SubTreesNotMerged();\\n\\n    // Check the depth\\n    if (_depth > MAX_DEPTH) revert DepthTooLarge(_depth, MAX_DEPTH);\\n\\n    // Calculate the SRT depth\\n    uint256 srtDepth = subDepth;\\n    while (true) {\\n      if (hashLength ** srtDepth >= numLeaves) {\\n        break;\\n      }\\n      srtDepth++;\\n    }\\n\\n    if (_depth < srtDepth) revert DepthTooSmall(_depth, srtDepth);\\n\\n    // If the depth is the same as the SRT depth, just use the SRT root\\n    if (_depth == srtDepth) {\\n      mainRoots[_depth] = smallSRTroot;\\n      treeMerged = true;\\n      return smallSRTroot;\\n    } else {\\n      root = smallSRTroot;\\n\\n      // Calculate the main root\\n\\n      for (uint256 i = srtDepth; i < _depth; i++) {\\n        uint256 z = getZero(i);\\n\\n        if (isBinary) {\\n          uint256[2] memory inputs;\\n          inputs[0] = root;\\n          inputs[1] = z;\\n          root = hash2(inputs);\\n        } else {\\n          uint256[5] memory inputs;\\n          inputs[0] = root;\\n          inputs[1] = z;\\n          inputs[2] = z;\\n          inputs[3] = z;\\n          inputs[4] = z;\\n          root = hash5(inputs);\\n        }\\n      }\\n\\n      mainRoots[_depth] = root;\\n      treeMerged = true;\\n    }\\n  }\\n\\n  /// @notice Returns the subroot at the specified index. Reverts if the index refers\\n  /// to a subtree which has not been filled yet.\\n  /// @param _index The subroot index.\\n  /// @return subRoot The subroot at the specified index.\\n  function getSubRoot(uint256 _index) public view returns (uint256 subRoot) {\\n    if (currentSubtreeIndex <= _index) revert InvalidIndex(_index);\\n    subRoot = subRoots[_index];\\n  }\\n\\n  /// @notice Returns the subroot tree (SRT) root. Its value must first be computed\\n  /// using mergeSubRoots.\\n  /// @return smallSubTreeRoot The SRT root.\\n  function getSmallSRTroot() public view returns (uint256 smallSubTreeRoot) {\\n    if (!subTreesMerged) revert SubTreesNotMerged();\\n    smallSubTreeRoot = smallSRTroot;\\n  }\\n\\n  /// @notice Return the merged Merkle root of all the leaves at a desired depth.\\n  /// @dev merge() or merged(_depth) must be called first.\\n  /// @param _depth The depth of the main tree. It must first be computed\\n  ///               using mergeSubRoots() and merge().\\n  /// @return mainRoot The root of the main tree.\\n  function getMainRoot(uint256 _depth) public view returns (uint256 mainRoot) {\\n    if (hashLength ** _depth < numLeaves) revert DepthTooSmall(_depth, numLeaves);\\n\\n    mainRoot = mainRoots[_depth];\\n  }\\n\\n  /// @notice Get the next subroot index and the current subtree index.\\n  function getSrIndices() public view returns (uint256 next, uint256 current) {\\n    next = nextSubRootIndex;\\n    current = currentSubtreeIndex;\\n  }\\n}\\n\",\"keccak256\":\"0x1f37694c7dcac8552daf04d6561e46c48cbf7c53573032e387db09f3ef9ff0e7\",\"license\":\"MIT\"},\"contracts/maci-contracts/trees/AccQueueQuinary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { AccQueue } from \\\"./AccQueue.sol\\\";\\n\\n/// @title AccQueueQuinary\\n/// @notice This contract defines a Merkle tree where each leaf insertion only updates a\\n/// subtree. To obtain the main tree root, the contract owner must merge the\\n/// subtrees together. Merging subtrees requires at least 2 operations:\\n/// mergeSubRoots(), and merge(). To get around the gas limit,\\n/// the mergeSubRoots() can be performed in multiple transactions.\\n/// @dev This contract is for a quinary tree (5 leaves per node)\\nabstract contract AccQueueQuinary is AccQueue {\\n  /// @notice Create a new AccQueueQuinary instance\\n  constructor(uint256 _subDepth) AccQueue(_subDepth, 5) {}\\n\\n  /// @notice Hash the contents of the specified level and the specified leaf.\\n  /// @dev it also frees up storage slots to refund gas.\\n  /// @param _level The level to hash.\\n  /// @param _leaf The leaf include with the level.\\n  /// @return hashed The hash of the level and leaf.\\n  function hashLevel(uint256 _level, uint256 _leaf) internal override returns (uint256 hashed) {\\n    uint256[5] memory inputs;\\n    inputs[0] = leafQueue.levels[_level][0];\\n    inputs[1] = leafQueue.levels[_level][1];\\n    inputs[2] = leafQueue.levels[_level][2];\\n    inputs[3] = leafQueue.levels[_level][3];\\n    inputs[4] = _leaf;\\n    hashed = hash5(inputs);\\n\\n    // Free up storage slots to refund gas. Note that using a loop here\\n    // would result in lower gas savings.\\n    delete leafQueue.levels[_level];\\n  }\\n\\n  /// @notice Hash the contents of the specified level and the specified leaf.\\n  /// @param _level The level to hash.\\n  /// @param _leaf The leaf include with the level.\\n  /// @return hashed The hash of the level and leaf.\\n  function hashLevelLeaf(uint256 _level, uint256 _leaf) public view override returns (uint256 hashed) {\\n    uint256[5] memory inputs;\\n    inputs[0] = leafQueue.levels[_level][0];\\n    inputs[1] = leafQueue.levels[_level][1];\\n    inputs[2] = leafQueue.levels[_level][2];\\n    inputs[3] = leafQueue.levels[_level][3];\\n    inputs[4] = _leaf;\\n    hashed = hash5(inputs);\\n  }\\n\\n  /// @notice An internal function which fills a subtree\\n  /// @param _level The level at which to fill the subtree\\n  function _fill(uint256 _level) internal override {\\n    while (_level < subDepth) {\\n      uint256 n = leafQueue.indices[_level];\\n\\n      if (n != 0) {\\n        // Fill the subtree level with zeros and hash the level\\n        uint256 hashed;\\n\\n        uint256[5] memory inputs;\\n        uint256 z = getZero(_level);\\n        uint8 i = 0;\\n        for (; i < n; i++) {\\n          inputs[i] = leafQueue.levels[_level][i];\\n        }\\n\\n        for (; i < hashLength; i++) {\\n          inputs[i] = z;\\n        }\\n        hashed = hash5(inputs);\\n\\n        // Update the subtree from the next level onwards with the new leaf\\n        _enqueue(hashed, _level + 1);\\n      }\\n\\n      // Reset the current level\\n      delete leafQueue.indices[_level];\\n\\n      _level++;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x41190de249b6964a2c95138c278da46a7e64ecd99d1b0204ab5ee688ab793418\",\"license\":\"MIT\"},\"contracts/maci-contracts/trees/AccQueueQuinaryMaci.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { MerkleZeros as MerkleQuinaryMaci } from \\\"./zeros/MerkleQuinaryMaci.sol\\\";\\nimport { AccQueueQuinary } from \\\"./AccQueueQuinary.sol\\\";\\n\\n/// @title AccQueueQuinaryMaci\\n/// @notice This contract extends AccQueueQuinary and MerkleQuinaryMaci\\n/// @dev This contract is used for creating a\\n/// Merkle tree with quinary (5 leaves per node) structure\\ncontract AccQueueQuinaryMaci is AccQueueQuinary, MerkleQuinaryMaci {\\n  /// @notice Constructor for creating AccQueueQuinaryMaci contract\\n  /// @param _subDepth The depth of each subtree\\n  constructor(uint256 _subDepth) AccQueueQuinary(_subDepth) {}\\n\\n  /// @notice Returns the zero leaf at a specified level\\n  /// @param _level The level at which to return the zero leaf\\n  /// @return zero The zero leaf at the specified level\\n  function getZero(uint256 _level) internal view override returns (uint256 zero) {\\n    zero = zeros[_level];\\n  }\\n}\\n\",\"keccak256\":\"0xf749e787d5264975f87d6272118ab104390b9460de402da767e2e0594d1cd607\",\"license\":\"MIT\"},\"contracts/maci-contracts/trees/EmptyBallotRoots.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nabstract contract EmptyBallotRoots {\\n  // emptyBallotRoots contains the roots of Ballot trees of five leaf\\n  // configurations.\\n  // Each tree has a depth of 10, which is the hardcoded state tree depth.\\n  // Each leaf is an empty ballot. A configuration refers to the depth of the\\n  // voice option tree for that ballot.\\n\\n  // The leaf for the root at index 0 contains hash(0, root of a VO tree with\\n  // depth 1 and zero-value 0)\\n\\n  // The leaf for the root at index 1 contains hash(0, root of a VO tree with\\n  // depth 2 and zero-value 0)\\n\\n  // ... and so on.\\n\\n  // The first parameter to the hash function is the nonce, which is 0.\\n\\n  uint256[5] internal emptyBallotRoots;\\n\\n  constructor() {\\n    emptyBallotRoots[0] = uint256(6579820437991406069687396372962263845395426835385368878767605633903648955255);\\n    emptyBallotRoots[1] = uint256(9105453741665960449792281626882014222103501499246287334255160659262747058842);\\n    emptyBallotRoots[2] = uint256(14830222164980158319423900821611648302565544940504586015002280367515043751869);\\n    emptyBallotRoots[3] = uint256(12031563002271722465187541954825013132282571927669361737331626664787916495335);\\n    emptyBallotRoots[4] = uint256(5204612805325639173251450278876337947880680931527922506745154187077640790699);\\n  }\\n}\\n\",\"keccak256\":\"0xf9430abe96d1d55dff8eeb43f62b01a607267c1e033779631528b2275dd63e81\",\"license\":\"MIT\"},\"contracts/maci-contracts/trees/zeros/MerkleQuinaryMaci.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nabstract contract MerkleZeros {\\n  uint256[33] internal zeros;\\n\\n  // Quinary tree zeros (Keccak hash of 'Maci')\\n  constructor() {\\n    zeros[0] = uint256(8370432830353022751713833565135785980866757267633941821328460903436894336785);\\n    zeros[1] = uint256(12915444503621073454579416579430905206970714557680052030066757042249102605307);\\n    zeros[2] = uint256(15825388848727206932541662858173052318786639683743459477657913288690190505308);\\n    zeros[3] = uint256(20672917177817295069558894035958266756825295443848082659014905185716743537191);\\n    zeros[4] = uint256(448586013948167251740855715259393055429962470693972912240018559200278204556);\\n    zeros[5] = uint256(3228865992178886480410396198366133115832717015233640381802715479176981303177);\\n    zeros[6] = uint256(19116532419590876304532847271428641103751206695152259493043279205958851263600);\\n    zeros[7] = uint256(13531983203936271379763604150672239370281863210813769735936250692178889682484);\\n    zeros[8] = uint256(8276490051100115441938424474671329955897359239518198952109759468777824929104);\\n    zeros[9] = uint256(1234816188709792521426066175633785051600533236493067959807265450339481920006);\\n    zeros[10] = uint256(14253963034950198848796956783804665963745244419038717333683296599064556174281);\\n    zeros[11] = uint256(6367560368479067766970398112009211893636892126125767203198799843543931913172);\\n    zeros[12] = uint256(9086778412328290069463938062555298073857321633960448227011862356090607842391);\\n    zeros[13] = uint256(1440983698234119608650157588008070947531139377294971527360643096251396484622);\\n    zeros[14] = uint256(3957599085599383799297196095384587366602816424699353871878382158004571037876);\\n    zeros[15] = uint256(2874250189355749385170216620368454832544508482778847425177457138604069991955);\\n    zeros[16] = uint256(21009179226085449764156117702096359546848859855915028677582017987249294772778);\\n    zeros[17] = uint256(11639371146919469643603772238908032714588430905217730187804009793768292270213);\\n    zeros[18] = uint256(6279313411277883478350325643881386249374023631847602720184182017599127173896);\\n    zeros[19] = uint256(21059196126634383551994255775761712285020874549906884292741523421591865338509);\\n    zeros[20] = uint256(9444544622817172574621750245792527383369133221167610044960147559319164808325);\\n    zeros[21] = uint256(5374570219497355452080912323548395721574511162814862844226178635172695078543);\\n    zeros[22] = uint256(4155904241440251764630449308160227499466701168124519106689866311729092343061);\\n    zeros[23] = uint256(15881609944326576145786405158479503217901875433072026818450276983706463215155);\\n    zeros[24] = uint256(20831546672064137588434602157208687297579005252478070660473540633558666587287);\\n    zeros[25] = uint256(3209071488384365842993449718919243416332014108747571544339190291353564426179);\\n    zeros[26] = uint256(10030934989297780221224272248227257782450689603145083016739151821673604746295);\\n    zeros[27] = uint256(16504852316033851373501270056537918974469380446508638487151124538300880427080);\\n    zeros[28] = uint256(5226137093551352657015038416264755428944140743893702595442932837011856178457);\\n    zeros[29] = uint256(18779994066356991319291039019820482828679702085087990978933303018673869446075);\\n    zeros[30] = uint256(12037506572124351893114409509086276299115869080424687624451184925646292710978);\\n    zeros[31] = uint256(12049750997011422639258622747494178076018128204515149991024639355149614767606);\\n    zeros[32] = uint256(3171463916443906096008599541392648187002297410622977814790586531203175805057);\\n  }\\n}\\n\",\"keccak256\":\"0x8697bf45f4805e6bdf84f2c0c95b5a1946f79a7c9806ee711dce785650124807\",\"license\":\"MIT\"},\"contracts/maci-contracts/utilities/DomainObjs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @title DomainObjs\\n/// @notice An utility contract that holds\\n/// a number of domain objects and functions\\ncontract DomainObjs {\\n  /// @notice the length of a MACI message\\n  uint8 public constant MESSAGE_DATA_LENGTH = 10;\\n\\n  /// @title Message\\n  /// @notice this struct represents a MACI message\\n  /// @dev msgType: 1 for vote message, 2 for topup message (size 2)\\n  struct Message {\\n    uint256 msgType;\\n    uint256[MESSAGE_DATA_LENGTH] data;\\n  }\\n\\n  /// @title PubKey\\n  /// @notice A MACI public key\\n  struct PubKey {\\n    uint256 x;\\n    uint256 y;\\n  }\\n\\n  /// @title StateLeaf\\n  /// @notice A MACI state leaf\\n  /// @dev used to represent a user's state\\n  /// in the state Merkle tree\\n  struct StateLeaf {\\n    PubKey pubKey;\\n    uint256 voiceCreditBalance;\\n    uint256 timestamp;\\n  }\\n}\\n\",\"keccak256\":\"0x2d6a390a36a2e95985959cd1ef5b896c6dfedad01c09154674b2ff48e54785bb\",\"license\":\"MIT\"},\"contracts/maci-contracts/utilities/Params.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { IMACI } from \\\"../interfaces/IMACI.sol\\\";\\nimport { AccQueue } from \\\"../trees/AccQueue.sol\\\";\\nimport { TopupCredit } from \\\"../TopupCredit.sol\\\";\\n\\n/// @title Params\\n/// @notice This contracts contains a number of structures\\n/// which are to be passed as parameters to Poll contracts.\\n/// This way we can reduce the number of parameters\\n/// and avoid a stack too deep error during compilation.\\ncontract Params {\\n  /// @notice A struct holding the depths of the merkle trees\\n  struct TreeDepths {\\n    uint8 intStateTreeDepth;\\n    uint8 messageTreeSubDepth;\\n    uint8 messageTreeDepth;\\n    uint8 voteOptionTreeDepth;\\n  }\\n\\n  /// @notice A struct holding the max values for the poll\\n  struct MaxValues {\\n    uint256 maxMessages;\\n    uint256 maxVoteOptions;\\n  }\\n\\n  /// @notice A struct holding the external contracts\\n  /// that are to be passed to a Poll contract on\\n  /// deployment\\n  struct ExtContracts {\\n    IMACI maci;\\n    AccQueue messageAq;\\n    TopupCredit topupCredit;\\n  }\\n}\\n\",\"keccak256\":\"0x10c725c49e9193b7641574733666e231886e2ccc301c755e1dd9567aff7c5c9c\",\"license\":\"MIT\"},\"contracts/maci-contracts/utilities/Utilities.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\nimport { DomainObjs } from \\\"./DomainObjs.sol\\\";\\nimport { Hasher } from \\\"../crypto/Hasher.sol\\\";\\nimport { SnarkConstants } from \\\"../crypto/SnarkConstants.sol\\\";\\n\\n/// @title Utilities\\n/// @notice An utility contract that can be used to:\\n/// * hash a state leaf\\n/// * pad and hash a MACI message\\n/// * hash a MACI message and an encryption public key\\ncontract Utilities is SnarkConstants, DomainObjs, Hasher {\\n  /// @notice custom errors\\n  error InvalidMessage();\\n\\n  /// @notice An utility function used to hash a state leaf\\n  /// @param _stateLeaf the state leaf to be hashed\\n  /// @return ciphertext The hash of the state leaf\\n  function hashStateLeaf(StateLeaf memory _stateLeaf) public pure returns (uint256 ciphertext) {\\n    uint256[4] memory plaintext;\\n    plaintext[0] = _stateLeaf.pubKey.x;\\n    plaintext[1] = _stateLeaf.pubKey.y;\\n    plaintext[2] = _stateLeaf.voiceCreditBalance;\\n    plaintext[3] = _stateLeaf.timestamp;\\n\\n    ciphertext = hash4(plaintext);\\n  }\\n\\n  /// @notice An utility function used to pad and hash a MACI message\\n  /// @param dataToPad the data to be padded\\n  /// @param msgType the type of the message\\n  /// @return message The padded message\\n  /// @return padKey The padding public key\\n  /// @return msgHash The hash of the padded message and encryption key\\n  function padAndHashMessage(\\n    uint256[2] memory dataToPad,\\n    uint256 msgType\\n  ) public pure returns (Message memory message, PubKey memory padKey, uint256 msgHash) {\\n    // add data and pad it to 10 elements (automatically cause it's the default value)\\n    uint256[10] memory dat;\\n    dat[0] = dataToPad[0];\\n    dat[1] = dataToPad[1];\\n\\n    padKey = PubKey(PAD_PUBKEY_X, PAD_PUBKEY_Y);\\n    message = Message({ msgType: msgType, data: dat });\\n    msgHash = hashMessageAndEncPubKey(message, padKey);\\n  }\\n\\n  /// @notice An utility function used to hash a MACI message and an encryption public key\\n  /// @param _message the message to be hashed\\n  /// @param _encPubKey the encryption public key to be hashed\\n  /// @return msgHash The hash of the message and the encryption public key\\n  function hashMessageAndEncPubKey(\\n    Message memory _message,\\n    PubKey memory _encPubKey\\n  ) public pure returns (uint256 msgHash) {\\n    if (_message.data.length != 10) {\\n      revert InvalidMessage();\\n    }\\n\\n    uint256[5] memory n;\\n    n[0] = _message.data[0];\\n    n[1] = _message.data[1];\\n    n[2] = _message.data[2];\\n    n[3] = _message.data[3];\\n    n[4] = _message.data[4];\\n\\n    uint256[5] memory m;\\n    m[0] = _message.data[5];\\n    m[1] = _message.data[6];\\n    m[2] = _message.data[7];\\n    m[3] = _message.data[8];\\n    m[4] = _message.data[9];\\n\\n    msgHash = hash5([_message.msgType, hash5(n), hash5(m), _encPubKey.x, _encPubKey.y]);\\n  }\\n}\\n\",\"keccak256\":\"0x6dabe0385409cf4dc4a22b80b7483c26d016c4173e5f62930e06085f02d91c09\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608080604052614a3290816100128239f3fe60806040818152600490813610156200001757600080fd5b600092833560e01c908163683f3dc31462000341575063b43c4969146200003d57600080fd5b346200028a57610180806003193601126200033d57816023193601126200033d5760803660631901126200033d578160e3193601126200033d57610124356001600160a01b0381811692918390036200029857610144359281841680940362000339576101643592828416809403620003355760443591660400000000000083101562000325576084359060ff821680920362000321578751906122ae9182810167ffffffffffffffff9382821085831117620003045760209183916200274f83398681520301908cf080156200031757861697895191606083018381108582111762000304578b52825260208201938985528a83019182528a51966123c18089019589871090871117620002f0576200038e89398c35855260243560208601528b85015260643560ff8116809103620002ec576060850152608084015260a43560ff8116809103620002e85760a084015260c4359160ff8316809303620002e857869488809492819360c088015260e43560e08801526101043561010088015251166101208601525116610140840152511661016082015203019087f08015620002de571693823b156200029857835186816024818363f2fde38b60e01b988983528b888401525af18015620002d457620002be575b50843b15620002985783516370e39c9560e11b8152869081818481838b5af18015620002b4576200029c575b5050843b1562000298578351928352820152838160248183875af180156200028e5762000272575b6020838351908152f35b6200027e849162000362565b6200028a578262000268565b8280fd5b82513d86823e3d90fd5b8580fd5b620002a79062000362565b6200029857853862000240565b86513d84823e3d90fd5b620002cc9096919662000362565b943862000214565b85513d89823e3d90fd5b84513d88823e3d90fd5b8c80fd5b8d80fd5b50634e487b7160e01b8e5260418d5260248efd5b634e487b7160e01b8e5260418d5260248efd5b89513d8d823e3d90fd5b8980fd5b86516302c3596560e51b81528890fd5b8780fd5b8680fd5b8380fd5b8490346200035e57816003193601126200035e5780600a60209252f35b5080fd5b67ffffffffffffffff81116200037757604052565b634e487b7160e01b600052604160045260246000fdfe60e080604052620023c180380380916200001a8285620004c8565b8339810190808203906101808212620004625780516200003e8460208401620004ec565b916080605f19850112620004625760405194608086016001600160401b038111878210176200049357606091620000c3916040526200007f83850162000526565b88526200008f6080850162000526565b6020890152620000a260a0850162000526565b6040890152620000b560c0850162000526565b8389015260e08401620004ec565b9461011f190112620004625760405190606082016001600160401b0381118382101762000493576040526101208101516001600160a01b038116810362000462578252610140810151906001600160a01b038216820362000462576020830191825261016001516001600160a01b0381168103620004625760408301526000543360018060a01b031982161760005560405190339060018060a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a37f0e8c0be063e1dee5a8a9df19f0715acdfac6b7260f41d6c3769166cac049db776001557f142181123bdf04edceb703cda229ba08b79092aad0eada9552d51966ee46229a6002557f20c99bb8b43cd63ee07ee8f33b445888ff638f67a7019b6d50036352a0e5e7bd6003557f1a999f92e772c387eb618ff2864256f26f268addaca43c88af7f8fab56ee19e76004557f0b81b4da4b6b26de7e3997b3c2eb68abb7573206ae5de5b964de736ee40022ab6005557f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018087511090811591620004b8575b50620004a957506020855195866007550151806008556040519586604081011060018060401b036040890111176200049357604087016040526040368837865260208601526040516314d2f97b60e11b8152946000600487015b600282106200047c575050506020856044817347076a871Ae4e442784dff8BCB42E3E4E440D5195af48015620004705760009062000432575b6020955060805260018060a01b0382511660018060a01b0319601154161760115560018060a01b0390511660018060a01b03196012541617601255604060018060a01b039101511660018060a01b0319601354161760135560c0528051600e550151600f5560ff815116906010549161ff00602083015160081b169063ff000000606062ff0000604086015160101b1694015160181b169363ffffffff1916171717176010554260a052604051611e8b908162000536823960805181610a25015260a0518181816105800152818161090501528181610a6801528181610c8a015281816111960152818161126b01528181611433015261182e015260c0518181816105a70152818161092c01528181610a8f01528181610cac015281816111b9015281816112920152818161145a01526118550152f35b506020853d60201162000467575b816200044f60209383620004c8565b81010312620004625760209451620002fb565b600080fd5b3d915062000440565b6040513d6000823e3d90fd5b6020806001928551815201930191019091620002c2565b634e487b7160e01b600052604160045260246000fd5b6354be831760e11b8152600490fd5b9050602087015110153862000268565b601f909101601f19168101906001600160401b038211908210176200049357604052565b91908260409103126200046257604080519081016001600160401b0381118282101762000493576040526020808294805184520151910152565b519060ff82168203620004625756fe6040608081526004908136101561001557600080fd5b600091823560e01c908162329f2f1461180f5781630396a0ce146117ea57816306912d3c146116df5781630f4cf692146116c0578163167fd4831461168e578163184ff47f1461141a57816331e766a5146113f5578163394b78a21461123a5781633dfb88b2146111df5781634909229f1461117f5781634f367f0f1461115a57816358bfc379146110075781635bb9399514610fd65781635d5909dd14610fb757816362a361bb14610f91578163683f3dc314610f75578163715018a614610f1b5781637296aaea14610bff5781637d0a81c814610b5457816386f3c3f714610a485781638aa0ba9214610a0d5781638da5cb5b146109e55781639c971729146108e25781639cfced9714610889578163ac98e5df14610847578163ae93a2121461055f578163b5f38c811461053b578163bc14ee2b146104ff578163bea140b31461049c578163c17268d91461047d578163e1c7392a14610287578163f2fde38b146101ae575063fba630f21461018d57600080fd5b346101aa57816003193601126101aa576020906009549051908152f35b5080fd5b91905034610283576020366003190112610283576001600160a01b0382358181169391929084900361027f576101e2611b0d565b831561022d575050600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8480fd5b8280fd5b90503461028357826003193601126102835760065460ff811661046e5760019060ff1916176006556001600c5401600c558151906102c482611918565b7f12817f4161f2f5ded33f26c55735a77e80e4f8975483c8c2704745128417f71182526020928383018581528151936102fc85611918565b60008552825161030b8161195e565b8661014096873684370152600086845161032481611918565b82815201528251946103358661195e565b368637518452518484015280519361034c85611918565b7f171e826ad4a870fd925e0bf0e87884e70e080879c2205ef10114f28a3b6f6dd78552808501927f2bd407d897fbbca9f88adfd2d15252e69de8c1564eb4d3d27162e259172f1a1d84528251946103a286611918565b6001865282860152816103b58787611d77565b6012548551631ffc735d60e01b815293840191909152829060249082908b906001600160a01b03165af1801561046457610430575b867fe2067f06dd7b8159b21a5490f8663f6bb031d9b35ed6d298b5489674cb9cda4b6101a087878a61041e89518094611a32565b5161016083015251610180820152a180f35b81949392943d831161045d575b61044781836119cf565b8101031261045857909138806103ea565b600080fd5b503d61043d565b83513d89823e3d90fd5b5090516342a2e18d60e01b8152fd5b5050346101aa57816003193601126101aa57602090600b549051908152f35b8284346104fc5760603660031901126104fc5736602312156104fc575080516104c4816119b3565b60648136821161045857602094905b8282106104ed575050506104e690611c41565b9051908152f35b813581529085019085016104d3565b80fd5b5050346101aa57816003193601126101aa5760609060018060a01b03806011541691816012541691601354169181519384526020840152820152f35b5050346101aa57816003193601126101aa5760209060ff600a541690519015158152f35b905034610283576020806003193601126108435761057b611b0d565b6105a57f000000000000000000000000000000000000000000000000000000000000000042611b65565b7f0000000000000000000000000000000000000000000000000000000000000000101561083457600a5460ff81166108245760ff1916600117600a556011548351630c0775ff60e31b81526001600160a01b039182169083818681855afa9081156107dd578391859189916107e7575b508688518094819363b6a64acd60e01b8352165afa9081156107dd5787916107b0575b50156107a157828691602487518094819363dd0982a360e01b835289358a8401525af190811561079757869161076a575b508060095584519061067a826119b3565b6060368337815260ff60105460181c16600019810160ff81116107575760051115610744578392916106b59154848201528787820152611c41565b600b556011541684519384809263122db15360e01b82525afa92831561073b5750839261070d575b505080600d556009547fa80928657383ff9d374f1409cf51e7460a64472b6baeb5ded1199830c15bae018380a380f35b90809250813d8311610734575b61072481836119cf565b81010312610458575138806106dd565b503d61071a565b513d85823e3d90fd5b634e487b7160e01b875260328552602487fd5b634e487b7160e01b885260118652602488fd5b90508281813d8311610790575b61078181836119cf565b81010312610458575138610669565b503d610777565b85513d88823e3d90fd5b8451624a03c360e31b81528490fd5b6107d09150843d86116107d6575b6107c881836119cf565b810190611b88565b38610638565b503d6107be565b86513d89823e3d90fd5b92505081813d831161081d575b6107fe81836119cf565b81010312610819575182811681036108195783839138610615565b8680fd5b503d6107f4565b835163084ef7b960e41b81528390fd5b509051630931513d60e11b8152fd5b8380fd5b5050346101aa57816003193601126101aa5760809060ff6010548251928282168452828260081c166020850152828260101c169084015260181c166060820152f35b8284346104fc5760a03660031901126104fc5736602312156104fc575080516108b181611997565b60a48136821161045857602094905b8282106108d3575050506104e690611d10565b813581529085019085016108c0565b90503461028357602036600319011261028357803591610900611b0d565b61092a7f000000000000000000000000000000000000000000000000000000000000000042611b65565b7f000000000000000000000000000000000000000000000000000000000000000010156109d85760125484926001600160a01b039091169190823b15610843578460248592838551968794859363c15da65b60e01b85528401525af19081156109cf57506109bb575b50807f1245b881cb30fdad22b2f9fde2d5c2a3605bbdf272d5e8a2235d8c9e81aba2ce91a280f35b6109c49061194a565b6101aa578138610993565b513d84823e3d90fd5b51630931513d60e11b8152fd5b5050346101aa57816003193601126101aa57905490516001600160a01b039091168152602090f35b5050346101aa57816003193601126101aa57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b8383346101aa57610a5836611af7565b919093610a63611b0d565b610a8d7f000000000000000000000000000000000000000000000000000000000000000042611b65565b7f00000000000000000000000000000000000000000000000000000000000000001015610b465760ff600a5416610b38576011546001600160a01b0316803b1561027f57604485928388938651978895869463cfa1fa0360e01b865285015260248401525af19081156109cf5750610b29575b50907fbe5eae95ff0a9a2779506ae62da06dda1e349311d3f2b6ceb990ea42b6a5f20b8280a280f35b610b329061194a565b82610b00565b905163084ef7b960e41b8152fd5b9051630931513d60e11b8152fd5b905034610283573660031901906080821261084357825193606085019285841067ffffffffffffffff851117610bec578490848252126104fc57509281602094610ba06104e694611918565b35815260243560808301528152838101604435815283820190606435825285855193610bcb8561197b565b60803686378051518552510151868401525184830152516060820152611ca8565b506041602492634e487b7160e01b835252fd5b9190503461028357806003193601126102835781359067ffffffffffffffff9283831161027f573660238401121561027f578281013591848311610f175760249061016090368383870288010111610f1357823596808811610f0f5736602389011215610f0f5787850135908111610f0f5736848260061b8a010111610f0f57808603610eff5794957f0000000000000000000000000000000000000000000000000000000000000000957f000000000000000000000000000000000000000000000000000000000000000091908a5b898110610cda578b80f35b81811015610eed57858102830190866023198336030112610ee957855191610d0183611918565b88810135835236606382011215610ee557865190610d1e8261195e565b81610184820191368311610ee057604401905b828210610ed057505050602083015284610d4b8b42611b65565b1015610ec057600c5491600e54831015610eb0578160061b8d0190898201357f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000180821090811591610ea1575b50610e91578f6001809601600c558583528960231985360301126104fc5760208a918d8f610ddd6044865199610dcc8b611918565b888b52013598898682015288611d77565b6012549551631ffc735d60e01b81529182015293849283916001600160a01b03165af18015610e8357610e50575b50907fe2067f06dd7b8159b21a5490f8663f6bb031d9b35ed6d298b5489674cb9cda4b926101a092610e3f8b518094611a32565b8b830152610180820152a101610ccf565b602090819392933d8311610e7c575b610e6981836119cf565b81010312610e78579038610e0b565b8f80fd5b503d610e5f565b50508f8951903d90823e3d90fd5b88516354be831760e11b81528c90fd5b90506044840135101538610d97565b8651631ec0b2f760e01b81528a90fd5b855163148fb9a960e31b81528990fd5b8135815260209182019101610d31565b508f80fd5b8d80fd5b8c80fd5b634e487b7160e01b8c5260328852868cfd5b815163ca3487f760e01b81528590fd5b8880fd5b8780fd5b8580fd5b83346104fc57806003193601126104fc57610f34611b0d565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5050346101aa57816003193601126101aa5760209051600a8152f35b5050346101aa57806003193601126101aa576020906104e6610fb2366119f1565b611ba0565b5050346101aa57816003193601126101aa57602090600d549051908152f35b5050346101aa576020906104e6610fec36611af7565b835191610ff883611918565b84368437825284820152611ba0565b8284346104fc57602092836003193601126101aa57803567ffffffffffffffff918282116108435736602383011215610843578181013592831161114757508160051b9084519261105a878401856119cf565b83528583016024819383010191368311610f175791859391602489969401905b82821061113557505086519251858401929150845b81811061111c57505050816110ac9103601f1981018352826119cf565b84519080519084845b8381106111075750505081908101838152039060025afa156110fc577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000019051069051908152f35b9051903d90823e3d90fd5b828101820151858201528795508691016110b5565b825184528996889650938401939092019160010161108f565b8135815287955090860190860161107a565b634e487b7160e01b845260419052602483fd5b8284346104fc57806003193601126104fc5750600d54600c5482519182526020820152f35b8284346104fc57806003193601126104fc575080517f000000000000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000006020820152f35b905034610283576080366003190112610283573660231215610283578151906112078261197b565b81608491368311610f175760209550905b82821061122b575050506104e690611ca8565b81358152908501908501611218565b905034610283576101a090816003193601126108435761125936611a66565b90836101631936011261027f576112907f000000000000000000000000000000000000000000000000000000000000000042611b65565b7f000000000000000000000000000000000000000000000000000000000000000011156113e757600c5490600e548210156113d95761016435917f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001808410908115916113cb575b506113bc57600101600c5560018352602061131a61131436611acc565b85611d77565b6012548751631ffc735d60e01b815293840191909152829060249082908a906001600160a01b03165af1801561079757611391575b5061137d7fe2067f06dd7b8159b21a5490f8663f6bb031d9b35ed6d298b5489674cb9cda4b94518093611a32565b61016082015261018435610180820152a180f35b602090813d81116113b5575b6113a781836119cf565b8101031261027f573861134f565b503d61139d565b5084516354be831760e11b8152fd5b9050610184351015386112f7565b8451631ec0b2f760e01b8152fd5b835163148fb9a960e31b8152fd5b8284346104fc57806003193601126104fc575060075460085482519182526020820152f35b919050346102835761142b36611af7565b6114589391937f000000000000000000000000000000000000000000000000000000000000000042611b65565b7f0000000000000000000000000000000000000000000000000000000000000000111561167f57600c54600e5481101561166f57600101600c5560135483516323b872dd60e01b8152338185015230602482015260448101839052602093926001600160a01b03929091908590829060649082908c9088165af18015611665579085939291611648575b508551966114ef88611918565b875282870190815285519661150388611918565b88885286516115118161195e565b84610140998a36843701528884885161152981611918565b828152015286519761153a8961195e565b368937518752518287015260246115b7865161155581611918565b7f171e826ad4a870fd925e0bf0e87884e70e080879c2205ef10114f28a3b6f6dd781527f2bd407d897fbbca9f88adfd2d15252e69de8c1564eb4d3d27162e259172f1a1d858201528751986115a98a611918565b60028a52858a015288611d77565b9160125416938887519586948593631ffc735d60e01b85528401525af1801561163e57611615575b847f935afc7bb7cc33eb3e24e20dcfc75f5b21fa58e9c82cca06435238efaf9a3a586101608661161187518092611a32565ba180f35b813d8311611637575b61162881836119cf565b810103126102835738806115df565b503d61161e565b83513d87823e3d90fd5b61165e90843d86116107d6576107c881836119cf565b50386114e2565b86513d8a823e3d90fd5b8351631ec0b2f760e01b81528390fd5b50905163148fb9a960e31b8152fd5b5050346101aa576101a03660031901126101aa576020906104e66116b136611a66565b6116ba36611acc565b90611d77565b5050346101aa57816003193601126101aa57602090600c549051908152f35b5050346101aa5760603660031901126101aa57906101c091611700366119f1565b91815161170c81611918565b81815282519361171b8561195e565b6101409283368737602095868094015282855161173781611918565b82815201528351926117488461195e565b36843780518352015183820152815161176081611918565b7f171e826ad4a870fd925e0bf0e87884e70e080879c2205ef10114f28a3b6f6dd78152838101917f2bd407d897fbbca9f88adfd2d15252e69de8c1564eb4d3d27162e259172f1a1d83528351946117b686611918565b60443586528501526117d46117cb8286611d77565b93518095611a32565b51610160840152516101808301526101a0820152f35b8284346104fc57806003193601126104fc5750600e54600f5482519182526020820152f35b905034610283578260031936011261028357611829611b0d565b6118537f000000000000000000000000000000000000000000000000000000000000000042611b65565b7f00000000000000000000000000000000000000000000000000000000000000001015610b46576012546010805484516324a47aeb60e01b8152911c60ff16928101929092526020908290602490829087906001600160a01b03165af19182156109cf575082916118e7575b507fc5624680ab5d50c84507f9e0dc2032163de2bda906ab8a661a53dd4d43bd5dc78280a280f35b90506020813d8211611910575b81611901602093836119cf565b810103126101aa5751386118bf565b3d91506118f4565b6040810190811067ffffffffffffffff82111761193457604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161193457604052565b610140810190811067ffffffffffffffff82111761193457604052565b6080810190811067ffffffffffffffff82111761193457604052565b60a0810190811067ffffffffffffffff82111761193457604052565b6060810190811067ffffffffffffffff82111761193457604052565b90601f8019910116810190811067ffffffffffffffff82111761193457604052565b80602312156104585760405190611a0782611918565b816044918211610458576004905b828210611a225750505090565b8135815260209182019101611a15565b805182526020808092015192016000905b600a8210611a515750505050565b82806001928651815201940191019092611a43565b906101606003198301126104585760405191611a8183611918565b82600435815281604312156104585760405191611a9d8361195e565b82610164918211610458576024905b828210611abc5750505060200152565b8135815260209182019101611aac565b6040906101631901126104585760405190611ae682611918565b610164358252610184356020830152565b6040906003190112610458576004359060243590565b6000546001600160a01b03163303611b2157565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b91908203918211611b7257565b634e487b7160e01b600052601160045260246000fd5b90816020910312610458575180151581036104585790565b6040516314d2f97b60e11b815290600090600483015b60028310611c2a575050506020816044817347076a871Ae4e442784dff8BCB42E3E4E440D5195af4908115611c1e57600091611bf0575090565b906020823d8211611c16575b81611c09602093836119cf565b810103126104fc57505190565b3d9150611bfc565b6040513d6000823e3d90fd5b600190825181526020809101920192019190611bb6565b6040516304b98e1d60e31b815290600090600483015b60038310611c915750505060208160648173Fa21436084377C74855b2DB9CFe7322a4DDC1c3C5af4908115611c1e57600091611bf0575090565b600190825181526020809101920192019190611c57565b60405163248f667760e01b81529060049060008284015b838210611cf9575050505060208160848173Af8D2aF5AB9654e4818142c6511754771c8064A55af4908115611c1e57600091611bf0575090565b600190835181526020809101930191019091611cbf565b604051630926f44b60e31b815290600090600483015b60058310611d605750505060208160a481732D610532b8e16e950DD853572Fee9493d3c339625af4908115611c1e57600091611bf0575090565b600190825181526020809101920192019190611d26565b906020808301916040805194611d8c86611997565b60a0368737845151865283855101518487015281855101518287015260608551015160608701526080855101516080870152610120825195611dcd87611997565b60a036883760a081510151875260c0815101518688015260e08151015184880152610100815101516060880152510151608086015281519460a0860186811067ffffffffffffffff82111761193457611e5297611e3b93611e32928652518852611d10565b85870152611d10565b908401528051606084015201516080820152611d10565b9056fea26469706673582212202e780734c8142915b2707cdf804ba8a3584f3f4c36564eb54aae64c4054a01ea64736f6c6343000814003360e0346200065c57601f620022ae38819003918201601f19168301916001600160401b0383118484101762000661578084926020946040528339810103126200065c5751600054906040513360018060a01b0384167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a381156200064d5750602081116200062e576001600160a81b03199091163360ff60a01b1916176000556080819052600560a052620000b79062000677565b60c0527f12817f4161f2f5ded33f26c55735a77e80e4f8975483c8c2704745128417f711610172557f1c8de1edeabc24fc4c1595acaabb70be9b70f351d58c6fa338e1e9a994413bfb610173557f22fcda488c14b34fc60eb073fbe92fe10793e2ab14682e0f057332ddbef3d55c610174557f2db474db7c7212646cb15c6177d87be30711e6c04f1139d8e495ef1d1d998227610175557efde404053ec39a19f6ac347121a2264815dda84f910a388cb372e967a5d08c610176557f0723792ffab6ec6cfb3ece1509b9b4fb07e5bdb2299d1538e6e1db916f90cf89610177557f2a4392ec4e3d1811cd6a950cc865ee6f2342910a6551c5dce38cb995576c7c70610178557f1dead4c14f75e9d8449c80b648dcd4694c2ee50da2ba16e5e438f0d77ab02e34610179557f124c53ce0953fffb7ab5e3c143df6cd48ba747d3959fcb8086405d763ed5455061017a557f02bae19605746a8cd3f0927b2c01630f36f4d1bab9216ca839833e7ff6efa20661017b557f1f8375099becf17173d457d0d07bfb74c7067df1143b5ad987046e8e66817bc961017c557f0e13e954d61bb3fa3b03e7d136ca909b610fa2ca4443d920d94d16684f2b83d461017d557f1416ef2fc4f88fcfc4f9eb12f8e214b1c3e31c6c10ece9cfa51f078a3bbf345761017e557f032f915ff71e198a7955d2697249f40fb94c65812ed24e670c9700f52fdf6e0e61017f557f08bfebf4b3ddb0f8c51dd40193f5996da9f3d799ee0d8beb6be4038132df60b4610180557f065ac498cf4a5acaeb3b6cee826da9f834c961fa39feff6ae925b90dff79b613610181557f2e72c628101a93201b912a3e3fe96d39b0a9076ec39b7935a015c59bb32b8a2a610182557f19bba68e7b9da1e6ec42e52d7ab2adaf3b6a5521b1a454ec70f62e0ab702c085610183557f0de1f72745a5af2a34cac412e00eb6c8b5db1f3b52fa1bff88076c2726b83b08610184557f2e8f152603b2fac10d6a14c841327c23c502537367ccb1e42fab9a3bd9db2a8d610185557f14e16c3e0dcfd7e621a32627ebf37f6c0afb4467d34c7b7aeffded11769dec85610186557f0be1e62127948b4805c85a1d836574f0892ca6473fcde98f3fd1781248a9768f610187557f0930288fbd7c849197c8372f1dd8f9087f8a03f09b9cd904a469c15ef6b1b515610188557f231cac34e215e3f404d2fcfb79e0705deeb3d40978f0ee31072f6cbc1b579e33610189557f2e0e3cd2718ac7199b81dc14e841de40a9536b7ffe95fa1fc9c6b799e43e2c9761018a557f0718452506f0a232e98966d84b1a4675a66bd80263a2dc58bdac873825752fc361018b557f162d4ed998307d6e132edbf5c11f62f53d4636aa10cb3c2244c2bf5577168c3761018c557f247d6a5544a8f295a894ae77c7efcdcbf52e3bf4e5d0c0d2f40557a61d44984861018d557f0b8de3868471f109e91670daca698dba917d1c5535821f33aa9598d1db8e3d1961018e557f29851997020f527c92e20f030d232b81d334144a641e6a8866b46dd925005bbb61018f557f1a9cfcbe29a2b6503a03049727c0bca3111afd62f2836f392080321d1b4ef642610190557f1aa3ead91fa89cc1d6cb1d0eb76a27190c6abfdd3265d6d0a1e5c58feddaddf6610191557f0702fc26a7d367e6677efefd95204a7e00144c2fc7dbc2a581aa00d99f51f08161019255604051611ba990816200070582396080518181816102980152818161031201528181610c7b015281816110cf015281816111c5015281816114610152818161158d015281816115fb015261199b015260a05181818161046801528181610d22015281816110a5015281816111ee015281816113400152818161140b01528181611717015281816118010152611978015260c0518181816102690152818161055701528181610c4401526113a90152f35b60449060405190637ccdcc9760e11b8252600482015260206024820152fd5b63682e504160e11b8152600490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b8015620006fe57600190602081108216604e8210831617620006f65781906005925b808211620006c957505081600019048111620006b3570290565b634e487b7160e01b600052601160045260246000fd5b909280600019048111620006b357818416620006ec575b800292811c9062000699565b80920291620006e0565b905060050a90565b5060019056fe60406080815260048036101561001457600080fd5b600091823560e01c80631b9b8aa714610d065780631ffc735d14610beb57806324a47aeb14610bc35780633bfa6fce14610ba65780633dfb88b214610ac85780633e1a8cc114610a8e57806358bfc379146109375780635bb93995146109065780635bf1fa4d1461089057806362a361bb1461083657806369e7c5861461080e578063715018a6146107b457806381d6a24a1461078e5780638da5cb5b146107665780639cfced971461070b578063a27154ba146106f0578063b6a64acd146106cb578063bea140b3146105a7578063c00bdbcc14610516578063c15da65b146104ee578063d9c55ce114610242578063dda89a6e1461021e578063e93fb4d4146101f45763f2fde38b1461012857600080fd5b346101f05760203660031901126101f0576001600160a01b038235818116939192908490036101ec57610159610e24565b831561019a57505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8480fd5b8280fd5b50823461021b57602036600319011261021b575061021460209235611b2e565b9051908152f35b80fd5b83823461023e578160031936011261023e57602090610171549051908152f35b5080fd5b5082903461023e578160031936011261023e5761025d610e24565b6101719081549061028f7f00000000000000000000000000000000000000000000000000000000000000008093610e7c565b610310576102bc7f0000000000000000000000000000000000000000000000000000000000000000611b62565b90600154855261014c6020528420555b600154600181018091116102fd5790816102e892600155611023565b90558061016f5561016e60ff19815416905580f35b634e487b7160e01b845260118552602484fd5b7f0000000000000000000000000000000000000000000000000000000000000000845b81811061039c575060218110156103895760021b6002015490600154855261014c6020528420558360025b60868110610375575050610370610ff0565b6102cc565b6103818282018261100c565b01849061035e565b634e487b7160e01b855260328652602485fd5b6021811015806103c95781608601908154806103dc575b506103c95790866103c49255611071565b610333565b634e487b7160e01b875260328852602487fd5b9585979193959894929851976103f189610dcb565b60a0368a376103ff87611b62565b93865b60ff81168a811015610458578761044457908b61043961043f9361042c848e600290811b01611061565b90549060031b1c926117cb565b526117ba565b610402565b50634e487b7160e01b885260328d52602488fd5b509b9796959a94999850919290927f00000000000000000000000000000000000000000000000000000000000000009b5b60ff81168d8110156104a957908b6104396104a4938d6117cb565b610489565b5050979098506104bf9195949992969a50610f3d565b60018401908185116104db57906104d5916111c2565b896103b3565b634e487b7160e01b8a5260118b5260248afd5b50503461023e57602036600319011261023e576105139061050d610e24565b3561138b565b80f35b50346101f05760203660031901126101f057610530610e24565b600154835261014c60205281359083205561054c600154611071565b6001556101718054917f000000000000000000000000000000000000000000000000000000000000000083018093116105945750558061016f5561016e60ff19815416905580f35b634e487b7160e01b845260119052602483fd5b50346101f05760603660031901126101f05736602312156101f05780516060810181811067ffffffffffffffff8211176106b8578252806064913683116106b457849194905b8382106106a457505082516304b98e1d60e31b815293849186919083015b6003831061068a575050506020918173Fa21436084377C74855b2DB9CFe7322a4DDC1c3C5af4918215610680578392610649575b6020838351908152f35b9091506020813d8211610678575b8161066460209383610de7565b810103126101f0576020925051903861063f565b3d9150610657565b81513d85823e3d90fd5b81518152869350600192909201916020918201910161060b565b81358152602091820191016105ed565b8580fd5b634e487b7160e01b855260418452602485fd5b83823461023e578160031936011261023e5760209060ff61016e541690519015158152f35b83823461023e578160031936011261023e5760209051818152f35b5090346101f05760a03660031901126101f05736602312156101f05781519061073382610dcb565b8160a4913683116106b45760209550905b8282106107575750505061021490610f3d565b81358152908501908501610744565b83823461023e578160031936011261023e57905490516001600160a01b039091168152602090f35b50823461021b578060031936011261021b57506101705460015482519182526020820152f35b833461021b578060031936011261021b576107cd610e24565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b83823461023e578160031936011261023e5760209060ff61016e5460081c1690519015158152f35b5090346101f057816003193601126101f05736602312156101f05781519061085d82610d99565b816044913683116106b45760209550905b8282106108815750505061021490610e9c565b8135815290850190850161086e565b50823461021b576108a036610e09565b908351926108ad84610dcb565b60a036853760218210156108f35750906005602095610214949360021b908160020154855260038201548886015281015486850152015460608301526080820152610f3d565b634e487b7160e01b815260328652602490fd5b83823461023e5760209061021461091c36610e09565b83519161092883610d99565b84368437825284820152610e9c565b50823461021b576020928360031936011261023e57803567ffffffffffffffff91828211610a8a5736602383011215610a8a5781810135928311610a7757508160051b9084519261098a87840185610de7565b835285830160248193830101913683116106b45791859391602489969401905b828210610a6557505086519251858401929150845b818110610a4c57505050816109dc9103601f198101835282610de7565b84519080519084845b838110610a375750505081908101838152039060025afa15610a2c577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000019051069051908152f35b9051903d90823e3d90fd5b828101820151858201528795508691016109e5565b82518452899688965093840193909201916001016109bf565b813581528795509086019086016109aa565b634e487b7160e01b845260419052602483fd5b8380fd5b50823461021b578060031936011261021b575060ff61016e541615610abb5760209061016f549051908152f35b51631e596e4360e11b8152fd5b50346101f05760803660031901126101f05736602312156101f0578051916080830183811067ffffffffffffffff821117610b93578252608490833683116106b457819491905b838210610b83575050825163248f667760e01b8152938491868284015b838210610b6957505050506020918173Af8D2aF5AB9654e4818142c6511754771c8064A55af4918215610680578392610649576020838351908152f35b825181528794506020928301926001929092019101610b2c565b8135815260209182019101610b0f565b634e487b7160e01b855260418252602485fd5b83823461023e578160031936011261023e5760209061021461133a565b50823461021b57602036600319011261021b5750610214602092610be5610e24565b35611953565b50346101f05760203660031901126101f057610c05610e24565b61017192835492610c1681356110a2565b600194858501808611610cf3578155610c6990610c31610ff0565b8361016f5561016e60ff198154169055547f000000000000000000000000000000000000000000000000000000000000000090610e7c565b15610c79575b6020848451908152f35b7f0000000000000000000000000000000000000000000000000000000000000000906021821015610ce05750819060021b60020180548654835261014c60205284832055610cc78654611071565b86555560865b60a7811015610c6f578181558401610ccd565b634e487b7160e01b835260329052602482fd5b634e487b7160e01b845260118352602484fd5b50823461021b57602036600319011261021b57823590610d46827f0000000000000000000000000000000000000000000000000000000000000000611293565b61017154809110610d7e57506021821015610d6b576020838361014d01549051908152f35b634e487b7160e01b815260328452602490fd5b8460449184865192627289df60e61b84528301526024820152fd5b6040810190811067ffffffffffffffff821117610db557604052565b634e487b7160e01b600052604160045260246000fd5b60a0810190811067ffffffffffffffff821117610db557604052565b90601f8019910116810190811067ffffffffffffffff821117610db557604052565b6040906003190112610e1f576004359060243590565b600080fd5b6000546001600160a01b03163303610e3857565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b8115610e86570690565b634e487b7160e01b600052601260045260246000fd5b6040516314d2f97b60e11b815290600090600483015b60028310610f26575050506020816044817347076a871Ae4e442784dff8BCB42E3E4E440D5195af4908115610f1a57600091610eec575090565b906020823d8211610f12575b81610f0560209383610de7565b8101031261021b57505190565b3d9150610ef8565b6040513d6000823e3d90fd5b600190825181526020809101920192019190610eb2565b604051630926f44b60e31b815290600090600483015b60058310610f8d5750505060208160a481732D610532b8e16e950DD853572Fee9493d3c339625af4908115610f1a57600091610eec575090565b600190825181526020809101920192019190610f53565b60405190610fb182610dcb565b60a0368337565b60405190610fc582610d99565b6040368337565b9060018201809211610fda57565b634e487b7160e01b600052601160045260246000fd5b61014d5b61016e81106110005750565b60008155600101610ff4565b818110611017575050565b6000815560010161100c565b81810292918115918404141715610fda57565b602181101561104b5760021b60a70190600090565b634e487b7160e01b600052603260045260246000fd5b600482101561104b570190600090565b6000198114610fda5760010190565b602181101561104b5761012b0190600090565b600019810191908211610fda57565b907f00000000000000000000000000000000000000000000000000000000000000006000198101908111917f000000000000000000000000000000000000000000000000000000000000000060005b602181101561104b57806086019585875490610fda5785810361117957509060006111749261116d60406006611165825161112b81610dcb565b60a036823760029588871b809701948554835260038801546020840152600488015490830152600587015460608301526080820152610f3d565b93019061100c565b9755611071565b6110f1565b6111939192949796506111ac939550600285811b01611061565b90919082549060031b91821b91600019901b1916179055565b036111b45750565b6111be8154611071565b9055565b917f000000000000000000000000000000000000000000000000000000000000000090818311611281577f0000000000000000000000000000000000000000000000000000000000000000916000198301928311935b602181101561126c578060860195858754906112575785810361117957509060006112529261116d60406006611165825161112b81610dcb565b611218565b60246000634e487b7160e01b81526011600452fd5b60246000634e487b7160e01b81526032600452fd5b60405163d1459f7960e01b8152600490fd5b90801561133357811561132c578180600114611324576002146113135760208110610133831016604e8210600b8410161761130e57600190815b8082116112e557505081600019048111610fda570290565b909280600019048111610fda57818416611305575b800292811c906112cd565b809202916112fa565b900a90565b905060ff8111610fda576001901b90565b505050600190565b5050600090565b5050600190565b600180547f000000000000000000000000000000000000000000000000000000000000000092915b8161136d8286611293565b10156113865761137f61136d91611071565b9050611362565b925050565b60ff9061016e91808354166117a857610171908154908115611796577f0000000000000000000000000000000000000000000000000000000000000000916113d38382610e7c565b611571575b50505050600190815482811461151657506113f161133a565b90826000610170928354925b6114ae575b50505061142f827f0000000000000000000000000000000000000000000000000000000000000000611293565b9054835480911461145c575b5050602181101561104b5760021b60a7015461016f5560ff19825416179055565b6114857f0000000000000000000000000000000000000000000000000000000000000000611b62565b905b828110611494575061143b565b6114a9906114a4856000856117dc565b611071565b611487565b85548310156115115780151580611508575b6114ff576114f86114f287936114e18860006114dc8a54611b2e565b6117dc565b6114eb8754611071565b8755611071565b93611071565b92916113fd565b50505050505050565b508082146114c0565b611402565b905015611558576000805261014c6020527f2f1ae789e51094ec473affec14fe3c88a47d4230101ae4544eefebff81efc6d75461016f55815460ff1916179055565b60405163042a2e7160e11b815260006004820152602490fd5b826115839161157e610e24565b610e7c565b6115f957506115b17f0000000000000000000000000000000000000000000000000000000000000000611b62565b60015460005261014c6020526040600020555b6001549060018201809211610fda57816115e092600155611023565b9055600061016f55815460ff19168255388080806113d8565b7f00000000000000000000000000000000000000000000000000000000000000009060005b828110611677575050602181101561104b5760021b6002015460015460005261014c60205260406000205560025b60868110611662575061165d610ff0565b6115c4565b8061167160048093018261100c565b0161164c565b6021811015908161104b5780608601918254806116a5575b5061104b5760006116a09255611071565b61161e565b999792989394604097929796919651986116be8a610dcb565b60a0368b376116cc89611b62565b956000955b8689168e811015611705578a61104b57878f986104398f91938f6116fe9561042c91600290811b01611061565b96506116d1565b5092959c50929a97959998969a9390937f00000000000000000000000000000000000000000000000000000000000000009c5b808d168e811015611764578e9695949392918d610439611758938f6117cb565b90919293949550611738565b5050979496939b509761177c91995099949199610f3d565b60018301808411610fda57611790916111c2565b3861168f565b6040516316a0341160e11b8152600490fd5b604051630d36aec160e01b8152600490fd5b60ff1660ff8114610fda5760010190565b90600581101561104b5760051b0190565b929180821161194d576117fb6117f183611080565b90549060031b1c90565b906118257f0000000000000000000000000000000000000000000000000000000000000000611093565b821461187a57509061184b61187893946111936118509461184585611036565b50611061565b611080565b6118616114a48284549060031b1c90565b825460001960039390931b92831b1916911b179055565b565b9190600061188d815460ff9060a01c1690565b156118e95750506118e36118bf61187894956118a7610fb8565b906118b185611036565b505482526020820152610e9c565b915b6118de6118cd82611080565b8154906000199060031b1b19169055565b610fcc565b906117dc565b926118f695949195610fa4565b935b60ff81168781101561192857906119239161043961191c6117f1846118458a611036565b91886117cb565b6118f8565b50509261194790611878956119416118e39498836117cb565b52610f3d565b916118c1565b50509050565b8015611b1c5760ff9061016e8281541615611b0a57602092838311611aec57610171547f000000000000000000000000000000000000000000000000000000000000000094907f00000000000000000000000000000000000000000000000000000000000000005b816119c68289611293565b10156119df576119d86119c691611071565b90506119bb565b9394955050828510611acf57848303611a1a5750505061016f5491602181101561104b5761014d01829055805461ff00191661010017905590565b61016f5495949291905b838310611a4d57505050602181101561104b5761014d01839055805461ff001916610100179055565b909195611a9690611a5d88611b62565b60005460a0929190831c861615611a9d57611a909250604091825192611a8284610d99565b368437825284820152610e9c565b96611071565b9190611a24565b80611a909392604090815194611ab286610dcb565b368637845281878501528301528060608301526080820152610f3d565b6044858460405191627289df60e61b835260048301526024820152fd5b6044838560405191632cd31ae960e01b835260048301526024820152fd5b604051631e596e4360e11b8152600490fd5b604051630543d40760e11b8152600490fd5b806001541115611b4a5760005261014c60205260406000205490565b6024906040519063042a2e7160e11b82526004820152fd5b602181101561104b5761017201549056fea2646970667358221220aa888649b567f909a5bfd0859bac877470e2663f3b10aff1e5ca5ba44b6eb0b164736f6c63430008140033a2646970667358221220ceca36f53c6288a87b8bb5deb2a4e38c076632a986925e6ac7048e4028ef9a6664736f6c63430008140033",
  "deployedBytecode": "0x60806040818152600490813610156200001757600080fd5b600092833560e01c908163683f3dc31462000341575063b43c4969146200003d57600080fd5b346200028a57610180806003193601126200033d57816023193601126200033d5760803660631901126200033d578160e3193601126200033d57610124356001600160a01b0381811692918390036200029857610144359281841680940362000339576101643592828416809403620003355760443591660400000000000083101562000325576084359060ff821680920362000321578751906122ae9182810167ffffffffffffffff9382821085831117620003045760209183916200274f83398681520301908cf080156200031757861697895191606083018381108582111762000304578b52825260208201938985528a83019182528a51966123c18089019589871090871117620002f0576200038e89398c35855260243560208601528b85015260643560ff8116809103620002ec576060850152608084015260a43560ff8116809103620002e85760a084015260c4359160ff8316809303620002e857869488809492819360c088015260e43560e08801526101043561010088015251166101208601525116610140840152511661016082015203019087f08015620002de571693823b156200029857835186816024818363f2fde38b60e01b988983528b888401525af18015620002d457620002be575b50843b15620002985783516370e39c9560e11b8152869081818481838b5af18015620002b4576200029c575b5050843b1562000298578351928352820152838160248183875af180156200028e5762000272575b6020838351908152f35b6200027e849162000362565b6200028a578262000268565b8280fd5b82513d86823e3d90fd5b8580fd5b620002a79062000362565b6200029857853862000240565b86513d84823e3d90fd5b620002cc9096919662000362565b943862000214565b85513d89823e3d90fd5b84513d88823e3d90fd5b8c80fd5b8d80fd5b50634e487b7160e01b8e5260418d5260248efd5b634e487b7160e01b8e5260418d5260248efd5b89513d8d823e3d90fd5b8980fd5b86516302c3596560e51b81528890fd5b8780fd5b8680fd5b8380fd5b8490346200035e57816003193601126200035e5780600a60209252f35b5080fd5b67ffffffffffffffff81116200037757604052565b634e487b7160e01b600052604160045260246000fdfe60e080604052620023c180380380916200001a8285620004c8565b8339810190808203906101808212620004625780516200003e8460208401620004ec565b916080605f19850112620004625760405194608086016001600160401b038111878210176200049357606091620000c3916040526200007f83850162000526565b88526200008f6080850162000526565b6020890152620000a260a0850162000526565b6040890152620000b560c0850162000526565b8389015260e08401620004ec565b9461011f190112620004625760405190606082016001600160401b0381118382101762000493576040526101208101516001600160a01b038116810362000462578252610140810151906001600160a01b038216820362000462576020830191825261016001516001600160a01b0381168103620004625760408301526000543360018060a01b031982161760005560405190339060018060a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a37f0e8c0be063e1dee5a8a9df19f0715acdfac6b7260f41d6c3769166cac049db776001557f142181123bdf04edceb703cda229ba08b79092aad0eada9552d51966ee46229a6002557f20c99bb8b43cd63ee07ee8f33b445888ff638f67a7019b6d50036352a0e5e7bd6003557f1a999f92e772c387eb618ff2864256f26f268addaca43c88af7f8fab56ee19e76004557f0b81b4da4b6b26de7e3997b3c2eb68abb7573206ae5de5b964de736ee40022ab6005557f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018087511090811591620004b8575b50620004a957506020855195866007550151806008556040519586604081011060018060401b036040890111176200049357604087016040526040368837865260208601526040516314d2f97b60e11b8152946000600487015b600282106200047c5750505060208560448173__$8658d3171857788947ecb1d152a017ec62$__5af48015620004705760009062000432575b6020955060805260018060a01b0382511660018060a01b0319601154161760115560018060a01b0390511660018060a01b03196012541617601255604060018060a01b039101511660018060a01b0319601354161760135560c0528051600e550151600f5560ff815116906010549161ff00602083015160081b169063ff000000606062ff0000604086015160101b1694015160181b169363ffffffff1916171717176010554260a052604051611e8b908162000536823960805181610a25015260a0518181816105800152818161090501528181610a6801528181610c8a015281816111960152818161126b01528181611433015261182e015260c0518181816105a70152818161092c01528181610a8f01528181610cac015281816111b9015281816112920152818161145a01526118550152f35b506020853d60201162000467575b816200044f60209383620004c8565b81010312620004625760209451620002fb565b600080fd5b3d915062000440565b6040513d6000823e3d90fd5b6020806001928551815201930191019091620002c2565b634e487b7160e01b600052604160045260246000fd5b6354be831760e11b8152600490fd5b9050602087015110153862000268565b601f909101601f19168101906001600160401b038211908210176200049357604052565b91908260409103126200046257604080519081016001600160401b0381118282101762000493576040526020808294805184520151910152565b519060ff82168203620004625756fe6040608081526004908136101561001557600080fd5b600091823560e01c908162329f2f1461180f5781630396a0ce146117ea57816306912d3c146116df5781630f4cf692146116c0578163167fd4831461168e578163184ff47f1461141a57816331e766a5146113f5578163394b78a21461123a5781633dfb88b2146111df5781634909229f1461117f5781634f367f0f1461115a57816358bfc379146110075781635bb9399514610fd65781635d5909dd14610fb757816362a361bb14610f91578163683f3dc314610f75578163715018a614610f1b5781637296aaea14610bff5781637d0a81c814610b5457816386f3c3f714610a485781638aa0ba9214610a0d5781638da5cb5b146109e55781639c971729146108e25781639cfced9714610889578163ac98e5df14610847578163ae93a2121461055f578163b5f38c811461053b578163bc14ee2b146104ff578163bea140b31461049c578163c17268d91461047d578163e1c7392a14610287578163f2fde38b146101ae575063fba630f21461018d57600080fd5b346101aa57816003193601126101aa576020906009549051908152f35b5080fd5b91905034610283576020366003190112610283576001600160a01b0382358181169391929084900361027f576101e2611b0d565b831561022d575050600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8480fd5b8280fd5b90503461028357826003193601126102835760065460ff811661046e5760019060ff1916176006556001600c5401600c558151906102c482611918565b7f12817f4161f2f5ded33f26c55735a77e80e4f8975483c8c2704745128417f71182526020928383018581528151936102fc85611918565b60008552825161030b8161195e565b8661014096873684370152600086845161032481611918565b82815201528251946103358661195e565b368637518452518484015280519361034c85611918565b7f171e826ad4a870fd925e0bf0e87884e70e080879c2205ef10114f28a3b6f6dd78552808501927f2bd407d897fbbca9f88adfd2d15252e69de8c1564eb4d3d27162e259172f1a1d84528251946103a286611918565b6001865282860152816103b58787611d77565b6012548551631ffc735d60e01b815293840191909152829060249082908b906001600160a01b03165af1801561046457610430575b867fe2067f06dd7b8159b21a5490f8663f6bb031d9b35ed6d298b5489674cb9cda4b6101a087878a61041e89518094611a32565b5161016083015251610180820152a180f35b81949392943d831161045d575b61044781836119cf565b8101031261045857909138806103ea565b600080fd5b503d61043d565b83513d89823e3d90fd5b5090516342a2e18d60e01b8152fd5b5050346101aa57816003193601126101aa57602090600b549051908152f35b8284346104fc5760603660031901126104fc5736602312156104fc575080516104c4816119b3565b60648136821161045857602094905b8282106104ed575050506104e690611c41565b9051908152f35b813581529085019085016104d3565b80fd5b5050346101aa57816003193601126101aa5760609060018060a01b03806011541691816012541691601354169181519384526020840152820152f35b5050346101aa57816003193601126101aa5760209060ff600a541690519015158152f35b905034610283576020806003193601126108435761057b611b0d565b6105a57f000000000000000000000000000000000000000000000000000000000000000042611b65565b7f0000000000000000000000000000000000000000000000000000000000000000101561083457600a5460ff81166108245760ff1916600117600a556011548351630c0775ff60e31b81526001600160a01b039182169083818681855afa9081156107dd578391859189916107e7575b508688518094819363b6a64acd60e01b8352165afa9081156107dd5787916107b0575b50156107a157828691602487518094819363dd0982a360e01b835289358a8401525af190811561079757869161076a575b508060095584519061067a826119b3565b6060368337815260ff60105460181c16600019810160ff81116107575760051115610744578392916106b59154848201528787820152611c41565b600b556011541684519384809263122db15360e01b82525afa92831561073b5750839261070d575b505080600d556009547fa80928657383ff9d374f1409cf51e7460a64472b6baeb5ded1199830c15bae018380a380f35b90809250813d8311610734575b61072481836119cf565b81010312610458575138806106dd565b503d61071a565b513d85823e3d90fd5b634e487b7160e01b875260328552602487fd5b634e487b7160e01b885260118652602488fd5b90508281813d8311610790575b61078181836119cf565b81010312610458575138610669565b503d610777565b85513d88823e3d90fd5b8451624a03c360e31b81528490fd5b6107d09150843d86116107d6575b6107c881836119cf565b810190611b88565b38610638565b503d6107be565b86513d89823e3d90fd5b92505081813d831161081d575b6107fe81836119cf565b81010312610819575182811681036108195783839138610615565b8680fd5b503d6107f4565b835163084ef7b960e41b81528390fd5b509051630931513d60e11b8152fd5b8380fd5b5050346101aa57816003193601126101aa5760809060ff6010548251928282168452828260081c166020850152828260101c169084015260181c166060820152f35b8284346104fc5760a03660031901126104fc5736602312156104fc575080516108b181611997565b60a48136821161045857602094905b8282106108d3575050506104e690611d10565b813581529085019085016108c0565b90503461028357602036600319011261028357803591610900611b0d565b61092a7f000000000000000000000000000000000000000000000000000000000000000042611b65565b7f000000000000000000000000000000000000000000000000000000000000000010156109d85760125484926001600160a01b039091169190823b15610843578460248592838551968794859363c15da65b60e01b85528401525af19081156109cf57506109bb575b50807f1245b881cb30fdad22b2f9fde2d5c2a3605bbdf272d5e8a2235d8c9e81aba2ce91a280f35b6109c49061194a565b6101aa578138610993565b513d84823e3d90fd5b51630931513d60e11b8152fd5b5050346101aa57816003193601126101aa57905490516001600160a01b039091168152602090f35b5050346101aa57816003193601126101aa57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b8383346101aa57610a5836611af7565b919093610a63611b0d565b610a8d7f000000000000000000000000000000000000000000000000000000000000000042611b65565b7f00000000000000000000000000000000000000000000000000000000000000001015610b465760ff600a5416610b38576011546001600160a01b0316803b1561027f57604485928388938651978895869463cfa1fa0360e01b865285015260248401525af19081156109cf5750610b29575b50907fbe5eae95ff0a9a2779506ae62da06dda1e349311d3f2b6ceb990ea42b6a5f20b8280a280f35b610b329061194a565b82610b00565b905163084ef7b960e41b8152fd5b9051630931513d60e11b8152fd5b905034610283573660031901906080821261084357825193606085019285841067ffffffffffffffff851117610bec578490848252126104fc57509281602094610ba06104e694611918565b35815260243560808301528152838101604435815283820190606435825285855193610bcb8561197b565b60803686378051518552510151868401525184830152516060820152611ca8565b506041602492634e487b7160e01b835252fd5b9190503461028357806003193601126102835781359067ffffffffffffffff9283831161027f573660238401121561027f578281013591848311610f175760249061016090368383870288010111610f1357823596808811610f0f5736602389011215610f0f5787850135908111610f0f5736848260061b8a010111610f0f57808603610eff5794957f0000000000000000000000000000000000000000000000000000000000000000957f000000000000000000000000000000000000000000000000000000000000000091908a5b898110610cda578b80f35b81811015610eed57858102830190866023198336030112610ee957855191610d0183611918565b88810135835236606382011215610ee557865190610d1e8261195e565b81610184820191368311610ee057604401905b828210610ed057505050602083015284610d4b8b42611b65565b1015610ec057600c5491600e54831015610eb0578160061b8d0190898201357f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000180821090811591610ea1575b50610e91578f6001809601600c558583528960231985360301126104fc5760208a918d8f610ddd6044865199610dcc8b611918565b888b52013598898682015288611d77565b6012549551631ffc735d60e01b81529182015293849283916001600160a01b03165af18015610e8357610e50575b50907fe2067f06dd7b8159b21a5490f8663f6bb031d9b35ed6d298b5489674cb9cda4b926101a092610e3f8b518094611a32565b8b830152610180820152a101610ccf565b602090819392933d8311610e7c575b610e6981836119cf565b81010312610e78579038610e0b565b8f80fd5b503d610e5f565b50508f8951903d90823e3d90fd5b88516354be831760e11b81528c90fd5b90506044840135101538610d97565b8651631ec0b2f760e01b81528a90fd5b855163148fb9a960e31b81528990fd5b8135815260209182019101610d31565b508f80fd5b8d80fd5b8c80fd5b634e487b7160e01b8c5260328852868cfd5b815163ca3487f760e01b81528590fd5b8880fd5b8780fd5b8580fd5b83346104fc57806003193601126104fc57610f34611b0d565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b5050346101aa57816003193601126101aa5760209051600a8152f35b5050346101aa57806003193601126101aa576020906104e6610fb2366119f1565b611ba0565b5050346101aa57816003193601126101aa57602090600d549051908152f35b5050346101aa576020906104e6610fec36611af7565b835191610ff883611918565b84368437825284820152611ba0565b8284346104fc57602092836003193601126101aa57803567ffffffffffffffff918282116108435736602383011215610843578181013592831161114757508160051b9084519261105a878401856119cf565b83528583016024819383010191368311610f175791859391602489969401905b82821061113557505086519251858401929150845b81811061111c57505050816110ac9103601f1981018352826119cf565b84519080519084845b8381106111075750505081908101838152039060025afa156110fc577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000019051069051908152f35b9051903d90823e3d90fd5b828101820151858201528795508691016110b5565b825184528996889650938401939092019160010161108f565b8135815287955090860190860161107a565b634e487b7160e01b845260419052602483fd5b8284346104fc57806003193601126104fc5750600d54600c5482519182526020820152f35b8284346104fc57806003193601126104fc575080517f000000000000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000006020820152f35b905034610283576080366003190112610283573660231215610283578151906112078261197b565b81608491368311610f175760209550905b82821061122b575050506104e690611ca8565b81358152908501908501611218565b905034610283576101a090816003193601126108435761125936611a66565b90836101631936011261027f576112907f000000000000000000000000000000000000000000000000000000000000000042611b65565b7f000000000000000000000000000000000000000000000000000000000000000011156113e757600c5490600e548210156113d95761016435917f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001808410908115916113cb575b506113bc57600101600c5560018352602061131a61131436611acc565b85611d77565b6012548751631ffc735d60e01b815293840191909152829060249082908a906001600160a01b03165af1801561079757611391575b5061137d7fe2067f06dd7b8159b21a5490f8663f6bb031d9b35ed6d298b5489674cb9cda4b94518093611a32565b61016082015261018435610180820152a180f35b602090813d81116113b5575b6113a781836119cf565b8101031261027f573861134f565b503d61139d565b5084516354be831760e11b8152fd5b9050610184351015386112f7565b8451631ec0b2f760e01b8152fd5b835163148fb9a960e31b8152fd5b8284346104fc57806003193601126104fc575060075460085482519182526020820152f35b919050346102835761142b36611af7565b6114589391937f000000000000000000000000000000000000000000000000000000000000000042611b65565b7f0000000000000000000000000000000000000000000000000000000000000000111561167f57600c54600e5481101561166f57600101600c5560135483516323b872dd60e01b8152338185015230602482015260448101839052602093926001600160a01b03929091908590829060649082908c9088165af18015611665579085939291611648575b508551966114ef88611918565b875282870190815285519661150388611918565b88885286516115118161195e565b84610140998a36843701528884885161152981611918565b828152015286519761153a8961195e565b368937518752518287015260246115b7865161155581611918565b7f171e826ad4a870fd925e0bf0e87884e70e080879c2205ef10114f28a3b6f6dd781527f2bd407d897fbbca9f88adfd2d15252e69de8c1564eb4d3d27162e259172f1a1d858201528751986115a98a611918565b60028a52858a015288611d77565b9160125416938887519586948593631ffc735d60e01b85528401525af1801561163e57611615575b847f935afc7bb7cc33eb3e24e20dcfc75f5b21fa58e9c82cca06435238efaf9a3a586101608661161187518092611a32565ba180f35b813d8311611637575b61162881836119cf565b810103126102835738806115df565b503d61161e565b83513d87823e3d90fd5b61165e90843d86116107d6576107c881836119cf565b50386114e2565b86513d8a823e3d90fd5b8351631ec0b2f760e01b81528390fd5b50905163148fb9a960e31b8152fd5b5050346101aa576101a03660031901126101aa576020906104e66116b136611a66565b6116ba36611acc565b90611d77565b5050346101aa57816003193601126101aa57602090600c549051908152f35b5050346101aa5760603660031901126101aa57906101c091611700366119f1565b91815161170c81611918565b81815282519361171b8561195e565b6101409283368737602095868094015282855161173781611918565b82815201528351926117488461195e565b36843780518352015183820152815161176081611918565b7f171e826ad4a870fd925e0bf0e87884e70e080879c2205ef10114f28a3b6f6dd78152838101917f2bd407d897fbbca9f88adfd2d15252e69de8c1564eb4d3d27162e259172f1a1d83528351946117b686611918565b60443586528501526117d46117cb8286611d77565b93518095611a32565b51610160840152516101808301526101a0820152f35b8284346104fc57806003193601126104fc5750600e54600f5482519182526020820152f35b905034610283578260031936011261028357611829611b0d565b6118537f000000000000000000000000000000000000000000000000000000000000000042611b65565b7f00000000000000000000000000000000000000000000000000000000000000001015610b46576012546010805484516324a47aeb60e01b8152911c60ff16928101929092526020908290602490829087906001600160a01b03165af19182156109cf575082916118e7575b507fc5624680ab5d50c84507f9e0dc2032163de2bda906ab8a661a53dd4d43bd5dc78280a280f35b90506020813d8211611910575b81611901602093836119cf565b810103126101aa5751386118bf565b3d91506118f4565b6040810190811067ffffffffffffffff82111761193457604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161193457604052565b610140810190811067ffffffffffffffff82111761193457604052565b6080810190811067ffffffffffffffff82111761193457604052565b60a0810190811067ffffffffffffffff82111761193457604052565b6060810190811067ffffffffffffffff82111761193457604052565b90601f8019910116810190811067ffffffffffffffff82111761193457604052565b80602312156104585760405190611a0782611918565b816044918211610458576004905b828210611a225750505090565b8135815260209182019101611a15565b805182526020808092015192016000905b600a8210611a515750505050565b82806001928651815201940191019092611a43565b906101606003198301126104585760405191611a8183611918565b82600435815281604312156104585760405191611a9d8361195e565b82610164918211610458576024905b828210611abc5750505060200152565b8135815260209182019101611aac565b6040906101631901126104585760405190611ae682611918565b610164358252610184356020830152565b6040906003190112610458576004359060243590565b6000546001600160a01b03163303611b2157565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b91908203918211611b7257565b634e487b7160e01b600052601160045260246000fd5b90816020910312610458575180151581036104585790565b6040516314d2f97b60e11b815290600090600483015b60028310611c2a5750505060208160448173__$8658d3171857788947ecb1d152a017ec62$__5af4908115611c1e57600091611bf0575090565b906020823d8211611c16575b81611c09602093836119cf565b810103126104fc57505190565b3d9150611bfc565b6040513d6000823e3d90fd5b600190825181526020809101920192019190611bb6565b6040516304b98e1d60e31b815290600090600483015b60038310611c915750505060208160648173__$90b9196d445cf176c504004dde0b0062ce$__5af4908115611c1e57600091611bf0575090565b600190825181526020809101920192019190611c57565b60405163248f667760e01b81529060049060008284015b838210611cf9575050505060208160848173__$f67ed442b9d6bc4da64e961e2430b82eb6$__5af4908115611c1e57600091611bf0575090565b600190835181526020809101930191019091611cbf565b604051630926f44b60e31b815290600090600483015b60058310611d605750505060208160a48173__$d643f7f71d754779bfbed637a90c4a7526$__5af4908115611c1e57600091611bf0575090565b600190825181526020809101920192019190611d26565b906020808301916040805194611d8c86611997565b60a0368737845151865283855101518487015281855101518287015260608551015160608701526080855101516080870152610120825195611dcd87611997565b60a036883760a081510151875260c0815101518688015260e08151015184880152610100815101516060880152510151608086015281519460a0860186811067ffffffffffffffff82111761193457611e5297611e3b93611e32928652518852611d10565b85870152611d10565b908401528051606084015201516080820152611d10565b9056fea26469706673582212202e780734c8142915b2707cdf804ba8a3584f3f4c36564eb54aae64c4054a01ea64736f6c6343000814003360e0346200065c57601f620022ae38819003918201601f19168301916001600160401b0383118484101762000661578084926020946040528339810103126200065c5751600054906040513360018060a01b0384167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a381156200064d5750602081116200062e576001600160a81b03199091163360ff60a01b1916176000556080819052600560a052620000b79062000677565b60c0527f12817f4161f2f5ded33f26c55735a77e80e4f8975483c8c2704745128417f711610172557f1c8de1edeabc24fc4c1595acaabb70be9b70f351d58c6fa338e1e9a994413bfb610173557f22fcda488c14b34fc60eb073fbe92fe10793e2ab14682e0f057332ddbef3d55c610174557f2db474db7c7212646cb15c6177d87be30711e6c04f1139d8e495ef1d1d998227610175557efde404053ec39a19f6ac347121a2264815dda84f910a388cb372e967a5d08c610176557f0723792ffab6ec6cfb3ece1509b9b4fb07e5bdb2299d1538e6e1db916f90cf89610177557f2a4392ec4e3d1811cd6a950cc865ee6f2342910a6551c5dce38cb995576c7c70610178557f1dead4c14f75e9d8449c80b648dcd4694c2ee50da2ba16e5e438f0d77ab02e34610179557f124c53ce0953fffb7ab5e3c143df6cd48ba747d3959fcb8086405d763ed5455061017a557f02bae19605746a8cd3f0927b2c01630f36f4d1bab9216ca839833e7ff6efa20661017b557f1f8375099becf17173d457d0d07bfb74c7067df1143b5ad987046e8e66817bc961017c557f0e13e954d61bb3fa3b03e7d136ca909b610fa2ca4443d920d94d16684f2b83d461017d557f1416ef2fc4f88fcfc4f9eb12f8e214b1c3e31c6c10ece9cfa51f078a3bbf345761017e557f032f915ff71e198a7955d2697249f40fb94c65812ed24e670c9700f52fdf6e0e61017f557f08bfebf4b3ddb0f8c51dd40193f5996da9f3d799ee0d8beb6be4038132df60b4610180557f065ac498cf4a5acaeb3b6cee826da9f834c961fa39feff6ae925b90dff79b613610181557f2e72c628101a93201b912a3e3fe96d39b0a9076ec39b7935a015c59bb32b8a2a610182557f19bba68e7b9da1e6ec42e52d7ab2adaf3b6a5521b1a454ec70f62e0ab702c085610183557f0de1f72745a5af2a34cac412e00eb6c8b5db1f3b52fa1bff88076c2726b83b08610184557f2e8f152603b2fac10d6a14c841327c23c502537367ccb1e42fab9a3bd9db2a8d610185557f14e16c3e0dcfd7e621a32627ebf37f6c0afb4467d34c7b7aeffded11769dec85610186557f0be1e62127948b4805c85a1d836574f0892ca6473fcde98f3fd1781248a9768f610187557f0930288fbd7c849197c8372f1dd8f9087f8a03f09b9cd904a469c15ef6b1b515610188557f231cac34e215e3f404d2fcfb79e0705deeb3d40978f0ee31072f6cbc1b579e33610189557f2e0e3cd2718ac7199b81dc14e841de40a9536b7ffe95fa1fc9c6b799e43e2c9761018a557f0718452506f0a232e98966d84b1a4675a66bd80263a2dc58bdac873825752fc361018b557f162d4ed998307d6e132edbf5c11f62f53d4636aa10cb3c2244c2bf5577168c3761018c557f247d6a5544a8f295a894ae77c7efcdcbf52e3bf4e5d0c0d2f40557a61d44984861018d557f0b8de3868471f109e91670daca698dba917d1c5535821f33aa9598d1db8e3d1961018e557f29851997020f527c92e20f030d232b81d334144a641e6a8866b46dd925005bbb61018f557f1a9cfcbe29a2b6503a03049727c0bca3111afd62f2836f392080321d1b4ef642610190557f1aa3ead91fa89cc1d6cb1d0eb76a27190c6abfdd3265d6d0a1e5c58feddaddf6610191557f0702fc26a7d367e6677efefd95204a7e00144c2fc7dbc2a581aa00d99f51f08161019255604051611ba990816200070582396080518181816102980152818161031201528181610c7b015281816110cf015281816111c5015281816114610152818161158d015281816115fb015261199b015260a05181818161046801528181610d22015281816110a5015281816111ee015281816113400152818161140b01528181611717015281816118010152611978015260c0518181816102690152818161055701528181610c4401526113a90152f35b60449060405190637ccdcc9760e11b8252600482015260206024820152fd5b63682e504160e11b8152600490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b8015620006fe57600190602081108216604e8210831617620006f65781906005925b808211620006c957505081600019048111620006b3570290565b634e487b7160e01b600052601160045260246000fd5b909280600019048111620006b357818416620006ec575b800292811c9062000699565b80920291620006e0565b905060050a90565b5060019056fe60406080815260048036101561001457600080fd5b600091823560e01c80631b9b8aa714610d065780631ffc735d14610beb57806324a47aeb14610bc35780633bfa6fce14610ba65780633dfb88b214610ac85780633e1a8cc114610a8e57806358bfc379146109375780635bb93995146109065780635bf1fa4d1461089057806362a361bb1461083657806369e7c5861461080e578063715018a6146107b457806381d6a24a1461078e5780638da5cb5b146107665780639cfced971461070b578063a27154ba146106f0578063b6a64acd146106cb578063bea140b3146105a7578063c00bdbcc14610516578063c15da65b146104ee578063d9c55ce114610242578063dda89a6e1461021e578063e93fb4d4146101f45763f2fde38b1461012857600080fd5b346101f05760203660031901126101f0576001600160a01b038235818116939192908490036101ec57610159610e24565b831561019a57505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8480fd5b8280fd5b50823461021b57602036600319011261021b575061021460209235611b2e565b9051908152f35b80fd5b83823461023e578160031936011261023e57602090610171549051908152f35b5080fd5b5082903461023e578160031936011261023e5761025d610e24565b6101719081549061028f7f00000000000000000000000000000000000000000000000000000000000000008093610e7c565b610310576102bc7f0000000000000000000000000000000000000000000000000000000000000000611b62565b90600154855261014c6020528420555b600154600181018091116102fd5790816102e892600155611023565b90558061016f5561016e60ff19815416905580f35b634e487b7160e01b845260118552602484fd5b7f0000000000000000000000000000000000000000000000000000000000000000845b81811061039c575060218110156103895760021b6002015490600154855261014c6020528420558360025b60868110610375575050610370610ff0565b6102cc565b6103818282018261100c565b01849061035e565b634e487b7160e01b855260328652602485fd5b6021811015806103c95781608601908154806103dc575b506103c95790866103c49255611071565b610333565b634e487b7160e01b875260328852602487fd5b9585979193959894929851976103f189610dcb565b60a0368a376103ff87611b62565b93865b60ff81168a811015610458578761044457908b61043961043f9361042c848e600290811b01611061565b90549060031b1c926117cb565b526117ba565b610402565b50634e487b7160e01b885260328d52602488fd5b509b9796959a94999850919290927f00000000000000000000000000000000000000000000000000000000000000009b5b60ff81168d8110156104a957908b6104396104a4938d6117cb565b610489565b5050979098506104bf9195949992969a50610f3d565b60018401908185116104db57906104d5916111c2565b896103b3565b634e487b7160e01b8a5260118b5260248afd5b50503461023e57602036600319011261023e576105139061050d610e24565b3561138b565b80f35b50346101f05760203660031901126101f057610530610e24565b600154835261014c60205281359083205561054c600154611071565b6001556101718054917f000000000000000000000000000000000000000000000000000000000000000083018093116105945750558061016f5561016e60ff19815416905580f35b634e487b7160e01b845260119052602483fd5b50346101f05760603660031901126101f05736602312156101f05780516060810181811067ffffffffffffffff8211176106b8578252806064913683116106b457849194905b8382106106a457505082516304b98e1d60e31b815293849186919083015b6003831061068a575050506020918173__$90b9196d445cf176c504004dde0b0062ce$__5af4918215610680578392610649575b6020838351908152f35b9091506020813d8211610678575b8161066460209383610de7565b810103126101f0576020925051903861063f565b3d9150610657565b81513d85823e3d90fd5b81518152869350600192909201916020918201910161060b565b81358152602091820191016105ed565b8580fd5b634e487b7160e01b855260418452602485fd5b83823461023e578160031936011261023e5760209060ff61016e541690519015158152f35b83823461023e578160031936011261023e5760209051818152f35b5090346101f05760a03660031901126101f05736602312156101f05781519061073382610dcb565b8160a4913683116106b45760209550905b8282106107575750505061021490610f3d565b81358152908501908501610744565b83823461023e578160031936011261023e57905490516001600160a01b039091168152602090f35b50823461021b578060031936011261021b57506101705460015482519182526020820152f35b833461021b578060031936011261021b576107cd610e24565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b83823461023e578160031936011261023e5760209060ff61016e5460081c1690519015158152f35b5090346101f057816003193601126101f05736602312156101f05781519061085d82610d99565b816044913683116106b45760209550905b8282106108815750505061021490610e9c565b8135815290850190850161086e565b50823461021b576108a036610e09565b908351926108ad84610dcb565b60a036853760218210156108f35750906005602095610214949360021b908160020154855260038201548886015281015486850152015460608301526080820152610f3d565b634e487b7160e01b815260328652602490fd5b83823461023e5760209061021461091c36610e09565b83519161092883610d99565b84368437825284820152610e9c565b50823461021b576020928360031936011261023e57803567ffffffffffffffff91828211610a8a5736602383011215610a8a5781810135928311610a7757508160051b9084519261098a87840185610de7565b835285830160248193830101913683116106b45791859391602489969401905b828210610a6557505086519251858401929150845b818110610a4c57505050816109dc9103601f198101835282610de7565b84519080519084845b838110610a375750505081908101838152039060025afa15610a2c577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000019051069051908152f35b9051903d90823e3d90fd5b828101820151858201528795508691016109e5565b82518452899688965093840193909201916001016109bf565b813581528795509086019086016109aa565b634e487b7160e01b845260419052602483fd5b8380fd5b50823461021b578060031936011261021b575060ff61016e541615610abb5760209061016f549051908152f35b51631e596e4360e11b8152fd5b50346101f05760803660031901126101f05736602312156101f0578051916080830183811067ffffffffffffffff821117610b93578252608490833683116106b457819491905b838210610b83575050825163248f667760e01b8152938491868284015b838210610b6957505050506020918173__$f67ed442b9d6bc4da64e961e2430b82eb6$__5af4918215610680578392610649576020838351908152f35b825181528794506020928301926001929092019101610b2c565b8135815260209182019101610b0f565b634e487b7160e01b855260418252602485fd5b83823461023e578160031936011261023e5760209061021461133a565b50823461021b57602036600319011261021b5750610214602092610be5610e24565b35611953565b50346101f05760203660031901126101f057610c05610e24565b61017192835492610c1681356110a2565b600194858501808611610cf3578155610c6990610c31610ff0565b8361016f5561016e60ff198154169055547f000000000000000000000000000000000000000000000000000000000000000090610e7c565b15610c79575b6020848451908152f35b7f0000000000000000000000000000000000000000000000000000000000000000906021821015610ce05750819060021b60020180548654835261014c60205284832055610cc78654611071565b86555560865b60a7811015610c6f578181558401610ccd565b634e487b7160e01b835260329052602482fd5b634e487b7160e01b845260118352602484fd5b50823461021b57602036600319011261021b57823590610d46827f0000000000000000000000000000000000000000000000000000000000000000611293565b61017154809110610d7e57506021821015610d6b576020838361014d01549051908152f35b634e487b7160e01b815260328452602490fd5b8460449184865192627289df60e61b84528301526024820152fd5b6040810190811067ffffffffffffffff821117610db557604052565b634e487b7160e01b600052604160045260246000fd5b60a0810190811067ffffffffffffffff821117610db557604052565b90601f8019910116810190811067ffffffffffffffff821117610db557604052565b6040906003190112610e1f576004359060243590565b600080fd5b6000546001600160a01b03163303610e3857565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b8115610e86570690565b634e487b7160e01b600052601260045260246000fd5b6040516314d2f97b60e11b815290600090600483015b60028310610f265750505060208160448173__$8658d3171857788947ecb1d152a017ec62$__5af4908115610f1a57600091610eec575090565b906020823d8211610f12575b81610f0560209383610de7565b8101031261021b57505190565b3d9150610ef8565b6040513d6000823e3d90fd5b600190825181526020809101920192019190610eb2565b604051630926f44b60e31b815290600090600483015b60058310610f8d5750505060208160a48173__$d643f7f71d754779bfbed637a90c4a7526$__5af4908115610f1a57600091610eec575090565b600190825181526020809101920192019190610f53565b60405190610fb182610dcb565b60a0368337565b60405190610fc582610d99565b6040368337565b9060018201809211610fda57565b634e487b7160e01b600052601160045260246000fd5b61014d5b61016e81106110005750565b60008155600101610ff4565b818110611017575050565b6000815560010161100c565b81810292918115918404141715610fda57565b602181101561104b5760021b60a70190600090565b634e487b7160e01b600052603260045260246000fd5b600482101561104b570190600090565b6000198114610fda5760010190565b602181101561104b5761012b0190600090565b600019810191908211610fda57565b907f00000000000000000000000000000000000000000000000000000000000000006000198101908111917f000000000000000000000000000000000000000000000000000000000000000060005b602181101561104b57806086019585875490610fda5785810361117957509060006111749261116d60406006611165825161112b81610dcb565b60a036823760029588871b809701948554835260038801546020840152600488015490830152600587015460608301526080820152610f3d565b93019061100c565b9755611071565b6110f1565b6111939192949796506111ac939550600285811b01611061565b90919082549060031b91821b91600019901b1916179055565b036111b45750565b6111be8154611071565b9055565b917f000000000000000000000000000000000000000000000000000000000000000090818311611281577f0000000000000000000000000000000000000000000000000000000000000000916000198301928311935b602181101561126c578060860195858754906112575785810361117957509060006112529261116d60406006611165825161112b81610dcb565b611218565b60246000634e487b7160e01b81526011600452fd5b60246000634e487b7160e01b81526032600452fd5b60405163d1459f7960e01b8152600490fd5b90801561133357811561132c578180600114611324576002146113135760208110610133831016604e8210600b8410161761130e57600190815b8082116112e557505081600019048111610fda570290565b909280600019048111610fda57818416611305575b800292811c906112cd565b809202916112fa565b900a90565b905060ff8111610fda576001901b90565b505050600190565b5050600090565b5050600190565b600180547f000000000000000000000000000000000000000000000000000000000000000092915b8161136d8286611293565b10156113865761137f61136d91611071565b9050611362565b925050565b60ff9061016e91808354166117a857610171908154908115611796577f0000000000000000000000000000000000000000000000000000000000000000916113d38382610e7c565b611571575b50505050600190815482811461151657506113f161133a565b90826000610170928354925b6114ae575b50505061142f827f0000000000000000000000000000000000000000000000000000000000000000611293565b9054835480911461145c575b5050602181101561104b5760021b60a7015461016f5560ff19825416179055565b6114857f0000000000000000000000000000000000000000000000000000000000000000611b62565b905b828110611494575061143b565b6114a9906114a4856000856117dc565b611071565b611487565b85548310156115115780151580611508575b6114ff576114f86114f287936114e18860006114dc8a54611b2e565b6117dc565b6114eb8754611071565b8755611071565b93611071565b92916113fd565b50505050505050565b508082146114c0565b611402565b905015611558576000805261014c6020527f2f1ae789e51094ec473affec14fe3c88a47d4230101ae4544eefebff81efc6d75461016f55815460ff1916179055565b60405163042a2e7160e11b815260006004820152602490fd5b826115839161157e610e24565b610e7c565b6115f957506115b17f0000000000000000000000000000000000000000000000000000000000000000611b62565b60015460005261014c6020526040600020555b6001549060018201809211610fda57816115e092600155611023565b9055600061016f55815460ff19168255388080806113d8565b7f00000000000000000000000000000000000000000000000000000000000000009060005b828110611677575050602181101561104b5760021b6002015460015460005261014c60205260406000205560025b60868110611662575061165d610ff0565b6115c4565b8061167160048093018261100c565b0161164c565b6021811015908161104b5780608601918254806116a5575b5061104b5760006116a09255611071565b61161e565b999792989394604097929796919651986116be8a610dcb565b60a0368b376116cc89611b62565b956000955b8689168e811015611705578a61104b57878f986104398f91938f6116fe9561042c91600290811b01611061565b96506116d1565b5092959c50929a97959998969a9390937f00000000000000000000000000000000000000000000000000000000000000009c5b808d168e811015611764578e9695949392918d610439611758938f6117cb565b90919293949550611738565b5050979496939b509761177c91995099949199610f3d565b60018301808411610fda57611790916111c2565b3861168f565b6040516316a0341160e11b8152600490fd5b604051630d36aec160e01b8152600490fd5b60ff1660ff8114610fda5760010190565b90600581101561104b5760051b0190565b929180821161194d576117fb6117f183611080565b90549060031b1c90565b906118257f0000000000000000000000000000000000000000000000000000000000000000611093565b821461187a57509061184b61187893946111936118509461184585611036565b50611061565b611080565b6118616114a48284549060031b1c90565b825460001960039390931b92831b1916911b179055565b565b9190600061188d815460ff9060a01c1690565b156118e95750506118e36118bf61187894956118a7610fb8565b906118b185611036565b505482526020820152610e9c565b915b6118de6118cd82611080565b8154906000199060031b1b19169055565b610fcc565b906117dc565b926118f695949195610fa4565b935b60ff81168781101561192857906119239161043961191c6117f1846118458a611036565b91886117cb565b6118f8565b50509261194790611878956119416118e39498836117cb565b52610f3d565b916118c1565b50509050565b8015611b1c5760ff9061016e8281541615611b0a57602092838311611aec57610171547f000000000000000000000000000000000000000000000000000000000000000094907f00000000000000000000000000000000000000000000000000000000000000005b816119c68289611293565b10156119df576119d86119c691611071565b90506119bb565b9394955050828510611acf57848303611a1a5750505061016f5491602181101561104b5761014d01829055805461ff00191661010017905590565b61016f5495949291905b838310611a4d57505050602181101561104b5761014d01839055805461ff001916610100179055565b909195611a9690611a5d88611b62565b60005460a0929190831c861615611a9d57611a909250604091825192611a8284610d99565b368437825284820152610e9c565b96611071565b9190611a24565b80611a909392604090815194611ab286610dcb565b368637845281878501528301528060608301526080820152610f3d565b6044858460405191627289df60e61b835260048301526024820152fd5b6044838560405191632cd31ae960e01b835260048301526024820152fd5b604051631e596e4360e11b8152600490fd5b604051630543d40760e11b8152600490fd5b806001541115611b4a5760005261014c60205260406000205490565b6024906040519063042a2e7160e11b82526004820152fd5b602181101561104b5761017201549056fea2646970667358221220aa888649b567f909a5bfd0859bac877470e2663f3b10aff1e5ca5ba44b6eb0b164736f6c63430008140033a2646970667358221220ceca36f53c6288a87b8bb5deb2a4e38c076632a986925e6ac7048e4028ef9a6664736f6c63430008140033",
  "libraries": {
    "PoseidonT3": "0x47076a871Ae4e442784dff8BCB42E3E4E440D519",
    "PoseidonT4": "0xFa21436084377C74855b2DB9CFe7322a4DDC1c3C",
    "PoseidonT5": "0xAf8D2aF5AB9654e4818142c6511754771c8064A5",
    "PoseidonT6": "0x2D610532b8e16e950DD853572Fee9493d3c33962"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deploy(uint256,(uint256,uint256),(uint8,uint8,uint8,uint8),(uint256,uint256),address,address,address)": {
        "params": {
          "_coordinatorPubKey": "The coordinator's public key",
          "_duration": "The duration of the poll",
          "_maci": "The MACI contract interface reference",
          "_maxValues": "The max values for the poll",
          "_pollOwner": "The owner of the poll",
          "_topupCredit": "The TopupCredit contract",
          "_treeDepths": "The depths of the merkle trees"
        },
        "returns": {
          "pollAddr": "The deployed Poll contract"
        }
      }
    },
    "title": "PollFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "MESSAGE_DATA_LENGTH()": {
        "notice": "the length of a MACI message"
      },
      "constructor": {
        "notice": "The PollFactory constructor"
      },
      "deploy(uint256,(uint256,uint256),(uint8,uint8,uint8,uint8),(uint256,uint256),address,address,address)": {
        "notice": "Deploy a new Poll contract and AccQueue contract for messages."
      }
    },
    "notice": "A factory contract which deploys Poll contracts. It allows the MACI contract size to stay within the limit set by EIP-170.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}