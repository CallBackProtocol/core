{
  "address": "0x4618C9411f497966B68cF6D85f6EBD4aeB41bac1",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ProcessVkAlreadySet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProcessVkNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SubsidyVkNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TallyVkAlreadySet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TallyVkNotSet",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_sig",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum IVkRegistry.Mode",
          "name": "mode",
          "type": "uint8"
        }
      ],
      "name": "ProcessVkSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_sig",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum IVkRegistry.Mode",
          "name": "mode",
          "type": "uint8"
        }
      ],
      "name": "TallyVkSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stateTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_messageTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_voteOptionTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_messageBatchSize",
          "type": "uint256"
        }
      ],
      "name": "genProcessVkSig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "sig",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stateTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_intStateTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_voteOptionTreeDepth",
          "type": "uint256"
        }
      ],
      "name": "genTallyVkSig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "sig",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stateTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_messageTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_voteOptionTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_messageBatchSize",
          "type": "uint256"
        },
        {
          "internalType": "enum IVkRegistry.Mode",
          "name": "_mode",
          "type": "uint8"
        }
      ],
      "name": "getProcessVk",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Pairing.G1Point",
              "name": "alpha1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "beta2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "gamma2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "delta2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Pairing.G1Point[]",
              "name": "ic",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct SnarkCommon.VerifyingKey",
          "name": "vk",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sig",
          "type": "uint256"
        },
        {
          "internalType": "enum IVkRegistry.Mode",
          "name": "_mode",
          "type": "uint8"
        }
      ],
      "name": "getProcessVkBySig",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Pairing.G1Point",
              "name": "alpha1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "beta2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "gamma2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "delta2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Pairing.G1Point[]",
              "name": "ic",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct SnarkCommon.VerifyingKey",
          "name": "vk",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stateTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_intStateTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_voteOptionTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "enum IVkRegistry.Mode",
          "name": "_mode",
          "type": "uint8"
        }
      ],
      "name": "getTallyVk",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Pairing.G1Point",
              "name": "alpha1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "beta2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "gamma2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "delta2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Pairing.G1Point[]",
              "name": "ic",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct SnarkCommon.VerifyingKey",
          "name": "vk",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sig",
          "type": "uint256"
        },
        {
          "internalType": "enum IVkRegistry.Mode",
          "name": "_mode",
          "type": "uint8"
        }
      ],
      "name": "getTallyVkBySig",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Pairing.G1Point",
              "name": "alpha1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "beta2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "gamma2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "delta2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Pairing.G1Point[]",
              "name": "ic",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct SnarkCommon.VerifyingKey",
          "name": "vk",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stateTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_messageTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_voteOptionTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_messageBatchSize",
          "type": "uint256"
        },
        {
          "internalType": "enum IVkRegistry.Mode",
          "name": "_mode",
          "type": "uint8"
        }
      ],
      "name": "hasProcessVk",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isSet",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stateTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_intStateTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_voteOptionTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "enum IVkRegistry.Mode",
          "name": "_mode",
          "type": "uint8"
        }
      ],
      "name": "hasTallyVk",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isSet",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sig",
          "type": "uint256"
        },
        {
          "internalType": "enum IVkRegistry.Mode",
          "name": "_mode",
          "type": "uint8"
        }
      ],
      "name": "isProcessVkSet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isSet",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_sig",
          "type": "uint256"
        },
        {
          "internalType": "enum IVkRegistry.Mode",
          "name": "_mode",
          "type": "uint8"
        }
      ],
      "name": "isTallyVkSet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isSet",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stateTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_intStateTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_messageTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_voteOptionTreeDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_messageBatchSize",
          "type": "uint256"
        },
        {
          "internalType": "enum IVkRegistry.Mode",
          "name": "_mode",
          "type": "uint8"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Pairing.G1Point",
              "name": "alpha1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "beta2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "gamma2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "delta2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Pairing.G1Point[]",
              "name": "ic",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct SnarkCommon.VerifyingKey",
          "name": "_processVk",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Pairing.G1Point",
              "name": "alpha1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "beta2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "gamma2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "x",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "y",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Pairing.G2Point",
              "name": "delta2",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "x",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "y",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Pairing.G1Point[]",
              "name": "ic",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct SnarkCommon.VerifyingKey",
          "name": "_tallyVk",
          "type": "tuple"
        }
      ],
      "name": "setVerifyingKeys",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x34464d8c5f69b6dc1ad0b22d66ee42f038ba4d4bfeb45cc943b11985d05f08e6",
  "receipt": {
    "to": null,
    "from": "0xa916330337ff3143691fA95aE084e59C28E0CDC2",
    "contractAddress": "0x4618C9411f497966B68cF6D85f6EBD4aeB41bac1",
    "transactionIndex": 1,
    "gasUsed": "937943",
    "logsBloom": "0x
    "blockHash": "0x662938a6108e8964b8b19cea4f21fd2cb7f3e745522d3ec7cea2754e003629bc",
    "transactionHash": "0x34464d8c5f69b6dc1ad0b22d66ee42f038ba4d4bfeb45cc943b11985d05f08e6",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 5783657,
        "transactionHash": "0x34464d8c5f69b6dc1ad0b22d66ee42f038ba4d4bfeb45cc943b11985d05f08e6",
        "address": "0x4618C9411f497966B68cF6D85f6EBD4aeB41bac1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a916330337ff3143691fa95ae084e59c28e0cdc2"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x662938a6108e8964b8b19cea4f21fd2cb7f3e745522d3ec7cea2754e003629bc"
      }
    ],
    "blockNumber": 5783657,
    "cumulativeGasUsed": "960086",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "79ae3e088114d792164a9068ef4ed3b4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ProcessVkAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProcessVkNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SubsidyVkNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TallyVkAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TallyVkNotSet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sig\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IVkRegistry.Mode\",\"name\":\"mode\",\"type\":\"uint8\"}],\"name\":\"ProcessVkSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_sig\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IVkRegistry.Mode\",\"name\":\"mode\",\"type\":\"uint8\"}],\"name\":\"TallyVkSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stateTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_messageTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_voteOptionTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_messageBatchSize\",\"type\":\"uint256\"}],\"name\":\"genProcessVkSig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sig\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stateTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_intStateTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_voteOptionTreeDepth\",\"type\":\"uint256\"}],\"name\":\"genTallyVkSig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sig\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stateTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_messageTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_voteOptionTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_messageBatchSize\",\"type\":\"uint256\"},{\"internalType\":\"enum IVkRegistry.Mode\",\"name\":\"_mode\",\"type\":\"uint8\"}],\"name\":\"getProcessVk\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Pairing.G1Point\",\"name\":\"alpha1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"beta2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"gamma2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"delta2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Pairing.G1Point[]\",\"name\":\"ic\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SnarkCommon.VerifyingKey\",\"name\":\"vk\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sig\",\"type\":\"uint256\"},{\"internalType\":\"enum IVkRegistry.Mode\",\"name\":\"_mode\",\"type\":\"uint8\"}],\"name\":\"getProcessVkBySig\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Pairing.G1Point\",\"name\":\"alpha1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"beta2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"gamma2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"delta2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Pairing.G1Point[]\",\"name\":\"ic\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SnarkCommon.VerifyingKey\",\"name\":\"vk\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stateTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_intStateTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_voteOptionTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"enum IVkRegistry.Mode\",\"name\":\"_mode\",\"type\":\"uint8\"}],\"name\":\"getTallyVk\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Pairing.G1Point\",\"name\":\"alpha1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"beta2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"gamma2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"delta2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Pairing.G1Point[]\",\"name\":\"ic\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SnarkCommon.VerifyingKey\",\"name\":\"vk\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sig\",\"type\":\"uint256\"},{\"internalType\":\"enum IVkRegistry.Mode\",\"name\":\"_mode\",\"type\":\"uint8\"}],\"name\":\"getTallyVkBySig\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Pairing.G1Point\",\"name\":\"alpha1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"beta2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"gamma2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"delta2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Pairing.G1Point[]\",\"name\":\"ic\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SnarkCommon.VerifyingKey\",\"name\":\"vk\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stateTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_messageTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_voteOptionTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_messageBatchSize\",\"type\":\"uint256\"},{\"internalType\":\"enum IVkRegistry.Mode\",\"name\":\"_mode\",\"type\":\"uint8\"}],\"name\":\"hasProcessVk\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stateTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_intStateTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_voteOptionTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"enum IVkRegistry.Mode\",\"name\":\"_mode\",\"type\":\"uint8\"}],\"name\":\"hasTallyVk\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sig\",\"type\":\"uint256\"},{\"internalType\":\"enum IVkRegistry.Mode\",\"name\":\"_mode\",\"type\":\"uint8\"}],\"name\":\"isProcessVkSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sig\",\"type\":\"uint256\"},{\"internalType\":\"enum IVkRegistry.Mode\",\"name\":\"_mode\",\"type\":\"uint8\"}],\"name\":\"isTallyVkSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSet\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stateTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_intStateTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_messageTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_voteOptionTreeDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_messageBatchSize\",\"type\":\"uint256\"},{\"internalType\":\"enum IVkRegistry.Mode\",\"name\":\"_mode\",\"type\":\"uint8\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Pairing.G1Point\",\"name\":\"alpha1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"beta2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"gamma2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"delta2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Pairing.G1Point[]\",\"name\":\"ic\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SnarkCommon.VerifyingKey\",\"name\":\"_processVk\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Pairing.G1Point\",\"name\":\"alpha1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"beta2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"gamma2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"x\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"y\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Pairing.G2Point\",\"name\":\"delta2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct Pairing.G1Point[]\",\"name\":\"ic\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SnarkCommon.VerifyingKey\",\"name\":\"_tallyVk\",\"type\":\"tuple\"}],\"name\":\"setVerifyingKeys\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"genProcessVkSig(uint256,uint256,uint256,uint256)\":{\"params\":{\"_messageBatchSize\":\"The message batch size\",\"_messageTreeDepth\":\"The message tree depth\",\"_stateTreeDepth\":\"The state tree depth\",\"_voteOptionTreeDepth\":\"The vote option tree depth\"}},\"genTallyVkSig(uint256,uint256,uint256)\":{\"params\":{\"_intStateTreeDepth\":\"The intermediate state tree depth\",\"_stateTreeDepth\":\"The state tree depth\",\"_voteOptionTreeDepth\":\"The vote option tree depth\"},\"returns\":{\"sig\":\"The signature\"}},\"getProcessVk(uint256,uint256,uint256,uint256,uint8)\":{\"params\":{\"_messageBatchSize\":\"The message batch size\",\"_messageTreeDepth\":\"The message tree depth\",\"_mode\":\"QV or Non-QV\",\"_stateTreeDepth\":\"The state tree depth\",\"_voteOptionTreeDepth\":\"The vote option tree depth\"},\"returns\":{\"vk\":\"The verifying key\"}},\"getProcessVkBySig(uint256,uint8)\":{\"params\":{\"_mode\":\"QV or Non-QV\",\"_sig\":\"The signature\"},\"returns\":{\"vk\":\"The verifying key\"}},\"getTallyVk(uint256,uint256,uint256,uint8)\":{\"params\":{\"_intStateTreeDepth\":\"The intermediate state tree depth\",\"_mode\":\"QV or Non-QV\",\"_stateTreeDepth\":\"The state tree depth\",\"_voteOptionTreeDepth\":\"The vote option tree depth\"},\"returns\":{\"vk\":\"The verifying key\"}},\"getTallyVkBySig(uint256,uint8)\":{\"params\":{\"_mode\":\"QV or Non-QV\",\"_sig\":\"The signature\"},\"returns\":{\"vk\":\"The verifying key\"}},\"hasProcessVk(uint256,uint256,uint256,uint256,uint8)\":{\"params\":{\"_messageBatchSize\":\"The message batch size\",\"_messageTreeDepth\":\"The message tree depth\",\"_mode\":\"QV or Non-QV\",\"_stateTreeDepth\":\"The state tree depth\",\"_voteOptionTreeDepth\":\"The vote option tree depth\"},\"returns\":{\"isSet\":\"whether the verifying key is set\"}},\"hasTallyVk(uint256,uint256,uint256,uint8)\":{\"params\":{\"_intStateTreeDepth\":\"The intermediate state tree depth\",\"_mode\":\"QV or Non-QV\",\"_stateTreeDepth\":\"The state tree depth\",\"_voteOptionTreeDepth\":\"The vote option tree depth\"},\"returns\":{\"isSet\":\"whether the verifying key is set\"}},\"isProcessVkSet(uint256,uint8)\":{\"params\":{\"_mode\":\"QV or Non-QV\",\"_sig\":\"The signature\"},\"returns\":{\"isSet\":\"whether the verifying key is set\"}},\"isTallyVkSet(uint256,uint8)\":{\"params\":{\"_mode\":\"QV or Non-QV\",\"_sig\":\"The signature\"},\"returns\":{\"isSet\":\"whether the verifying key is set\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setVerifyingKeys(uint256,uint256,uint256,uint256,uint256,uint8,((uint256,uint256),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256,uint256)[]),((uint256,uint256),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256,uint256)[]))\":{\"params\":{\"_intStateTreeDepth\":\"The intermediate state tree depth\",\"_messageBatchSize\":\"The message batch size\",\"_messageTreeDepth\":\"The message tree depth\",\"_mode\":\"QV or Non-QV\",\"_processVk\":\"The process verifying key\",\"_stateTreeDepth\":\"The state tree depth\",\"_tallyVk\":\"The tally verifying key\",\"_voteOptionTreeDepth\":\"The vote option tree depth\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"VkRegistry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Create a new instance of the VkRegistry contract\"},\"genProcessVkSig(uint256,uint256,uint256,uint256)\":{\"notice\":\"generate the signature for the process verifying key\"},\"genTallyVkSig(uint256,uint256,uint256)\":{\"notice\":\"generate the signature for the tally verifying key\"},\"getProcessVk(uint256,uint256,uint256,uint256,uint8)\":{\"notice\":\"Get the process verifying key\"},\"getProcessVkBySig(uint256,uint8)\":{\"notice\":\"Get the process verifying key by signature\"},\"getTallyVk(uint256,uint256,uint256,uint8)\":{\"notice\":\"Get the tally verifying key\"},\"getTallyVkBySig(uint256,uint8)\":{\"notice\":\"Get the tally verifying key by signature\"},\"hasProcessVk(uint256,uint256,uint256,uint256,uint8)\":{\"notice\":\"Check if the process verifying key is set\"},\"hasTallyVk(uint256,uint256,uint256,uint8)\":{\"notice\":\"Check if the tally verifying key is set\"},\"isProcessVkSet(uint256,uint8)\":{\"notice\":\"Check if the process verifying key is set\"},\"isTallyVkSet(uint256,uint8)\":{\"notice\":\"Check if the tally verifying key is set\"},\"setVerifyingKeys(uint256,uint256,uint256,uint256,uint256,uint8,((uint256,uint256),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256,uint256)[]),((uint256,uint256),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256,uint256)[]))\":{\"notice\":\"Set the process and tally verifying keys for a certain combination of parameters\"}},\"notice\":\"Stores verifying keys for the circuits. Each circuit has a signature which is its compile-time constants represented as a uint256.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/maci-contracts/VkRegistry.sol\":\"VkRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/maci-contracts/VkRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { SnarkCommon } from \\\"./crypto/SnarkCommon.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IVkRegistry } from \\\"./interfaces/IVkRegistry.sol\\\";\\n\\n/// @title VkRegistry\\n/// @notice Stores verifying keys for the circuits.\\n/// Each circuit has a signature which is its compile-time constants represented\\n/// as a uint256.\\ncontract VkRegistry is Ownable, SnarkCommon, IVkRegistry {\\n  mapping(Mode => mapping(uint256 => VerifyingKey)) internal processVks;\\n  mapping(Mode => mapping(uint256 => bool)) internal processVkSet;\\n\\n  mapping(Mode => mapping(uint256 => VerifyingKey)) internal tallyVks;\\n  mapping(Mode => mapping(uint256 => bool)) internal tallyVkSet;\\n\\n  event ProcessVkSet(uint256 _sig, Mode mode);\\n  event TallyVkSet(uint256 _sig, Mode mode);\\n\\n  error ProcessVkAlreadySet();\\n  error TallyVkAlreadySet();\\n  error ProcessVkNotSet();\\n  error TallyVkNotSet();\\n  error SubsidyVkNotSet();\\n\\n  /// @notice Create a new instance of the VkRegistry contract\\n  // solhint-disable-next-line no-empty-blocks\\n  constructor() payable {}\\n\\n  /// @notice Check if the process verifying key is set\\n  /// @param _sig The signature\\n  /// @param _mode QV or Non-QV\\n  /// @return isSet whether the verifying key is set\\n  function isProcessVkSet(uint256 _sig, Mode _mode) public view returns (bool isSet) {\\n    isSet = processVkSet[_mode][_sig];\\n  }\\n\\n  /// @notice Check if the tally verifying key is set\\n  /// @param _sig The signature\\n  /// @param _mode QV or Non-QV\\n  /// @return isSet whether the verifying key is set\\n  function isTallyVkSet(uint256 _sig, Mode _mode) public view returns (bool isSet) {\\n    isSet = tallyVkSet[_mode][_sig];\\n  }\\n\\n  /// @notice generate the signature for the process verifying key\\n  /// @param _stateTreeDepth The state tree depth\\n  /// @param _messageTreeDepth The message tree depth\\n  /// @param _voteOptionTreeDepth The vote option tree depth\\n  /// @param _messageBatchSize The message batch size\\n  function genProcessVkSig(\\n    uint256 _stateTreeDepth,\\n    uint256 _messageTreeDepth,\\n    uint256 _voteOptionTreeDepth,\\n    uint256 _messageBatchSize\\n  ) public pure returns (uint256 sig) {\\n    sig = (_messageBatchSize << 192) + (_stateTreeDepth << 128) + (_messageTreeDepth << 64) + _voteOptionTreeDepth;\\n  }\\n\\n  /// @notice generate the signature for the tally verifying key\\n  /// @param _stateTreeDepth The state tree depth\\n  /// @param _intStateTreeDepth The intermediate state tree depth\\n  /// @param _voteOptionTreeDepth The vote option tree depth\\n  /// @return sig The signature\\n  function genTallyVkSig(\\n    uint256 _stateTreeDepth,\\n    uint256 _intStateTreeDepth,\\n    uint256 _voteOptionTreeDepth\\n  ) public pure returns (uint256 sig) {\\n    sig = (_stateTreeDepth << 128) + (_intStateTreeDepth << 64) + _voteOptionTreeDepth;\\n  }\\n\\n  /// @notice Set the process and tally verifying keys for a certain combination\\n  /// of parameters\\n  /// @param _stateTreeDepth The state tree depth\\n  /// @param _intStateTreeDepth The intermediate state tree depth\\n  /// @param _messageTreeDepth The message tree depth\\n  /// @param _voteOptionTreeDepth The vote option tree depth\\n  /// @param _messageBatchSize The message batch size\\n  /// @param _mode QV or Non-QV\\n  /// @param _processVk The process verifying key\\n  /// @param _tallyVk The tally verifying key\\n  function setVerifyingKeys(\\n    uint256 _stateTreeDepth,\\n    uint256 _intStateTreeDepth,\\n    uint256 _messageTreeDepth,\\n    uint256 _voteOptionTreeDepth,\\n    uint256 _messageBatchSize,\\n    Mode _mode,\\n    VerifyingKey calldata _processVk,\\n    VerifyingKey calldata _tallyVk\\n  ) public onlyOwner {\\n    uint256 processVkSig = genProcessVkSig(_stateTreeDepth, _messageTreeDepth, _voteOptionTreeDepth, _messageBatchSize);\\n\\n    if (processVkSet[_mode][processVkSig]) revert ProcessVkAlreadySet();\\n\\n    uint256 tallyVkSig = genTallyVkSig(_stateTreeDepth, _intStateTreeDepth, _voteOptionTreeDepth);\\n\\n    if (tallyVkSet[_mode][tallyVkSig]) revert TallyVkAlreadySet();\\n\\n    VerifyingKey storage processVk = processVks[_mode][processVkSig];\\n    processVk.alpha1 = _processVk.alpha1;\\n    processVk.beta2 = _processVk.beta2;\\n    processVk.gamma2 = _processVk.gamma2;\\n    processVk.delta2 = _processVk.delta2;\\n\\n    for (uint8 i = 0; i < _processVk.ic.length; i++) {\\n      processVk.ic.push(_processVk.ic[i]);\\n    }\\n\\n    processVkSet[_mode][processVkSig] = true;\\n\\n    VerifyingKey storage tallyVk = tallyVks[_mode][tallyVkSig];\\n    tallyVk.alpha1 = _tallyVk.alpha1;\\n    tallyVk.beta2 = _tallyVk.beta2;\\n    tallyVk.gamma2 = _tallyVk.gamma2;\\n    tallyVk.delta2 = _tallyVk.delta2;\\n\\n    for (uint8 i = 0; i < _tallyVk.ic.length; i++) {\\n      tallyVk.ic.push(_tallyVk.ic[i]);\\n    }\\n\\n    tallyVkSet[_mode][tallyVkSig] = true;\\n\\n    emit TallyVkSet(tallyVkSig, _mode);\\n    emit ProcessVkSet(processVkSig, _mode);\\n  }\\n\\n  /// @notice Check if the process verifying key is set\\n  /// @param _stateTreeDepth The state tree depth\\n  /// @param _messageTreeDepth The message tree depth\\n  /// @param _voteOptionTreeDepth The vote option tree depth\\n  /// @param _messageBatchSize The message batch size\\n  /// @param _mode QV or Non-QV\\n  /// @return isSet whether the verifying key is set\\n  function hasProcessVk(\\n    uint256 _stateTreeDepth,\\n    uint256 _messageTreeDepth,\\n    uint256 _voteOptionTreeDepth,\\n    uint256 _messageBatchSize,\\n    Mode _mode\\n  ) public view returns (bool isSet) {\\n    uint256 sig = genProcessVkSig(_stateTreeDepth, _messageTreeDepth, _voteOptionTreeDepth, _messageBatchSize);\\n    isSet = processVkSet[_mode][sig];\\n  }\\n\\n  /// @notice Get the process verifying key by signature\\n  /// @param _sig The signature\\n  /// @param _mode QV or Non-QV\\n  /// @return vk The verifying key\\n  function getProcessVkBySig(uint256 _sig, Mode _mode) public view returns (VerifyingKey memory vk) {\\n    if (!processVkSet[_mode][_sig]) revert ProcessVkNotSet();\\n\\n    vk = processVks[_mode][_sig];\\n  }\\n\\n  /// @inheritdoc IVkRegistry\\n  function getProcessVk(\\n    uint256 _stateTreeDepth,\\n    uint256 _messageTreeDepth,\\n    uint256 _voteOptionTreeDepth,\\n    uint256 _messageBatchSize,\\n    Mode _mode\\n  ) public view returns (VerifyingKey memory vk) {\\n    uint256 sig = genProcessVkSig(_stateTreeDepth, _messageTreeDepth, _voteOptionTreeDepth, _messageBatchSize);\\n\\n    vk = getProcessVkBySig(sig, _mode);\\n  }\\n\\n  /// @notice Check if the tally verifying key is set\\n  /// @param _stateTreeDepth The state tree depth\\n  /// @param _intStateTreeDepth The intermediate state tree depth\\n  /// @param _voteOptionTreeDepth The vote option tree depth\\n  /// @param _mode QV or Non-QV\\n  /// @return isSet whether the verifying key is set\\n  function hasTallyVk(\\n    uint256 _stateTreeDepth,\\n    uint256 _intStateTreeDepth,\\n    uint256 _voteOptionTreeDepth,\\n    Mode _mode\\n  ) public view returns (bool isSet) {\\n    uint256 sig = genTallyVkSig(_stateTreeDepth, _intStateTreeDepth, _voteOptionTreeDepth);\\n\\n    isSet = tallyVkSet[_mode][sig];\\n  }\\n\\n  /// @notice Get the tally verifying key by signature\\n  /// @param _sig The signature\\n  /// @param _mode QV or Non-QV\\n  /// @return vk The verifying key\\n  function getTallyVkBySig(uint256 _sig, Mode _mode) public view returns (VerifyingKey memory vk) {\\n    if (!tallyVkSet[_mode][_sig]) revert TallyVkNotSet();\\n\\n    vk = tallyVks[_mode][_sig];\\n  }\\n\\n  /// @inheritdoc IVkRegistry\\n  function getTallyVk(\\n    uint256 _stateTreeDepth,\\n    uint256 _intStateTreeDepth,\\n    uint256 _voteOptionTreeDepth,\\n    Mode _mode\\n  ) public view returns (VerifyingKey memory vk) {\\n    uint256 sig = genTallyVkSig(_stateTreeDepth, _intStateTreeDepth, _voteOptionTreeDepth);\\n\\n    vk = getTallyVkBySig(sig, _mode);\\n  }\\n}\\n\",\"keccak256\":\"0x2c931d9a437ebce08e2a63dd8fa9a5d65c59fa46fc9e3e29de946113b9e19282\",\"license\":\"MIT\"},\"contracts/maci-contracts/crypto/Pairing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to\\n// deal in the Software without restriction, including without limitation the\\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\\n// sell copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\\n// IN THE SOFTWARE.\\n\\n// 2019 OKIMS\\n\\npragma solidity ^0.8.10;\\n\\n/// @title Pairing\\n/// @notice A library implementing the alt_bn128 elliptic curve operations.\\nlibrary Pairing {\\n  uint256 public constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n  struct G1Point {\\n    uint256 x;\\n    uint256 y;\\n  }\\n\\n  // Encoding of field elements is: X[0] * z + X[1]\\n  struct G2Point {\\n    uint256[2] x;\\n    uint256[2] y;\\n  }\\n\\n  /// @notice custom errors\\n  error PairingAddFailed();\\n  error PairingMulFailed();\\n  error PairingOpcodeFailed();\\n\\n  /// @notice The negation of p, i.e. p.plus(p.negate()) should be zero.\\n  function negate(G1Point memory p) internal pure returns (G1Point memory) {\\n    // The prime q in the base field F_q for G1\\n    if (p.x == 0 && p.y == 0) {\\n      return G1Point(0, 0);\\n    } else {\\n      return G1Point(p.x, PRIME_Q - (p.y % PRIME_Q));\\n    }\\n  }\\n\\n  /// @notice r Returns the sum of two points of G1.\\n  function plus(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {\\n    uint256[4] memory input;\\n    input[0] = p1.x;\\n    input[1] = p1.y;\\n    input[2] = p2.x;\\n    input[3] = p2.y;\\n    bool success;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n\\n    if (!success) {\\n      revert PairingAddFailed();\\n    }\\n  }\\n\\n  /// @notice r Return the product of a point on G1 and a scalar, i.e.\\n  ///         p == p.scalarMul(1) and p.plus(p) == p.scalarMul(2) for all\\n  ///         points p.\\n  function scalarMul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {\\n    uint256[3] memory input;\\n    input[0] = p.x;\\n    input[1] = p.y;\\n    input[2] = s;\\n    bool success;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n\\n    if (!success) {\\n      revert PairingMulFailed();\\n    }\\n  }\\n\\n  /// @return isValid The result of computing the pairing check\\n  ///         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n  ///        For example,\\n  ///        pairing([P1(), P1().negate()], [P2(), P2()]) should return true.\\n  function pairing(\\n    G1Point memory a1,\\n    G2Point memory a2,\\n    G1Point memory b1,\\n    G2Point memory b2,\\n    G1Point memory c1,\\n    G2Point memory c2,\\n    G1Point memory d1,\\n    G2Point memory d2\\n  ) internal view returns (bool isValid) {\\n    G1Point[4] memory p1 = [a1, b1, c1, d1];\\n    G2Point[4] memory p2 = [a2, b2, c2, d2];\\n\\n    uint256 inputSize = 24;\\n    uint256[] memory input = new uint256[](inputSize);\\n\\n    for (uint256 i = 0; i < 4; i++) {\\n      uint256 j = i * 6;\\n      input[j + 0] = p1[i].x;\\n      input[j + 1] = p1[i].y;\\n      input[j + 2] = p2[i].x[0];\\n      input[j + 3] = p2[i].x[1];\\n      input[j + 4] = p2[i].y[0];\\n      input[j + 5] = p2[i].y[1];\\n    }\\n\\n    uint256[1] memory out;\\n    bool success;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n\\n    if (!success) {\\n      revert PairingOpcodeFailed();\\n    }\\n\\n    isValid = out[0] != 0;\\n  }\\n}\\n\",\"keccak256\":\"0x5ce2f85d56cec9a08960ebf54fe89a0867deb7f97d3151699ba238848598a1a4\",\"license\":\"MIT\"},\"contracts/maci-contracts/crypto/SnarkCommon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\nimport { Pairing } from \\\"./Pairing.sol\\\";\\n\\n/// @title SnarkCommon\\n/// @notice a Contract which holds a struct\\n/// representing a Groth16 verifying key\\ncontract SnarkCommon {\\n  /// @notice a struct representing a Groth16 verifying key\\n  struct VerifyingKey {\\n    Pairing.G1Point alpha1;\\n    Pairing.G2Point beta2;\\n    Pairing.G2Point gamma2;\\n    Pairing.G2Point delta2;\\n    Pairing.G1Point[] ic;\\n  }\\n}\\n\",\"keccak256\":\"0xdccb710f060330d75763c92bd6828dd2cc891c3ea5a30ce30ae221c177a7eba7\",\"license\":\"MIT\"},\"contracts/maci-contracts/interfaces/IVkRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { SnarkCommon } from \\\"../crypto/SnarkCommon.sol\\\";\\n\\n/// @title IVkRegistry\\n/// @notice VkRegistry interface\\ninterface IVkRegistry {\\n  /// @notice Multi store support for QV and Non-QV poll\\n  enum Mode {\\n    QV,\\n    NON_QV\\n  }\\n\\n  /// @notice Get the tally verifying key\\n  /// @param _stateTreeDepth The state tree depth\\n  /// @param _intStateTreeDepth The intermediate state tree depth\\n  /// @param _voteOptionTreeDepth The vote option tree depth\\n  /// @param _mode QV or Non-QV\\n  /// @return The verifying key\\n  function getTallyVk(\\n    uint256 _stateTreeDepth,\\n    uint256 _intStateTreeDepth,\\n    uint256 _voteOptionTreeDepth,\\n    Mode _mode\\n  ) external view returns (SnarkCommon.VerifyingKey memory);\\n\\n  /// @notice Get the process verifying key\\n  /// @param _stateTreeDepth The state tree depth\\n  /// @param _messageTreeDepth The message tree depth\\n  /// @param _voteOptionTreeDepth The vote option tree depth\\n  /// @param _messageBatchSize The message batch size\\n  /// @param _mode QV or Non-QV\\n  /// @return The verifying key\\n  function getProcessVk(\\n    uint256 _stateTreeDepth,\\n    uint256 _messageTreeDepth,\\n    uint256 _voteOptionTreeDepth,\\n    uint256 _messageBatchSize,\\n    Mode _mode\\n  ) external view returns (SnarkCommon.VerifyingKey memory);\\n}\\n\",\"keccak256\":\"0x39aa9351c0676786c04ecf592ae1d99f6da296eacbfd0cc4c862da3b216b0dfb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c806310b37e4d1461083b5780631afe11ef1461080e5780632360a419146107f55780633141a13c146107c75780633b6c7c1114610303578063486b58fa146102df578063715018a6146102865780638da5cb5b1461025d578063b2e395301461022e578063b4da51fc14610214578063c42569b2146101df578063d88ff4f5146101b0578063f2fde38b146100e55763f8e254dd146100b657600080fd5b346100e0576100dc6100d06100ca36610983565b90610e41565b604051918291826108e3565b0390f35b600080fd5b346100e05760203660031901126100e0576004356001600160a01b03818116918290036100e0576101146109cd565b811561015c57600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b346100e0576100dc6100d06101da6101c7366109a2565b94936101d4939193610c5a565b50610ac2565b610d2c565b346100e0576101f86101f036610983565b919091610a54565b90600052602052602060ff604060002054166040519015158152f35b346100e0576100dc6100d061022836610983565b90610d2c565b346100e05760803660031901126100e0576020610255606435604435602435600435610ac2565b604051908152f35b346100e05760003660031901126100e0576000546040516001600160a01b039091168152602090f35b346100e05760003660031901126100e05761029f6109cd565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346100e0576102fd6101f86102f3366109a2565b9593929092610ac2565b91610a25565b346100e057600319610100368201126100e05760043560643591600260a43510156100e05767ffffffffffffffff908160c435116100e0576101e091828260c435360301126100e05760e435116100e05760e435360301126100e0576103676109cd565b6103776084358360443584610ac2565b9161038360a435610a25565b8360005260205260ff604060002054166107b5576103ad6103b29260243560401b9060801b610a9f565b610a9f565b906103be60a435610a54565b8260005260205260ff604060002054166107a3576103dd60a435610a6d565b8160005260205260406000209161040560c43560040184906020600191803584550135910155565b604460c4350160005b6002811061078c575050608460c4350160005b6002811061077557505060c480350160005b6002811061075e57505061010460c4350160005b6002811061074757505061014460c4350160005b6002811061073057505061018460c4350160005b6002811061071957505060005b6104916101c460c4350160c435600401610af8565b905060ff821610156104d9576104d4906104cf6104c66104bc6101c460c4350160c435600401610af8565b60ff851691610b2e565b600e8701610b54565b610ae7565b61047c565b50906104e660a435610a25565b816000526020526040600020600160ff1982541617905561050860a435610a86565b8260005260205260406000209061053060e43560040183906020600191803584550135910155565b604460e4350160005b60028110610702575050608460e4350160005b600281106106eb57505060c460e4350160005b600281106106d457505061010460e4350160005b600281106106bd57505061014460e4350160005b600281106106a657505061018460e4350160005b6002811061068f57505060e4356101c40191600e019060005b6105c38460e435600401610af8565b60ff831691508110156105fb57906104cf6105f06105f6936105ea8860e435600401610af8565b90610b2e565b85610b54565b6105b4565b7f298d1d2d7c689e7717ba543af4cc2524314974d1522a4240b2cda0f362496e1f61068a847fb5eb693cc6c3cf0ba2a0f9d96dc6ed50059fc43caa9253d6202f2d48c15d13776106778a61065060a435610a54565b816000526020526040600020600160ff1982541617905560405191829160a4359083610bae565b0390a160405191829160a4359083610bae565b0390a1005b60019060208335930192600c82870101550161059b565b60019060208335930192600a828701015501610587565b600190602083359301926008828701015501610573565b60019060208335930192600682870101550161055f565b60019060208335930192600482870101550161054c565b600190602083359301926002828701015501610539565b60019060208335930192600c82880101550161046f565b60019060208335930192600a82880101550161045b565b600190602083359301926008828801015501610447565b600190602083359301926006828801015501610433565b600190602083359301926004828801015501610421565b60019060208335930192600282880101550161040e565b604051630877857960e21b8152600490fd5b6040516329fae11360e01b8152600490fd5b346100e0576103ad6101f86107ef6107de36610874565b959160409391931b9060801b610a9f565b91610a54565b346100e0576101f861080636610983565b919091610a25565b346100e05760603660031901126100e05760206102556044356103ad60243560401b60043560801b610a9f565b346100e0576100dc6100d06103ad61086f61085536610874565b9491610862939193610c5a565b5060401b9060801b610a9f565b610e41565b60809060031901126100e05760043590602435906044359060643560028110156100e05790565b6000915b600283106108ac57505050565b60019082518152602080910192019201919061089f565b90604060206108e1936108d784825161089b565b015191019061089b565b565b9060208083526102008301908061022060808286518051828a0152015195604096878901526109198482015160608a01906108c3565b61092a8782015160e08a01906108c3565b61093d60608201516101608a01906108c3565b0151956101e0808201528651809552019401926000905b83821061096357505050505090565b845180518752830151868401529485019493820193600190910190610954565b60409060031901126100e0576004359060243560028110156100e05790565b60a09060031901126100e0576004359060243590604435906064359060843560028110156100e05790565b6000546001600160a01b031633036109e157565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6002811015610a3e576000526002602052604060002090565b634e487b7160e01b600052602160045260246000fd5b6002811015610a3e576000526004602052604060002090565b6002811015610a3e576000526001602052604060002090565b6002811015610a3e576000526003602052604060002090565b91908201809211610aac57565b634e487b7160e01b600052601160045260246000fd5b90610ada610ae4946103ad9360801b9060c01b610a9f565b9060401b90610a9f565b90565b60ff1660ff8114610aac5760010190565b903590601e19813603018212156100e0570180359067ffffffffffffffff82116100e057602001918160061b360383136100e057565b9190811015610b3e5760061b0190565b634e487b7160e01b600052603260045260246000fd5b90815468010000000000000000811015610b985760018101808455811015610b3e576108e19260005260206000209060011b01906020600191803584550135910155565b634e487b7160e01b600052604160045260246000fd5b908152604081019291906002821015610a3e5760200152565b6040810190811067ffffffffffffffff821117610b9857604052565b60a0810190811067ffffffffffffffff821117610b9857604052565b90601f8019910116810190811067ffffffffffffffff821117610b9857604052565b60405190610c2e82610bc7565b81604051610c3b81610bc7565b60403682378152602060405191610c5183610bc7565b60403684370152565b60405190610c6782610be3565b6060608083604051610c7881610bc7565b60008152600060208201528152610c8d610c21565b6020820152610c9a610c21565b6040820152610ca7610c21565b838201520152565b90604051610cbc81610bc7565b602060018294805484520154910152565b60405191906000835b60028210610cea575050506108e182610bc7565b6001602081928554815201930191019091610cd6565b90604051610d0d81610bc7565b6020610d2760028395610d1f81610ccd565b855201610ccd565b910152565b90610d35610c5a565b50610d3f81610a25565b90600092808452602092835260409160ff838620541615610e3057610d6390610a6d565b9084528252808320815193610d7785610be3565b610d8082610caf565b8552600e600292610d92848201610d00565b86880152610da260068201610d00565b85880152610db2600a8201610d00565b6060880152019384549367ffffffffffffffff8511610e1c57519491610dde600586901b830187610bff565b8486529182528082208186015b858410610e0057505050505050608082015290565b8483600192610e0e85610caf565b815201920193019290610deb565b634e487b7160e01b83526041600452602483fd5b8251632f257a9d60e11b8152600490fd5b90610e4a610c5a565b50610e5481610a54565b90600092808452602092835260409160ff838620541615610f3157610e7890610a86565b9084528252808320815193610e8c85610be3565b610e9582610caf565b8552600e600292610ea7848201610d00565b86880152610eb760068201610d00565b85880152610ec7600a8201610d00565b6060880152019384549367ffffffffffffffff8511610e1c57519491610ef3600586901b830187610bff565b8486529182528082208186015b858410610f1557505050505050608082015290565b8483600192610f2385610caf565b815201920193019290610f00565b825162f7dd2f60e71b8152600490fdfea26469706673582212201659a59b2ac8a422d979544db3f991cf348da3198ad34b01f267c99a1b51fc6164736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "genProcessVkSig(uint256,uint256,uint256,uint256)": {
        "params": {
          "_messageBatchSize": "The message batch size",
          "_messageTreeDepth": "The message tree depth",
          "_stateTreeDepth": "The state tree depth",
          "_voteOptionTreeDepth": "The vote option tree depth"
        }
      },
      "genTallyVkSig(uint256,uint256,uint256)": {
        "params": {
          "_intStateTreeDepth": "The intermediate state tree depth",
          "_stateTreeDepth": "The state tree depth",
          "_voteOptionTreeDepth": "The vote option tree depth"
        },
        "returns": {
          "sig": "The signature"
        }
      },
      "getProcessVk(uint256,uint256,uint256,uint256,uint8)": {
        "params": {
          "_messageBatchSize": "The message batch size",
          "_messageTreeDepth": "The message tree depth",
          "_mode": "QV or Non-QV",
          "_stateTreeDepth": "The state tree depth",
          "_voteOptionTreeDepth": "The vote option tree depth"
        },
        "returns": {
          "vk": "The verifying key"
        }
      },
      "getProcessVkBySig(uint256,uint8)": {
        "params": {
          "_mode": "QV or Non-QV",
          "_sig": "The signature"
        },
        "returns": {
          "vk": "The verifying key"
        }
      },
      "getTallyVk(uint256,uint256,uint256,uint8)": {
        "params": {
          "_intStateTreeDepth": "The intermediate state tree depth",
          "_mode": "QV or Non-QV",
          "_stateTreeDepth": "The state tree depth",
          "_voteOptionTreeDepth": "The vote option tree depth"
        },
        "returns": {
          "vk": "The verifying key"
        }
      },
      "getTallyVkBySig(uint256,uint8)": {
        "params": {
          "_mode": "QV or Non-QV",
          "_sig": "The signature"
        },
        "returns": {
          "vk": "The verifying key"
        }
      },
      "hasProcessVk(uint256,uint256,uint256,uint256,uint8)": {
        "params": {
          "_messageBatchSize": "The message batch size",
          "_messageTreeDepth": "The message tree depth",
          "_mode": "QV or Non-QV",
          "_stateTreeDepth": "The state tree depth",
          "_voteOptionTreeDepth": "The vote option tree depth"
        },
        "returns": {
          "isSet": "whether the verifying key is set"
        }
      },
      "hasTallyVk(uint256,uint256,uint256,uint8)": {
        "params": {
          "_intStateTreeDepth": "The intermediate state tree depth",
          "_mode": "QV or Non-QV",
          "_stateTreeDepth": "The state tree depth",
          "_voteOptionTreeDepth": "The vote option tree depth"
        },
        "returns": {
          "isSet": "whether the verifying key is set"
        }
      },
      "isProcessVkSet(uint256,uint8)": {
        "params": {
          "_mode": "QV or Non-QV",
          "_sig": "The signature"
        },
        "returns": {
          "isSet": "whether the verifying key is set"
        }
      },
      "isTallyVkSet(uint256,uint8)": {
        "params": {
          "_mode": "QV or Non-QV",
          "_sig": "The signature"
        },
        "returns": {
          "isSet": "whether the verifying key is set"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setVerifyingKeys(uint256,uint256,uint256,uint256,uint256,uint8,((uint256,uint256),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256,uint256)[]),((uint256,uint256),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256,uint256)[]))": {
        "params": {
          "_intStateTreeDepth": "The intermediate state tree depth",
          "_messageBatchSize": "The message batch size",
          "_messageTreeDepth": "The message tree depth",
          "_mode": "QV or Non-QV",
          "_processVk": "The process verifying key",
          "_stateTreeDepth": "The state tree depth",
          "_tallyVk": "The tally verifying key",
          "_voteOptionTreeDepth": "The vote option tree depth"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "VkRegistry",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Create a new instance of the VkRegistry contract"
      },
      "genProcessVkSig(uint256,uint256,uint256,uint256)": {
        "notice": "generate the signature for the process verifying key"
      },
      "genTallyVkSig(uint256,uint256,uint256)": {
        "notice": "generate the signature for the tally verifying key"
      },
      "getProcessVk(uint256,uint256,uint256,uint256,uint8)": {
        "notice": "Get the process verifying key"
      },
      "getProcessVkBySig(uint256,uint8)": {
        "notice": "Get the process verifying key by signature"
      },
      "getTallyVk(uint256,uint256,uint256,uint8)": {
        "notice": "Get the tally verifying key"
      },
      "getTallyVkBySig(uint256,uint8)": {
        "notice": "Get the tally verifying key by signature"
      },
      "hasProcessVk(uint256,uint256,uint256,uint256,uint8)": {
        "notice": "Check if the process verifying key is set"
      },
      "hasTallyVk(uint256,uint256,uint256,uint8)": {
        "notice": "Check if the tally verifying key is set"
      },
      "isProcessVkSet(uint256,uint8)": {
        "notice": "Check if the process verifying key is set"
      },
      "isTallyVkSet(uint256,uint8)": {
        "notice": "Check if the tally verifying key is set"
      },
      "setVerifyingKeys(uint256,uint256,uint256,uint256,uint256,uint8,((uint256,uint256),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256,uint256)[]),((uint256,uint256),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256[2],uint256[2]),(uint256,uint256)[]))": {
        "notice": "Set the process and tally verifying keys for a certain combination of parameters"
      }
    },
    "notice": "Stores verifying keys for the circuits. Each circuit has a signature which is its compile-time constants represented as a uint256.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/maci-contracts/VkRegistry.sol:VkRegistry",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7267,
        "contract": "contracts/maci-contracts/VkRegistry.sol:VkRegistry",
        "label": "processVks",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_enum(Mode)9813,t_mapping(t_uint256,t_struct(VerifyingKey)8501_storage))"
      },
      {
        "astId": 7274,
        "contract": "contracts/maci-contracts/VkRegistry.sol:VkRegistry",
        "label": "processVkSet",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_enum(Mode)9813,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 7282,
        "contract": "contracts/maci-contracts/VkRegistry.sol:VkRegistry",
        "label": "tallyVks",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_enum(Mode)9813,t_mapping(t_uint256,t_struct(VerifyingKey)8501_storage))"
      },
      {
        "astId": 7289,
        "contract": "contracts/maci-contracts/VkRegistry.sol:VkRegistry",
        "label": "tallyVkSet",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_enum(Mode)9813,t_mapping(t_uint256,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(G1Point)8066_storage)dyn_storage": {
        "base": "t_struct(G1Point)8066_storage",
        "encoding": "dynamic_array",
        "label": "struct Pairing.G1Point[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(Mode)9813": {
        "encoding": "inplace",
        "label": "enum IVkRegistry.Mode",
        "numberOfBytes": "1"
      },
      "t_mapping(t_enum(Mode)9813,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_enum(Mode)9813",
        "label": "mapping(enum IVkRegistry.Mode => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_enum(Mode)9813,t_mapping(t_uint256,t_struct(VerifyingKey)8501_storage))": {
        "encoding": "mapping",
        "key": "t_enum(Mode)9813",
        "label": "mapping(enum IVkRegistry.Mode => mapping(uint256 => struct SnarkCommon.VerifyingKey))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(VerifyingKey)8501_storage)"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(VerifyingKey)8501_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SnarkCommon.VerifyingKey)",
        "numberOfBytes": "32",
        "value": "t_struct(VerifyingKey)8501_storage"
      },
      "t_struct(G1Point)8066_storage": {
        "encoding": "inplace",
        "label": "struct Pairing.G1Point",
        "members": [
          {
            "astId": 8063,
            "contract": "contracts/maci-contracts/VkRegistry.sol:VkRegistry",
            "label": "x",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8065,
            "contract": "contracts/maci-contracts/VkRegistry.sol:VkRegistry",
            "label": "y",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(G2Point)8075_storage": {
        "encoding": "inplace",
        "label": "struct Pairing.G2Point",
        "members": [
          {
            "astId": 8070,
            "contract": "contracts/maci-contracts/VkRegistry.sol:VkRegistry",
            "label": "x",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)2_storage"
          },
          {
            "astId": 8074,
            "contract": "contracts/maci-contracts/VkRegistry.sol:VkRegistry",
            "label": "y",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)2_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(VerifyingKey)8501_storage": {
        "encoding": "inplace",
        "label": "struct SnarkCommon.VerifyingKey",
        "members": [
          {
            "astId": 8487,
            "contract": "contracts/maci-contracts/VkRegistry.sol:VkRegistry",
            "label": "alpha1",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(G1Point)8066_storage"
          },
          {
            "astId": 8490,
            "contract": "contracts/maci-contracts/VkRegistry.sol:VkRegistry",
            "label": "beta2",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(G2Point)8075_storage"
          },
          {
            "astId": 8493,
            "contract": "contracts/maci-contracts/VkRegistry.sol:VkRegistry",
            "label": "gamma2",
            "offset": 0,
            "slot": "6",
            "type": "t_struct(G2Point)8075_storage"
          },
          {
            "astId": 8496,
            "contract": "contracts/maci-contracts/VkRegistry.sol:VkRegistry",
            "label": "delta2",
            "offset": 0,
            "slot": "10",
            "type": "t_struct(G2Point)8075_storage"
          },
          {
            "astId": 8500,
            "contract": "contracts/maci-contracts/VkRegistry.sol:VkRegistry",
            "label": "ic",
            "offset": 0,
            "slot": "14",
            "type": "t_array(t_struct(G1Point)8066_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}