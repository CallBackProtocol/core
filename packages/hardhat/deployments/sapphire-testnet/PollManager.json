{
  "address": "0xd7eFa0CA5FA74b65d9A1Aa080E8faB66483aBC5B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract MACI",
          "name": "_maci",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isQv",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pollId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maciPollId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "poll",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "messageProcessor",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tally",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct MACI.PollContracts",
          "name": "pollContracts",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "options",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "ipfsHash",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        }
      ],
      "name": "PollCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pollId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maciPollId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tallyJsonCID",
          "type": "string"
        }
      ],
      "name": "PollTallyCIDUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MESSAGE_DATA_LENGTH",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coordinatorPubKey",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "_options",
          "type": "string[]"
        },
        {
          "internalType": "string",
          "name": "_ipfsHash",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_duration",
          "type": "uint256"
        }
      ],
      "name": "createPoll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pollId",
          "type": "uint256"
        }
      ],
      "name": "fetchPoll",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maciPollId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "encodedOptions",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "ipfsHash",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "poll",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "messageProcessor",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tally",
                  "type": "address"
                }
              ],
              "internalType": "struct MACI.PollContracts",
              "name": "pollContracts",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numOfOptions",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "options",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "tallyJsonCID",
              "type": "string"
            }
          ],
          "internalType": "struct PollManager.PollData",
          "name": "poll_",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_page",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_perPage",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_ascending",
          "type": "bool"
        }
      ],
      "name": "fetchPolls",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maciPollId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "encodedOptions",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "ipfsHash",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "poll",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "messageProcessor",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "tally",
                  "type": "address"
                }
              ],
              "internalType": "struct MACI.PollContracts",
              "name": "pollContracts",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "numOfOptions",
              "type": "uint256"
            },
            {
              "internalType": "string[]",
              "name": "options",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "tallyJsonCID",
              "type": "string"
            }
          ],
          "internalType": "struct PollManager.PollData[]",
          "name": "polls_",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isQv",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maci",
      "outputs": [
        {
          "internalType": "contract MACI",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pollIdByAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "intStateTreeDepth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "messageTreeSubDepth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "messageTreeDepth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "voteOptionTreeDepth",
              "type": "uint8"
            }
          ],
          "internalType": "struct Params.TreeDepths",
          "name": "_treeDepths",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "x",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "y",
              "type": "uint256"
            }
          ],
          "internalType": "struct DomainObjs.PubKey",
          "name": "_coordinatorPubKey",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vkRegistry",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_useSubsidy",
          "type": "bool"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPolls",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treeDepths",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "intStateTreeDepth",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "messageTreeSubDepth",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "messageTreeDepth",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "voteOptionTreeDepth",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pollId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tallyJsonCID",
          "type": "string"
        }
      ],
      "name": "updatePollTallyCID",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "useSubsidy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vkRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x224b6899993105b51c6e9658174f530605da278b32da553d407b7bbee2c89107",
  "receipt": {
    "to": null,
    "from": "0xa916330337ff3143691fA95aE084e59C28E0CDC2",
    "contractAddress": "0xd7eFa0CA5FA74b65d9A1Aa080E8faB66483aBC5B",
    "transactionIndex": 0,
    "gasUsed": "1545796",
    "logsBloom": "0x
    "blockHash": "0xd9139022227e43df02174ebceddb858f30a56044328a9b984bf194b28660aca9",
    "transactionHash": "0x224b6899993105b51c6e9658174f530605da278b32da553d407b7bbee2c89107",
    "logs": [],
    "blockNumber": 5783662,
    "cumulativeGasUsed": "1545796",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9bD7EF3cb8d23071CCD1924cAE3B0Ec9Fe028891",
    true
  ],
  "numDeployments": 1,
  "solcInputHash": "79ae3e088114d792164a9068ef4ed3b4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract MACI\",\"name\":\"_maci\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isQv\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maciPollId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"poll\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"messageProcessor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tally\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct MACI.PollContracts\",\"name\":\"pollContracts\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"options\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"PollCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pollId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maciPollId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tallyJsonCID\",\"type\":\"string\"}],\"name\":\"PollTallyCIDUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MESSAGE_DATA_LENGTH\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coordinatorPubKey\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_options\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"_ipfsHash\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"createPoll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pollId\",\"type\":\"uint256\"}],\"name\":\"fetchPoll\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maciPollId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"encodedOptions\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"poll\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"messageProcessor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tally\",\"type\":\"address\"}],\"internalType\":\"struct MACI.PollContracts\",\"name\":\"pollContracts\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOfOptions\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"options\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"tallyJsonCID\",\"type\":\"string\"}],\"internalType\":\"struct PollManager.PollData\",\"name\":\"poll_\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_perPage\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_ascending\",\"type\":\"bool\"}],\"name\":\"fetchPolls\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maciPollId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"encodedOptions\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"poll\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"messageProcessor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tally\",\"type\":\"address\"}],\"internalType\":\"struct MACI.PollContracts\",\"name\":\"pollContracts\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numOfOptions\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"options\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"tallyJsonCID\",\"type\":\"string\"}],\"internalType\":\"struct PollManager.PollData[]\",\"name\":\"polls_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isQv\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maci\",\"outputs\":[{\"internalType\":\"contract MACI\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pollIdByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"intStateTreeDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"messageTreeSubDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"messageTreeDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"voteOptionTreeDepth\",\"type\":\"uint8\"}],\"internalType\":\"struct Params.TreeDepths\",\"name\":\"_treeDepths\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"internalType\":\"struct DomainObjs.PubKey\",\"name\":\"_coordinatorPubKey\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vkRegistry\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_useSubsidy\",\"type\":\"bool\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPolls\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treeDepths\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"intStateTreeDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"messageTreeSubDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"messageTreeDepth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"voteOptionTreeDepth\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pollId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tallyJsonCID\",\"type\":\"string\"}],\"name\":\"updatePollTallyCID\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useSubsidy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vkRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"MESSAGE_DATA_LENGTH()\":{\"notice\":\"the length of a MACI message\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PollManager.sol\":\"PollManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/PollManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"./maci-contracts/MACI.sol\\\";\\nimport { Params } from \\\"./maci-contracts/utilities/Params.sol\\\";\\nimport { DomainObjs } from \\\"./maci-contracts/utilities/DomainObjs.sol\\\";\\n\\ncontract PollManager is Params, DomainObjs {\\n\\tstruct PollContracts {\\n\\t\\taddress poll;\\n\\t\\taddress messageProcessor;\\n\\t\\taddress tally;\\n\\t\\taddress subsidy;\\n\\t}\\n\\n\\tstruct PollData {\\n\\t\\tuint256 id;\\n\\t\\tuint256 maciPollId;\\n\\t\\tstring name;\\n\\t\\tbytes encodedOptions;\\n\\t\\tstring ipfsHash;\\n\\t\\tMACI.PollContracts pollContracts;\\n\\t\\tuint256 startTime;\\n\\t\\tuint256 endTime;\\n\\t\\tuint256 numOfOptions;\\n\\t\\tstring[] options;\\n\\t\\tstring tallyJsonCID;\\n\\t}\\n\\n\\tmapping(uint256 => PollData) internal polls;\\n\\tmapping(address => uint256) public pollIdByAddress; // poll address => poll id\\n\\tuint256 public totalPolls;\\n\\n\\tMACI public maci;\\n\\n\\tTreeDepths public treeDepths;\\n\\tPubKey public coordinatorPubKey;\\n\\taddress public verifier;\\n\\taddress public vkRegistry;\\n\\tbool public useSubsidy;\\n\\tbool public isQv;\\n\\n\\tevent PollCreated(\\n\\t\\tuint256 indexed pollId,\\n\\t\\tuint256 indexed maciPollId,\\n\\t\\taddress indexed creator,\\n\\t\\tMACI.PollContracts pollContracts,\\n\\t\\tstring name,\\n\\t\\tstring[] options,\\n\\t\\tstring ipfsHash,\\n\\t\\tuint256 startTime,\\n\\t\\tuint256 endTime\\n\\t);\\n\\n\\tevent PollTallyCIDUpdated(\\n\\t\\tuint256 indexed pollId,\\n\\t\\tuint256 indexed maciPollId,\\n\\t\\tstring tallyJsonCID\\n\\t);\\n\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(msg.sender == owner(), \\\"only owner can call this function\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tconstructor(MACI _maci, bool _isQv) {\\n\\t\\tmaci = _maci;\\n\\t\\tisQv = _isQv;\\n\\t}\\n\\n\\tfunction owner() public view returns (address) {\\n\\t\\treturn maci.owner();\\n\\t}\\n\\n\\tfunction setConfig(\\n\\t\\tTreeDepths memory _treeDepths,\\n\\t\\tPubKey memory _coordinatorPubKey,\\n\\t\\taddress _verifier,\\n\\t\\taddress _vkRegistry,\\n\\t\\tbool _useSubsidy\\n\\t) public onlyOwner {\\n\\t\\ttreeDepths = _treeDepths;\\n\\t\\tcoordinatorPubKey = _coordinatorPubKey;\\n\\t\\tverifier = _verifier;\\n\\t\\tvkRegistry = _vkRegistry;\\n\\t\\tuseSubsidy = _useSubsidy;\\n\\t}\\n\\n\\tfunction createPoll(\\n\\t\\tstring calldata _name,\\n\\t\\tstring[] calldata _options,\\n\\t\\tstring calldata _ipfsHash,\\n\\t\\tuint256 _duration\\n\\t) public onlyOwner {\\n\\t\\t// TODO: check if the number of options are more than limit\\n\\n\\t\\t// deploy the poll contracts\\n\\t\\tMACI.PollContracts memory pollContracts = maci.deployPoll(\\n\\t\\t\\t_duration,\\n\\t\\t\\ttreeDepths,\\n\\t\\t\\tcoordinatorPubKey,\\n\\t\\t\\tverifier,\\n\\t\\t\\tvkRegistry,\\n\\t\\t\\tisQv\\n\\t\\t);\\n\\n\\t\\t// encode options to bytes for retrieval\\n\\t\\tbytes memory encodedOptions = abi.encode(_options);\\n\\n\\t\\tuint256 endTime = block.timestamp + _duration;\\n\\t\\tuint256 pollId = ++totalPolls;\\n\\n\\t\\tpollIdByAddress[pollContracts.poll] = pollId;\\n\\t\\tuint256 maciPollId = maci.getPollId(pollContracts.poll);\\n\\n\\t\\t// create poll\\n\\t\\tpolls[pollId] = PollData({\\n\\t\\t\\tid: pollId,\\n\\t\\t\\tmaciPollId: maciPollId,\\n\\t\\t\\tname: _name,\\n\\t\\t\\tencodedOptions: encodedOptions,\\n\\t\\t\\tnumOfOptions: _options.length,\\n\\t\\t\\tipfsHash: _ipfsHash,\\n\\t\\t\\tstartTime: block.timestamp,\\n\\t\\t\\tendTime: endTime,\\n\\t\\t\\tpollContracts: pollContracts,\\n\\t\\t\\toptions: _options,\\n\\t\\t\\ttallyJsonCID: \\\"\\\"\\n\\t\\t});\\n\\n\\t\\temit PollCreated(\\n\\t\\t\\tpollId,\\n\\t\\t\\tmaciPollId,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tpollContracts,\\n\\t\\t\\t_name,\\n\\t\\t\\t_options,\\n\\t\\t\\t_ipfsHash,\\n\\t\\t\\tblock.timestamp,\\n\\t\\t\\tendTime\\n\\t\\t);\\n\\t}\\n\\n\\tfunction updatePollTallyCID(\\n\\t\\tuint256 _pollId,\\n\\t\\tstring calldata _tallyJsonCID\\n\\t) public onlyOwner {\\n\\t\\trequire(_pollId <= totalPolls && _pollId != 0, \\\"poll does not exist\\\");\\n\\t\\tPollData storage poll = polls[_pollId];\\n\\t\\tpoll.tallyJsonCID = _tallyJsonCID;\\n\\n\\t\\temit PollTallyCIDUpdated(_pollId, poll.maciPollId, _tallyJsonCID);\\n\\t}\\n\\n\\tfunction fetchPolls(\\n\\t\\tuint256 _page,\\n\\t\\tuint256 _perPage,\\n\\t\\tbool _ascending\\n\\t) public view returns (PollData[] memory polls_) {\\n\\t\\tuint256 start = (_page - 1) * _perPage + 1;\\n\\t\\tuint256 end = start + _perPage - 1;\\n\\t\\tif (end > totalPolls) {\\n\\t\\t\\tend = totalPolls;\\n\\t\\t}\\n\\n\\t\\tif (start > totalPolls) {\\n\\t\\t\\treturn new PollData[](0);\\n\\t\\t}\\n\\n\\t\\tpolls_ = new PollData[](end - start + 1);\\n\\n\\t\\tuint256 index = 0;\\n\\t\\tfor (uint256 i = start; i <= end; i++) {\\n\\t\\t\\tuint256 pollIndex = i;\\n\\t\\t\\tif (!_ascending) {\\n\\t\\t\\t\\tpollIndex = totalPolls - i + 1;\\n\\t\\t\\t}\\n\\t\\t\\tpolls_[index++] = polls[pollIndex];\\n\\t\\t}\\n\\t}\\n\\n\\tfunction fetchPoll(\\n\\t\\tuint256 _pollId\\n\\t) public view returns (PollData memory poll_) {\\n\\t\\trequire(_pollId <= totalPolls && _pollId != 0, \\\"poll does not exist\\\");\\n\\t\\treturn polls[_pollId];\\n\\t}\\n}\\n\",\"keccak256\":\"0xdbc3760d341c518b47329b3194634777ccfb30dc6b5cc772359e1624c15b43ab\",\"license\":\"MIT\"},\"contracts/maci-contracts/MACI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { IPollFactory } from \\\"./interfaces/IPollFactory.sol\\\";\\nimport { IMessageProcessorFactory } from \\\"./interfaces/IMPFactory.sol\\\";\\nimport { ITallyFactory } from \\\"./interfaces/ITallyFactory.sol\\\";\\nimport { InitialVoiceCreditProxy } from \\\"./initialVoiceCreditProxy/InitialVoiceCreditProxy.sol\\\";\\nimport { SignUpGatekeeper } from \\\"./gatekeepers/SignUpGatekeeper.sol\\\";\\nimport { AccQueue } from \\\"./trees/AccQueue.sol\\\";\\nimport { AccQueueQuinaryBlankSl } from \\\"./trees/AccQueueQuinaryBlankSl.sol\\\";\\nimport { IMACI } from \\\"./interfaces/IMACI.sol\\\";\\nimport { Params } from \\\"./utilities/Params.sol\\\";\\nimport { TopupCredit } from \\\"./TopupCredit.sol\\\";\\nimport { Utilities } from \\\"./utilities/Utilities.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title MACI - Minimum Anti-Collusion Infrastructure Version 1\\n/// @notice A contract which allows users to sign up, and deploy new polls\\ncontract MACI is IMACI, Params, Utilities, Ownable {\\n\\t/// @notice The state tree depth is fixed. As such it should be as large as feasible\\n\\t/// so that there can be as many users as possible.  i.e. 5 ** 10 = 9765625\\n\\t/// this should also match the parameter of the circom circuits.\\n\\tuint8 public immutable stateTreeDepth;\\n\\n\\t/// @notice IMPORTANT: remember to change the ballot tree depth\\n\\t/// in contracts/ts/genEmptyBallotRootsContract.ts file\\n\\t/// if we change the state tree depth!\\n\\tuint8 internal constant STATE_TREE_SUBDEPTH = 2;\\n\\tuint8 internal constant TREE_ARITY = 5;\\n\\n\\t/// @notice The hash of a blank state leaf\\n\\tuint256 internal constant BLANK_STATE_LEAF_HASH =\\n\\t\\tuint256(\\n\\t\\t\\t6769006970205099520508948723718471724660867171122235270773600567925038008762\\n\\t\\t);\\n\\n\\t/// @notice Each poll has an incrementing ID\\n\\tuint256 public nextPollId;\\n\\n\\t/// @notice A mapping of poll IDs to Poll contracts.\\n\\tmapping(uint256 => address) public polls;\\n\\tmapping(address => uint256) public pollIds;\\n\\n\\t/// @notice Whether the subtrees have been merged (can merge root before new signup)\\n\\tbool public subtreesMerged;\\n\\n\\t/// @notice The number of signups\\n\\tuint256 public numSignUps;\\n\\n\\t/// @notice ERC20 contract that hold topup credits\\n\\tTopupCredit public immutable topupCredit;\\n\\n\\t/// @notice Factory contract that deploy a Poll contract\\n\\tIPollFactory public immutable pollFactory;\\n\\n\\t/// @notice Factory contract that deploy a MessageProcessor contract\\n\\tIMessageProcessorFactory public immutable messageProcessorFactory;\\n\\n\\t/// @notice Factory contract that deploy a Tally contract\\n\\tITallyFactory public immutable tallyFactory;\\n\\n\\t/// @notice The state AccQueue. Represents a mapping between each user's public key\\n\\t/// and their voice credit balance.\\n\\tAccQueue public immutable stateAq;\\n\\n\\t/// @notice Address of the SignUpGatekeeper, a contract which determines whether a\\n\\t/// user may sign up to vote\\n\\tSignUpGatekeeper public immutable signUpGatekeeper;\\n\\n\\t/// @notice The contract which provides the values of the initial voice credit\\n\\t/// balance per user\\n\\tInitialVoiceCreditProxy public immutable initialVoiceCreditProxy;\\n\\n\\tmapping(uint256 => mapping(uint256 => bool)) public isPublicKeyRegistered; // pubkey.x => pubkey.y => bool\\n\\n\\t/// @notice Poll Manager contract that create polls\\n\\taddress public manager;\\n\\n\\t/// @notice A struct holding the addresses of poll, mp and tally\\n\\tstruct PollContracts {\\n\\t\\taddress poll;\\n\\t\\taddress messageProcessor;\\n\\t\\taddress tally;\\n\\t}\\n\\n\\t// Events\\n\\tevent SignUp(\\n\\t\\tuint256 _stateIndex,\\n\\t\\tuint256 indexed _userPubKeyX,\\n\\t\\tuint256 indexed _userPubKeyY,\\n\\t\\tuint256 _voiceCreditBalance,\\n\\t\\tuint256 _timestamp\\n\\t);\\n\\tevent DeployPoll(\\n\\t\\tuint256 _pollId,\\n\\t\\tuint256 indexed _coordinatorPubKeyX,\\n\\t\\tuint256 indexed _coordinatorPubKeyY,\\n\\t\\tPollContracts pollAddr\\n\\t);\\n\\n\\t/// @notice Only allow a Poll contract to call the modified function.\\n\\tmodifier onlyPoll(uint256 _pollId) {\\n\\t\\tif (msg.sender != address(polls[_pollId]))\\n\\t\\t\\trevert CallerMustBePoll(msg.sender);\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @notice custom errors\\n\\terror CallerMustBePoll(address _caller);\\n\\terror PoseidonHashLibrariesNotLinked();\\n\\terror TooManySignups();\\n\\terror MaciPubKeyLargerThanSnarkFieldSize();\\n\\terror PreviousPollNotCompleted(uint256 pollId);\\n\\terror PollDoesNotExist(uint256 pollId);\\n\\terror PollAddressDoesNotExist(address pollAddr);\\n\\terror SignupTemporaryBlocked();\\n\\terror PubKeyAlreadyRegistered();\\n\\n\\t/// @notice Create a new instance of the MACI contract.\\n\\t/// @param _pollFactory The PollFactory contract\\n\\t/// @param _messageProcessorFactory The MessageProcessorFactory contract\\n\\t/// @param _tallyFactory The TallyFactory contract\\n\\t/// @param _signUpGatekeeper The SignUpGatekeeper contract\\n\\t/// @param _initialVoiceCreditProxy The InitialVoiceCreditProxy contract\\n\\t/// @param _topupCredit The TopupCredit contract\\n\\t/// @param _stateTreeDepth The depth of the state tree\\n\\tconstructor(\\n\\t\\tIPollFactory _pollFactory,\\n\\t\\tIMessageProcessorFactory _messageProcessorFactory,\\n\\t\\tITallyFactory _tallyFactory,\\n\\t\\tSignUpGatekeeper _signUpGatekeeper,\\n\\t\\tInitialVoiceCreditProxy _initialVoiceCreditProxy,\\n\\t\\tTopupCredit _topupCredit,\\n\\t\\tuint8 _stateTreeDepth\\n\\t) payable {\\n\\t\\t// Deploy the state AccQueue\\n\\t\\tstateAq = new AccQueueQuinaryBlankSl(STATE_TREE_SUBDEPTH);\\n\\t\\tstateAq.enqueue(BLANK_STATE_LEAF_HASH);\\n\\n\\t\\t// because we add a blank leaf we need to count one signup\\n\\t\\t// so we don't allow max + 1\\n\\t\\tunchecked {\\n\\t\\t\\tnumSignUps++;\\n\\t\\t}\\n\\n\\t\\tpollFactory = _pollFactory;\\n\\t\\tmessageProcessorFactory = _messageProcessorFactory;\\n\\t\\ttallyFactory = _tallyFactory;\\n\\t\\ttopupCredit = _topupCredit;\\n\\t\\tsignUpGatekeeper = _signUpGatekeeper;\\n\\t\\tinitialVoiceCreditProxy = _initialVoiceCreditProxy;\\n\\t\\tstateTreeDepth = _stateTreeDepth;\\n\\n\\t\\t// Verify linked poseidon libraries\\n\\t\\tif (hash2([uint256(1), uint256(1)]) == 0)\\n\\t\\t\\trevert PoseidonHashLibrariesNotLinked();\\n\\t}\\n\\n\\tfunction updateManager(address _manager) public onlyOwner {\\n\\t\\tmanager = _manager;\\n\\t}\\n\\n\\tmodifier onlyManager() {\\n\\t\\trequire(msg.sender == manager, \\\"only manager can create poll\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @notice Allows any eligible user sign up. The sign-up gatekeeper should prevent\\n\\t/// double sign-ups or ineligible users from doing so.  This function will\\n\\t/// only succeed if the sign-up deadline has not passed. It also enqueues a\\n\\t/// fresh state leaf into the state AccQueue.\\n\\t/// @param _pubKey The user's desired public key.\\n\\t/// @param _signUpGatekeeperData Data to pass to the sign-up gatekeeper's\\n\\t///     register() function. For instance, the POAPGatekeeper or\\n\\t///     SignUpTokenGatekeeper requires this value to be the ABI-encoded\\n\\t///     token ID.\\n\\t/// @param _initialVoiceCreditProxyData Data to pass to the\\n\\t///     InitialVoiceCreditProxy, which allows it to determine how many voice\\n\\t///     credits this user should have.\\n\\tfunction signUp(\\n\\t\\tPubKey memory _pubKey,\\n\\t\\tbytes memory _signUpGatekeeperData,\\n\\t\\tbytes memory _initialVoiceCreditProxyData\\n\\t) public virtual {\\n\\t\\t// check if the pubkey is already registered\\n\\t\\tif (isPublicKeyRegistered[_pubKey.x][_pubKey.y])\\n\\t\\t\\trevert PubKeyAlreadyRegistered();\\n\\n\\t\\t// prevent new signups until we merge the roots (possible DoS)\\n\\t\\tif (subtreesMerged) revert SignupTemporaryBlocked();\\n\\n\\t\\t// ensure we do not have more signups than what the circuits support\\n\\t\\tif (numSignUps >= uint256(TREE_ARITY) ** uint256(stateTreeDepth))\\n\\t\\t\\trevert TooManySignups();\\n\\n\\t\\tif (\\n\\t\\t\\t_pubKey.x >= SNARK_SCALAR_FIELD || _pubKey.y >= SNARK_SCALAR_FIELD\\n\\t\\t) {\\n\\t\\t\\trevert MaciPubKeyLargerThanSnarkFieldSize();\\n\\t\\t}\\n\\n\\t\\t// Increment the number of signups\\n\\t\\t// cannot overflow with realistic STATE_TREE_DEPTH\\n\\t\\t// values as numSignUps < 5 ** STATE_TREE_DEPTH -1\\n\\t\\tunchecked {\\n\\t\\t\\tnumSignUps++;\\n\\t\\t}\\n\\n\\t\\t// Register the user via the sign-up gatekeeper. This function should\\n\\t\\t// throw if the user has already registered or if ineligible to do so.\\n\\t\\tsignUpGatekeeper.register(msg.sender, _signUpGatekeeperData);\\n\\n\\t\\t// Get the user's voice credit balance.\\n\\t\\tuint256 voiceCreditBalance = initialVoiceCreditProxy.getVoiceCredits(\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\t_initialVoiceCreditProxyData\\n\\t\\t);\\n\\n\\t\\tuint256 timestamp = block.timestamp;\\n\\t\\t// Create a state leaf and enqueue it.\\n\\t\\tuint256 stateLeaf = hashStateLeaf(\\n\\t\\t\\tStateLeaf(_pubKey, voiceCreditBalance, timestamp)\\n\\t\\t);\\n\\t\\tuint256 stateIndex = stateAq.enqueue(stateLeaf);\\n\\n\\t\\tisPublicKeyRegistered[_pubKey.x][_pubKey.y] = true;\\n\\n\\t\\temit SignUp(\\n\\t\\t\\tstateIndex,\\n\\t\\t\\t_pubKey.x,\\n\\t\\t\\t_pubKey.y,\\n\\t\\t\\tvoiceCreditBalance,\\n\\t\\t\\ttimestamp\\n\\t\\t);\\n\\t}\\n\\n\\t/// @notice Deploy a new Poll contract.\\n\\t/// @param _duration How long should the Poll last for\\n\\t/// @param _treeDepths The depth of the Merkle trees\\n\\t/// @param _coordinatorPubKey The coordinator's public key\\n\\t/// @param _verifier The Verifier Contract\\n\\t/// @param _vkRegistry The VkRegistry Contract\\n\\t/// @param _isQv Whether to support QV or not\\n\\t/// @return pollAddr a new Poll contract address\\n\\tfunction deployPoll(\\n\\t\\tuint256 _duration,\\n\\t\\tTreeDepths memory _treeDepths,\\n\\t\\tPubKey memory _coordinatorPubKey,\\n\\t\\taddress _verifier,\\n\\t\\taddress _vkRegistry,\\n\\t\\tbool _isQv\\n\\t) public virtual onlyManager returns (PollContracts memory pollAddr) {\\n\\t\\t// cache the poll to a local variable so we can increment it\\n\\t\\tuint256 pollId = nextPollId;\\n\\n\\t\\t// Increment the poll ID for the next poll\\n\\t\\t// 2 ** 256 polls available\\n\\t\\tunchecked {\\n\\t\\t\\tnextPollId++;\\n\\t\\t}\\n\\n\\t\\t// if (pollId > 0) {\\n\\t\\t// \\tif (!stateAq.treeMerged()) revert PreviousPollNotCompleted(pollId);\\n\\t\\t// }\\n\\n\\t\\tMaxValues memory maxValues = MaxValues({\\n\\t\\t\\tmaxMessages: uint256(TREE_ARITY) ** _treeDepths.messageTreeDepth,\\n\\t\\t\\tmaxVoteOptions: uint256(TREE_ARITY) **\\n\\t\\t\\t\\t_treeDepths.voteOptionTreeDepth\\n\\t\\t});\\n\\n\\t\\taddress _owner = owner();\\n\\n\\t\\taddress p = pollFactory.deploy(\\n\\t\\t\\t_duration,\\n\\t\\t\\tmaxValues,\\n\\t\\t\\t_treeDepths,\\n\\t\\t\\t_coordinatorPubKey,\\n\\t\\t\\taddress(this),\\n\\t\\t\\ttopupCredit,\\n\\t\\t\\t_owner\\n\\t\\t);\\n\\n\\t\\taddress mp = messageProcessorFactory.deploy(\\n\\t\\t\\t_verifier,\\n\\t\\t\\t_vkRegistry,\\n\\t\\t\\tp,\\n\\t\\t\\t_owner,\\n\\t\\t\\t_isQv\\n\\t\\t);\\n\\t\\taddress tally = tallyFactory.deploy(\\n\\t\\t\\t_verifier,\\n\\t\\t\\t_vkRegistry,\\n\\t\\t\\tp,\\n\\t\\t\\tmp,\\n\\t\\t\\t_owner,\\n\\t\\t\\t_isQv\\n\\t\\t);\\n\\n\\t\\tpolls[pollId] = p;\\n\\t\\tpollIds[p] = pollId;\\n\\n\\t\\t// store the addresses in a struct so they can be returned\\n\\t\\tpollAddr = PollContracts({\\n\\t\\t\\tpoll: p,\\n\\t\\t\\tmessageProcessor: mp,\\n\\t\\t\\ttally: tally\\n\\t\\t});\\n\\n\\t\\temit DeployPoll(\\n\\t\\t\\tpollId,\\n\\t\\t\\t_coordinatorPubKey.x,\\n\\t\\t\\t_coordinatorPubKey.y,\\n\\t\\t\\tpollAddr\\n\\t\\t);\\n\\t}\\n\\n\\t/// @inheritdoc IMACI\\n\\tfunction mergeStateAqSubRoots(\\n\\t\\tuint256 _numSrQueueOps,\\n\\t\\tuint256 _pollId\\n\\t) public onlyPoll(_pollId) {\\n\\t\\tstateAq.mergeSubRoots(_numSrQueueOps);\\n\\n\\t\\t// if we have merged all subtrees then put a block\\n\\t\\tif (stateAq.subTreesMerged()) {\\n\\t\\t\\tsubtreesMerged = true;\\n\\t\\t}\\n\\t}\\n\\n\\t/// @inheritdoc IMACI\\n\\tfunction mergeStateAq(\\n\\t\\tuint256 _pollId\\n\\t) public onlyPoll(_pollId) returns (uint256 root) {\\n\\t\\t// remove block\\n\\t\\tsubtreesMerged = false;\\n\\n\\t\\troot = stateAq.merge(stateTreeDepth);\\n\\t}\\n\\n\\t/// @inheritdoc IMACI\\n\\tfunction getStateAqRoot() public view returns (uint256 root) {\\n\\t\\troot = stateAq.getMainRoot(stateTreeDepth);\\n\\t}\\n\\n\\t/// @notice Get the Poll details\\n\\t/// @param _pollId The identifier of the Poll to retrieve\\n\\t/// @return poll The Poll contract object\\n\\tfunction getPoll(uint256 _pollId) public view returns (address poll) {\\n\\t\\tif (_pollId >= nextPollId) revert PollDoesNotExist(_pollId);\\n\\t\\tpoll = polls[_pollId];\\n\\t}\\n\\n\\tfunction getPollId(address _poll) public view returns (uint256 pollId) {\\n\\t\\tif (pollIds[_poll] >= nextPollId) revert PollAddressDoesNotExist(_poll);\\n\\t\\tpollId = pollIds[_poll];\\n\\t}\\n}\\n\",\"keccak256\":\"0x36e3877e6503c7a3ef696fe5798bc3105cb11cb22f76592b230631f07df106b8\",\"license\":\"MIT\"},\"contracts/maci-contracts/TopupCredit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title TopupCredit\\n/// @notice A contract representing a token used to topup a MACI's voter\\n/// credits\\ncontract TopupCredit is ERC20, Ownable {\\n  uint8 public constant DECIMALS = 1;\\n  uint256 public constant MAXIMUM_AIRDROP_AMOUNT = 100000 * 10 ** DECIMALS;\\n\\n  /// @notice custom errors\\n  error ExceedLimit();\\n\\n  /// @notice create  a new TopupCredit token\\n  constructor() payable ERC20(\\\"TopupCredit\\\", \\\"TopupCredit\\\") {}\\n\\n  /// @notice mint tokens to an account\\n  /// @param account the account to mint tokens to\\n  /// @param amount the amount of tokens to mint\\n  function airdropTo(address account, uint256 amount) public onlyOwner {\\n    if (amount >= MAXIMUM_AIRDROP_AMOUNT) {\\n      revert ExceedLimit();\\n    }\\n\\n    _mint(account, amount);\\n  }\\n\\n  /// @notice mint tokens to the contract owner\\n  /// @param amount the amount of tokens to mint\\n  function airdrop(uint256 amount) public onlyOwner {\\n    if (amount >= MAXIMUM_AIRDROP_AMOUNT) {\\n      revert ExceedLimit();\\n    }\\n\\n    _mint(msg.sender, amount);\\n  }\\n}\\n\",\"keccak256\":\"0x088cf42d9b7eb3cc3606131bd810feb9edc9b3c78219c0088e6ae6a44632d6a1\",\"license\":\"MIT\"},\"contracts/maci-contracts/crypto/Hasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { SnarkConstants } from \\\"./SnarkConstants.sol\\\";\\nimport { PoseidonT3 } from \\\"./PoseidonT3.sol\\\";\\nimport { PoseidonT4 } from \\\"./PoseidonT4.sol\\\";\\nimport { PoseidonT5 } from \\\"./PoseidonT5.sol\\\";\\nimport { PoseidonT6 } from \\\"./PoseidonT6.sol\\\";\\n\\n/// @notice A SHA256 hash function for any number of input elements, and Poseidon hash\\n/// functions for 2, 3, 4, 5, and 12 input elements.\\ncontract Hasher is SnarkConstants {\\n  /// @notice Computes the SHA256 hash of an array of uint256 elements.\\n  /// @param array The array of uint256 elements.\\n  /// @return result The SHA256 hash of the array.\\n  function sha256Hash(uint256[] memory array) public pure returns (uint256 result) {\\n    result = uint256(sha256(abi.encodePacked(array))) % SNARK_SCALAR_FIELD;\\n  }\\n\\n  /// @notice Computes the Poseidon hash of two uint256 elements.\\n  /// @param array An array of two uint256 elements.\\n  /// @return result The Poseidon hash of the two elements.\\n  function hash2(uint256[2] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT3.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of three uint256 elements.\\n  /// @param array An array of three uint256 elements.\\n  /// @return result The Poseidon hash of the three elements.\\n  function hash3(uint256[3] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT4.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of four uint256 elements.\\n  /// @param array An array of four uint256 elements.\\n  /// @return result The Poseidon hash of the four elements.\\n  function hash4(uint256[4] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT5.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of five uint256 elements.\\n  /// @param array An array of five uint256 elements.\\n  /// @return result The Poseidon hash of the five elements.\\n  function hash5(uint256[5] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT6.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of two uint256 elements.\\n  /// @param left the first element to hash.\\n  /// @param right the second element to hash.\\n  /// @return result The Poseidon hash of the two elements.\\n  function hashLeftRight(uint256 left, uint256 right) public pure returns (uint256 result) {\\n    uint256[2] memory input;\\n    input[0] = left;\\n    input[1] = right;\\n    result = hash2(input);\\n  }\\n}\\n\",\"keccak256\":\"0x64a6181ac6e0df316ab26432098f6fc48b2d356f2397d3886f887a13446c7137\",\"license\":\"MIT\"},\"contracts/maci-contracts/crypto/PoseidonT3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT3 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[2] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0xfff415a7054b60f0826d0f731aa47b8edf59a1ae485a803ca73b3280855a5cdf\",\"license\":\"MIT\"},\"contracts/maci-contracts/crypto/PoseidonT4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT4 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[3] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0xa5422f08624b09ec1766b8d36ea527ec8af3f76121fa136846a9adc9ea3cc717\",\"license\":\"MIT\"},\"contracts/maci-contracts/crypto/PoseidonT5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT5 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[4] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0xb27ffc3b4c053ab97006c9d2d634e326a101926f0f704d456cec3d33e5757cc5\",\"license\":\"MIT\"},\"contracts/maci-contracts/crypto/PoseidonT6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT6 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[5] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0x7e378eb768102153e5153b6f0f8bb08732d6950d0be09d5563973a31cc844fea\",\"license\":\"MIT\"},\"contracts/maci-contracts/crypto/SnarkConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @title SnarkConstants\\n/// @notice This contract contains constants related to the SNARK\\n/// components of MACI.\\ncontract SnarkConstants {\\n  /// @notice The scalar field\\n  uint256 internal constant SNARK_SCALAR_FIELD =\\n    21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n  /// @notice The public key here is the first Pedersen base\\n  /// point from iden3's circomlib implementation of the Pedersen hash.\\n  /// Since it is generated using a hash-to-curve function, we are\\n  /// confident that no-one knows the private key associated with this\\n  /// public key. See:\\n  /// https://github.com/iden3/circomlib/blob/d5ed1c3ce4ca137a6b3ca48bec4ac12c1b38957a/src/pedersen_printbases.js\\n  /// Its hash should equal\\n  /// 6769006970205099520508948723718471724660867171122235270773600567925038008762.\\n  uint256 internal constant PAD_PUBKEY_X =\\n    10457101036533406547632367118273992217979173478358440826365724437999023779287;\\n  uint256 internal constant PAD_PUBKEY_Y =\\n    19824078218392094440610104313265183977899662750282163392862422243483260492317;\\n\\n  /// @notice The Keccack256 hash of 'Maci'\\n  uint256 internal constant NOTHING_UP_MY_SLEEVE =\\n    8370432830353022751713833565135785980866757267633941821328460903436894336785;\\n}\\n\",\"keccak256\":\"0xea489c5ac94d4f25f6255dbfeed0388c2841ead6d9d5e52a19bc8dd2c27b4d21\",\"license\":\"MIT\"},\"contracts/maci-contracts/gatekeepers/SignUpGatekeeper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @title SignUpGatekeeper\\n/// @notice A gatekeeper contract which allows users to sign up for a poll.\\nabstract contract SignUpGatekeeper {\\n  /// @notice Allows to set the MACI contract\\n  // solhint-disable-next-line no-empty-blocks\\n  function setMaciInstance(address _maci) public virtual {}\\n\\n  /// @notice Registers the user\\n  /// @param _user The address of the user\\n  /// @param _data additional data\\n  // solhint-disable-next-line no-empty-blocks\\n  function register(address _user, bytes memory _data) public virtual {}\\n}\\n\",\"keccak256\":\"0x6a2d8b704a584adefc185fe25fac29e2d9174a29eb0834beef7e8191ed5028d3\",\"license\":\"MIT\"},\"contracts/maci-contracts/initialVoiceCreditProxy/InitialVoiceCreditProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @title InitialVoiceCreditProxy\\n/// @notice This contract is the base contract for\\n/// InitialVoiceCreditProxy contracts. It allows to set a custom initial voice\\n/// credit balance for MACI's voters.\\nabstract contract InitialVoiceCreditProxy {\\n  /// @notice Returns the initial voice credit balance for a new MACI's voter\\n  /// @param _user the address of the voter\\n  /// @param _data additional data\\n  /// @return the balance\\n  // solhint-disable-next-line no-empty-blocks\\n  function getVoiceCredits(address _user, bytes memory _data) public view virtual returns (uint256) {}\\n}\\n\",\"keccak256\":\"0x5d37ff30a2191f5fff292f120250c5fc3c3a876944f460e054658f3cd05f6c35\",\"license\":\"MIT\"},\"contracts/maci-contracts/interfaces/IMACI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { AccQueue } from \\\"../trees/AccQueue.sol\\\";\\n\\n/// @title IMACI\\n/// @notice MACI interface\\ninterface IMACI {\\n  /// @notice Get the depth of the state tree\\n  /// @return The depth of the state tree\\n  function stateTreeDepth() external view returns (uint8);\\n\\n  /// @notice Return the main root of the StateAq contract\\n  /// @return The Merkle root\\n  function getStateAqRoot() external view returns (uint256);\\n\\n  /// @notice Allow Poll contracts to merge the state subroots\\n  /// @param _numSrQueueOps Number of operations\\n  /// @param _pollId The ID of the active Poll\\n  function mergeStateAqSubRoots(uint256 _numSrQueueOps, uint256 _pollId) external;\\n\\n  /// @notice Allow Poll contracts to merge the state root\\n  /// @param _pollId The active Poll ID\\n  /// @return The calculated Merkle root\\n  function mergeStateAq(uint256 _pollId) external returns (uint256);\\n\\n  /// @notice Get the number of signups\\n  /// @return numsignUps The number of signups\\n  function numSignUps() external view returns (uint256);\\n\\n  /// @notice Get the state AccQueue\\n  /// @return The state AccQueue\\n  function stateAq() external view returns (AccQueue);\\n}\\n\",\"keccak256\":\"0x5046e3e06d927152c6cea0e910af0542bc0178381fd3d9e43b2023ca8ba2f3eb\",\"license\":\"MIT\"},\"contracts/maci-contracts/interfaces/IMPFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @title IMessageProcessorFactory\\n/// @notice MessageProcessorFactory interface\\ninterface IMessageProcessorFactory {\\n  /// @notice Deploy a new MessageProcessor contract and return the address.\\n  /// @param _verifier Verifier contract\\n  /// @param _vkRegistry VkRegistry contract\\n  /// @param _poll Poll contract\\n  /// @param _owner Owner of the MessageProcessor contract\\n  /// @param _isQv Whether to support QV or not\\n  /// @return The deployed MessageProcessor contract\\n  function deploy(\\n    address _verifier,\\n    address _vkRegistry,\\n    address _poll,\\n    address _owner,\\n    bool _isQv\\n  ) external returns (address);\\n}\\n\",\"keccak256\":\"0x8f08fec330f2925d1c3d9f7a07a6e803860e8bc182a0a04d4260f2db8b858139\",\"license\":\"MIT\"},\"contracts/maci-contracts/interfaces/IPollFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { TopupCredit } from \\\"../TopupCredit.sol\\\";\\nimport { Params } from \\\"../utilities/Params.sol\\\";\\nimport { DomainObjs } from \\\"../utilities/DomainObjs.sol\\\";\\n\\n/// @title IPollFactory\\n/// @notice PollFactory interface\\ninterface IPollFactory {\\n  /// @notice Deploy a new Poll contract and AccQueue contract for messages.\\n  /// @param _duration The duration of the poll\\n  /// @param _maxValues The max values for the poll\\n  /// @param _treeDepths The depths of the merkle trees\\n  /// @param _coordinatorPubKey The coordinator's public key\\n  /// @param _maci The MACI contract interface reference\\n  /// @param _topupCredit The TopupCredit contract\\n  /// @param _pollOwner The owner of the poll\\n  /// @return The deployed Poll contract\\n  function deploy(\\n    uint256 _duration,\\n    Params.MaxValues memory _maxValues,\\n    Params.TreeDepths memory _treeDepths,\\n    DomainObjs.PubKey memory _coordinatorPubKey,\\n    address _maci,\\n    TopupCredit _topupCredit,\\n    address _pollOwner\\n  ) external returns (address);\\n}\\n\",\"keccak256\":\"0xd729956bc34555baae893d62b4234a5cd17463f41737574a8e21def0045c13fc\",\"license\":\"MIT\"},\"contracts/maci-contracts/interfaces/ITallyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @title ITallyFactory\\n/// @notice TallyFactory interface\\ninterface ITallyFactory {\\n  /// @notice Deploy a new Tally contract and return the address.\\n  /// @param _verifier Verifier contract\\n  /// @param _vkRegistry VkRegistry contract\\n  /// @param _poll Poll contract\\n  /// @param _messageProcessor MessageProcessor contract\\n  /// @param _owner Owner of the contract\\n  /// @param _isQv Whether to support QV or not\\n  /// @return The deployed contract\\n  function deploy(\\n    address _verifier,\\n    address _vkRegistry,\\n    address _poll,\\n    address _messageProcessor,\\n    address _owner,\\n    bool _isQv\\n  ) external returns (address);\\n}\\n\",\"keccak256\":\"0x931b29d319383f1e48b5aed92c4407204ddf3cf82506e8c4d3065d96aa668a5f\",\"license\":\"MIT\"},\"contracts/maci-contracts/trees/AccQueue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Hasher } from \\\"../crypto/Hasher.sol\\\";\\n\\n/// @title AccQueue\\n/// @notice This contract defines a Merkle tree where each leaf insertion only updates a\\n/// subtree. To obtain the main tree root, the contract owner must merge the\\n/// subtrees together. Merging subtrees requires at least 2 operations:\\n/// mergeSubRoots(), and merge(). To get around the gas limit,\\n/// the mergeSubRoots() can be performed in multiple transactions.\\nabstract contract AccQueue is Ownable, Hasher {\\n  // The maximum tree depth\\n  uint256 public constant MAX_DEPTH = 32;\\n\\n  /// @notice A Queue is a 2D array of Merkle roots and indices which represents nodes\\n  /// in a Merkle tree while it is progressively updated.\\n  struct Queue {\\n    /// @notice IMPORTANT: the following declares an array of b elements of type T: T[b]\\n    /// And the following declares an array of b elements of type T[a]: T[a][b]\\n    /// As such, the following declares an array of MAX_DEPTH+1 arrays of\\n    /// uint256[4] arrays, **not the other way round**:\\n    uint256[4][MAX_DEPTH + 1] levels;\\n    uint256[MAX_DEPTH + 1] indices;\\n  }\\n\\n  // The depth of each subtree\\n  uint256 internal immutable subDepth;\\n\\n  // The number of elements per hash operation. Should be either 2 (for\\n  // binary trees) or 5 (quinary trees). The limit is 5 because that is the\\n  // maximum supported number of inputs for the EVM implementation of the\\n  // Poseidon hash function\\n  uint256 internal immutable hashLength;\\n\\n  // hashLength ** subDepth\\n  uint256 internal immutable subTreeCapacity;\\n\\n  // True hashLength == 2, false if hashLength == 5\\n  bool internal isBinary;\\n\\n  // The index of the current subtree. e.g. the first subtree has index 0, the\\n  // second has 1, and so on\\n  uint256 internal currentSubtreeIndex;\\n\\n  // Tracks the current subtree.\\n  Queue internal leafQueue;\\n\\n  // Tracks the smallest tree of subroots\\n  Queue internal subRootQueue;\\n\\n  // Subtree roots\\n  mapping(uint256 => uint256) internal subRoots;\\n\\n  // Merged roots\\n  uint256[MAX_DEPTH + 1] internal mainRoots;\\n\\n  // Whether the subtrees have been merged\\n  bool public subTreesMerged;\\n\\n  // Whether entire merkle tree has been merged\\n  bool public treeMerged;\\n\\n  // The root of the shortest possible tree which fits all current subtree\\n  // roots\\n  uint256 internal smallSRTroot;\\n\\n  // Tracks the next subroot to queue\\n  uint256 internal nextSubRootIndex;\\n\\n  // The number of leaves inserted across all subtrees so far\\n  uint256 public numLeaves;\\n\\n  /// @notice custom errors\\n  error SubDepthCannotBeZero();\\n  error SubdepthTooLarge(uint256 _subDepth, uint256 max);\\n  error InvalidHashLength();\\n  error DepthCannotBeZero();\\n  error SubTreesAlreadyMerged();\\n  error NothingToMerge();\\n  error SubTreesNotMerged();\\n  error DepthTooLarge(uint256 _depth, uint256 max);\\n  error DepthTooSmall(uint256 _depth, uint256 min);\\n  error InvalidIndex(uint256 _index);\\n  error InvalidLevel();\\n\\n  /// @notice Create a new AccQueue\\n  /// @param _subDepth The depth of each subtree.\\n  /// @param _hashLength The number of leaves per node (2 or 5).\\n  constructor(uint256 _subDepth, uint256 _hashLength) payable {\\n    /// validation\\n    if (_subDepth == 0) revert SubDepthCannotBeZero();\\n    if (_subDepth > MAX_DEPTH) revert SubdepthTooLarge(_subDepth, MAX_DEPTH);\\n    if (_hashLength != 2 && _hashLength != 5) revert InvalidHashLength();\\n\\n    isBinary = _hashLength == 2;\\n    subDepth = _subDepth;\\n    hashLength = _hashLength;\\n    subTreeCapacity = _hashLength ** _subDepth;\\n  }\\n\\n  /// @notice Hash the contents of the specified level and the specified leaf.\\n  /// This is a virtual function as the hash function which the overriding\\n  /// contract uses will be either hashLeftRight or hash5, which require\\n  /// different input array lengths.\\n  /// @param _level The level to hash.\\n  /// @param _leaf The leaf include with the level.\\n  /// @return _hash The hash of the level and leaf.\\n  // solhint-disable-next-line no-empty-blocks\\n  function hashLevel(uint256 _level, uint256 _leaf) internal virtual returns (uint256 _hash) {}\\n\\n  /// @notice Hash the contents of the specified level and the specified leaf.\\n  /// This is a virtual function as the hash function which the overriding\\n  /// contract uses will be either hashLeftRight or hash5, which require\\n  /// different input array lengths.\\n  /// @param _level The level to hash.\\n  /// @param _leaf The leaf include with the level.\\n  /// @return _hash The hash of the level and leaf.\\n  // solhint-disable-next-line no-empty-blocks\\n  function hashLevelLeaf(uint256 _level, uint256 _leaf) public view virtual returns (uint256 _hash) {}\\n\\n  /// @notice Returns the zero leaf at a specified level.\\n  /// This is a virtual function as the hash function which the overriding\\n  /// contract uses will be either hashLeftRight or hash5, which will produce\\n  /// different zero values (e.g. hashLeftRight(0, 0) vs\\n  /// hash5([0, 0, 0, 0, 0]). Moreover, the zero value may be a\\n  /// nothing-up-my-sleeve value.\\n  /// @param _level The level at which to return the zero leaf.\\n  /// @return zero The zero leaf at the specified level.\\n  // solhint-disable-next-line no-empty-blocks\\n  function getZero(uint256 _level) internal virtual returns (uint256 zero) {}\\n\\n  /// @notice Add a leaf to the queue for the current subtree.\\n  /// @param _leaf The leaf to add.\\n  /// @return leafIndex The index of the leaf in the queue.\\n  function enqueue(uint256 _leaf) public onlyOwner returns (uint256 leafIndex) {\\n    leafIndex = numLeaves;\\n    // Recursively queue the leaf\\n    _enqueue(_leaf, 0);\\n\\n    // Update the leaf counter\\n    numLeaves = leafIndex + 1;\\n\\n    // Now that a new leaf has been added, mainRoots and smallSRTroot are\\n    // obsolete\\n    delete mainRoots;\\n    delete smallSRTroot;\\n    subTreesMerged = false;\\n\\n    // If a subtree is full\\n    if (numLeaves % subTreeCapacity == 0) {\\n      // Store the subroot\\n      subRoots[currentSubtreeIndex] = leafQueue.levels[subDepth][0];\\n\\n      // Increment the index\\n      currentSubtreeIndex++;\\n\\n      // Delete ancillary data\\n      delete leafQueue.levels[subDepth][0];\\n      delete leafQueue.indices;\\n    }\\n  }\\n\\n  /// @notice Updates the queue at a given level and hashes any subroots\\n  /// that need to be hashed.\\n  /// @param _leaf The leaf to add.\\n  /// @param _level The level at which to queue the leaf.\\n  function _enqueue(uint256 _leaf, uint256 _level) internal {\\n    if (_level > subDepth) {\\n      revert InvalidLevel();\\n    }\\n\\n    while (true) {\\n      uint256 n = leafQueue.indices[_level];\\n\\n      if (n != hashLength - 1) {\\n        // Just store the leaf\\n        leafQueue.levels[_level][n] = _leaf;\\n\\n        if (_level != subDepth) {\\n          // Update the index\\n          leafQueue.indices[_level]++;\\n        }\\n\\n        return;\\n      }\\n\\n      // Hash the leaves to next level\\n      _leaf = hashLevel(_level, _leaf);\\n\\n      // Reset the index for this level\\n      delete leafQueue.indices[_level];\\n\\n      // Queue the hash of the leaves into to the next level\\n      _level++;\\n    }\\n  }\\n\\n  /// @notice Fill any empty leaves of the current subtree with zeros and store the\\n  /// resulting subroot.\\n  function fill() public onlyOwner {\\n    if (numLeaves % subTreeCapacity == 0) {\\n      // If the subtree is completely empty, then the subroot is a\\n      // precalculated zero value\\n      subRoots[currentSubtreeIndex] = getZero(subDepth);\\n    } else {\\n      // Otherwise, fill the rest of the subtree with zeros\\n      _fill(0);\\n\\n      // Store the subroot\\n      subRoots[currentSubtreeIndex] = leafQueue.levels[subDepth][0];\\n\\n      // Reset the subtree data\\n      delete leafQueue.levels;\\n\\n      // Reset the merged roots\\n      delete mainRoots;\\n    }\\n\\n    // Increment the subtree index\\n    uint256 curr = currentSubtreeIndex + 1;\\n    currentSubtreeIndex = curr;\\n\\n    // Update the number of leaves\\n    numLeaves = curr * subTreeCapacity;\\n\\n    // Reset the subroot tree root now that it is obsolete\\n    delete smallSRTroot;\\n\\n    subTreesMerged = false;\\n  }\\n\\n  /// @notice A function that queues zeros to the specified level, hashes,\\n  /// the level, and enqueues the hash to the next level.\\n  /// @param _level The level at which to queue zeros.\\n  // solhint-disable-next-line no-empty-blocks\\n  function _fill(uint256 _level) internal virtual {}\\n\\n  /// Insert a subtree. Used for batch enqueues.\\n  function insertSubTree(uint256 _subRoot) public onlyOwner {\\n    subRoots[currentSubtreeIndex] = _subRoot;\\n\\n    // Increment the subtree index\\n    currentSubtreeIndex++;\\n\\n    // Update the number of leaves\\n    numLeaves += subTreeCapacity;\\n\\n    // Reset the subroot tree root now that it is obsolete\\n    delete smallSRTroot;\\n\\n    subTreesMerged = false;\\n  }\\n\\n  /// @notice Calculate the lowest possible height of a tree with\\n  /// all the subroots merged together.\\n  /// @return depth The lowest possible height of a tree with all the\\n  function calcMinHeight() public view returns (uint256 depth) {\\n    depth = 1;\\n    while (true) {\\n      if (hashLength ** depth >= currentSubtreeIndex) {\\n        break;\\n      }\\n      depth++;\\n    }\\n  }\\n\\n  /// @notice Merge all subtrees to form the shortest possible tree.\\n  /// This function can be called either once to merge all subtrees in a\\n  /// single transaction, or multiple times to do the same in multiple\\n  /// transactions.\\n  /// @param _numSrQueueOps The number of times this function will call\\n  ///                       queueSubRoot(), up to the maximum number of times\\n  ///                       necessary. If it is set to 0, it will call\\n  ///                       queueSubRoot() as many times as is necessary. Set\\n  ///                       this to a low number and call this function\\n  ///                       multiple times if there are many subroots to\\n  ///                       merge, or a single transaction could run out of\\n  ///                       gas.\\n  function mergeSubRoots(uint256 _numSrQueueOps) public onlyOwner {\\n    // This function can only be called once unless a new subtree is created\\n    if (subTreesMerged) revert SubTreesAlreadyMerged();\\n\\n    // There must be subtrees to merge\\n    if (numLeaves == 0) revert NothingToMerge();\\n\\n    // Fill any empty leaves in the current subtree with zeros only if the\\n    // current subtree is not full\\n    if (numLeaves % subTreeCapacity != 0) {\\n      fill();\\n    }\\n\\n    // If there is only 1 subtree, use its root\\n    if (currentSubtreeIndex == 1) {\\n      smallSRTroot = getSubRoot(0);\\n      subTreesMerged = true;\\n      return;\\n    }\\n\\n    uint256 depth = calcMinHeight();\\n\\n    uint256 queueOpsPerformed = 0;\\n    for (uint256 i = nextSubRootIndex; i < currentSubtreeIndex; i++) {\\n      if (_numSrQueueOps != 0 && queueOpsPerformed == _numSrQueueOps) {\\n        // If the limit is not 0, stop if the limit has been reached\\n        return;\\n      }\\n\\n      // Queue the next subroot\\n      queueSubRoot(getSubRoot(nextSubRootIndex), 0, depth);\\n\\n      // Increment the next subroot counter\\n      nextSubRootIndex++;\\n\\n      // Increment the ops counter\\n      queueOpsPerformed++;\\n    }\\n\\n    // The height of the tree of subroots\\n    uint256 m = hashLength ** depth;\\n\\n    // Queue zeroes to fill out the SRT\\n    if (nextSubRootIndex == currentSubtreeIndex) {\\n      uint256 z = getZero(subDepth);\\n      for (uint256 i = currentSubtreeIndex; i < m; i++) {\\n        queueSubRoot(z, 0, depth);\\n      }\\n    }\\n\\n    // Store the smallest main root\\n    smallSRTroot = subRootQueue.levels[depth][0];\\n    subTreesMerged = true;\\n  }\\n\\n  /// @notice Queues a subroot into the subroot tree.\\n  /// @param _leaf The value to queue.\\n  /// @param _level The level at which to queue _leaf.\\n  /// @param _maxDepth The depth of the tree.\\n  function queueSubRoot(uint256 _leaf, uint256 _level, uint256 _maxDepth) internal {\\n    if (_level > _maxDepth) {\\n      return;\\n    }\\n\\n    uint256 n = subRootQueue.indices[_level];\\n\\n    if (n != hashLength - 1) {\\n      // Just store the leaf\\n      subRootQueue.levels[_level][n] = _leaf;\\n      subRootQueue.indices[_level]++;\\n    } else {\\n      // Hash the elements in this level and queue it in the next level\\n      uint256 hashed;\\n      if (isBinary) {\\n        uint256[2] memory inputs;\\n        inputs[0] = subRootQueue.levels[_level][0];\\n        inputs[1] = _leaf;\\n        hashed = hash2(inputs);\\n      } else {\\n        uint256[5] memory inputs;\\n        for (uint8 i = 0; i < n; i++) {\\n          inputs[i] = subRootQueue.levels[_level][i];\\n        }\\n        inputs[n] = _leaf;\\n        hashed = hash5(inputs);\\n      }\\n\\n      // TODO: change recursion to a while loop\\n      // Recurse\\n      delete subRootQueue.indices[_level];\\n      queueSubRoot(hashed, _level + 1, _maxDepth);\\n    }\\n  }\\n\\n  /// @notice Merge all subtrees to form a main tree with a desired depth.\\n  /// @param _depth The depth of the main tree. It must fit all the leaves or\\n  ///               this function will revert.\\n  /// @return root The root of the main tree.\\n  function merge(uint256 _depth) public onlyOwner returns (uint256 root) {\\n    // The tree depth must be more than 0\\n    if (_depth == 0) revert DepthCannotBeZero();\\n\\n    // Ensure that the subtrees have been merged\\n    if (!subTreesMerged) revert SubTreesNotMerged();\\n\\n    // Check the depth\\n    if (_depth > MAX_DEPTH) revert DepthTooLarge(_depth, MAX_DEPTH);\\n\\n    // Calculate the SRT depth\\n    uint256 srtDepth = subDepth;\\n    while (true) {\\n      if (hashLength ** srtDepth >= numLeaves) {\\n        break;\\n      }\\n      srtDepth++;\\n    }\\n\\n    if (_depth < srtDepth) revert DepthTooSmall(_depth, srtDepth);\\n\\n    // If the depth is the same as the SRT depth, just use the SRT root\\n    if (_depth == srtDepth) {\\n      mainRoots[_depth] = smallSRTroot;\\n      treeMerged = true;\\n      return smallSRTroot;\\n    } else {\\n      root = smallSRTroot;\\n\\n      // Calculate the main root\\n\\n      for (uint256 i = srtDepth; i < _depth; i++) {\\n        uint256 z = getZero(i);\\n\\n        if (isBinary) {\\n          uint256[2] memory inputs;\\n          inputs[0] = root;\\n          inputs[1] = z;\\n          root = hash2(inputs);\\n        } else {\\n          uint256[5] memory inputs;\\n          inputs[0] = root;\\n          inputs[1] = z;\\n          inputs[2] = z;\\n          inputs[3] = z;\\n          inputs[4] = z;\\n          root = hash5(inputs);\\n        }\\n      }\\n\\n      mainRoots[_depth] = root;\\n      treeMerged = true;\\n    }\\n  }\\n\\n  /// @notice Returns the subroot at the specified index. Reverts if the index refers\\n  /// to a subtree which has not been filled yet.\\n  /// @param _index The subroot index.\\n  /// @return subRoot The subroot at the specified index.\\n  function getSubRoot(uint256 _index) public view returns (uint256 subRoot) {\\n    if (currentSubtreeIndex <= _index) revert InvalidIndex(_index);\\n    subRoot = subRoots[_index];\\n  }\\n\\n  /// @notice Returns the subroot tree (SRT) root. Its value must first be computed\\n  /// using mergeSubRoots.\\n  /// @return smallSubTreeRoot The SRT root.\\n  function getSmallSRTroot() public view returns (uint256 smallSubTreeRoot) {\\n    if (!subTreesMerged) revert SubTreesNotMerged();\\n    smallSubTreeRoot = smallSRTroot;\\n  }\\n\\n  /// @notice Return the merged Merkle root of all the leaves at a desired depth.\\n  /// @dev merge() or merged(_depth) must be called first.\\n  /// @param _depth The depth of the main tree. It must first be computed\\n  ///               using mergeSubRoots() and merge().\\n  /// @return mainRoot The root of the main tree.\\n  function getMainRoot(uint256 _depth) public view returns (uint256 mainRoot) {\\n    if (hashLength ** _depth < numLeaves) revert DepthTooSmall(_depth, numLeaves);\\n\\n    mainRoot = mainRoots[_depth];\\n  }\\n\\n  /// @notice Get the next subroot index and the current subtree index.\\n  function getSrIndices() public view returns (uint256 next, uint256 current) {\\n    next = nextSubRootIndex;\\n    current = currentSubtreeIndex;\\n  }\\n}\\n\",\"keccak256\":\"0x1f37694c7dcac8552daf04d6561e46c48cbf7c53573032e387db09f3ef9ff0e7\",\"license\":\"MIT\"},\"contracts/maci-contracts/trees/AccQueueQuinary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { AccQueue } from \\\"./AccQueue.sol\\\";\\n\\n/// @title AccQueueQuinary\\n/// @notice This contract defines a Merkle tree where each leaf insertion only updates a\\n/// subtree. To obtain the main tree root, the contract owner must merge the\\n/// subtrees together. Merging subtrees requires at least 2 operations:\\n/// mergeSubRoots(), and merge(). To get around the gas limit,\\n/// the mergeSubRoots() can be performed in multiple transactions.\\n/// @dev This contract is for a quinary tree (5 leaves per node)\\nabstract contract AccQueueQuinary is AccQueue {\\n  /// @notice Create a new AccQueueQuinary instance\\n  constructor(uint256 _subDepth) AccQueue(_subDepth, 5) {}\\n\\n  /// @notice Hash the contents of the specified level and the specified leaf.\\n  /// @dev it also frees up storage slots to refund gas.\\n  /// @param _level The level to hash.\\n  /// @param _leaf The leaf include with the level.\\n  /// @return hashed The hash of the level and leaf.\\n  function hashLevel(uint256 _level, uint256 _leaf) internal override returns (uint256 hashed) {\\n    uint256[5] memory inputs;\\n    inputs[0] = leafQueue.levels[_level][0];\\n    inputs[1] = leafQueue.levels[_level][1];\\n    inputs[2] = leafQueue.levels[_level][2];\\n    inputs[3] = leafQueue.levels[_level][3];\\n    inputs[4] = _leaf;\\n    hashed = hash5(inputs);\\n\\n    // Free up storage slots to refund gas. Note that using a loop here\\n    // would result in lower gas savings.\\n    delete leafQueue.levels[_level];\\n  }\\n\\n  /// @notice Hash the contents of the specified level and the specified leaf.\\n  /// @param _level The level to hash.\\n  /// @param _leaf The leaf include with the level.\\n  /// @return hashed The hash of the level and leaf.\\n  function hashLevelLeaf(uint256 _level, uint256 _leaf) public view override returns (uint256 hashed) {\\n    uint256[5] memory inputs;\\n    inputs[0] = leafQueue.levels[_level][0];\\n    inputs[1] = leafQueue.levels[_level][1];\\n    inputs[2] = leafQueue.levels[_level][2];\\n    inputs[3] = leafQueue.levels[_level][3];\\n    inputs[4] = _leaf;\\n    hashed = hash5(inputs);\\n  }\\n\\n  /// @notice An internal function which fills a subtree\\n  /// @param _level The level at which to fill the subtree\\n  function _fill(uint256 _level) internal override {\\n    while (_level < subDepth) {\\n      uint256 n = leafQueue.indices[_level];\\n\\n      if (n != 0) {\\n        // Fill the subtree level with zeros and hash the level\\n        uint256 hashed;\\n\\n        uint256[5] memory inputs;\\n        uint256 z = getZero(_level);\\n        uint8 i = 0;\\n        for (; i < n; i++) {\\n          inputs[i] = leafQueue.levels[_level][i];\\n        }\\n\\n        for (; i < hashLength; i++) {\\n          inputs[i] = z;\\n        }\\n        hashed = hash5(inputs);\\n\\n        // Update the subtree from the next level onwards with the new leaf\\n        _enqueue(hashed, _level + 1);\\n      }\\n\\n      // Reset the current level\\n      delete leafQueue.indices[_level];\\n\\n      _level++;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x41190de249b6964a2c95138c278da46a7e64ecd99d1b0204ab5ee688ab793418\",\"license\":\"MIT\"},\"contracts/maci-contracts/trees/AccQueueQuinaryBlankSl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { MerkleZeros as MerkleQuinaryBlankSl } from \\\"./zeros/MerkleQuinaryBlankSl.sol\\\";\\nimport { AccQueueQuinary } from \\\"./AccQueueQuinary.sol\\\";\\n\\n/// @title AccQueueQuinaryBlankSl\\n/// @notice This contract extends AccQueueQuinary and MerkleQuinaryBlankSl\\n/// @dev This contract is used for creating a\\n/// Merkle tree with quinary (5 leaves per node) structure\\ncontract AccQueueQuinaryBlankSl is AccQueueQuinary, MerkleQuinaryBlankSl {\\n  /// @notice Constructor for creating AccQueueQuinaryBlankSl contract\\n  /// @param _subDepth The depth of each subtree\\n  constructor(uint256 _subDepth) AccQueueQuinary(_subDepth) {}\\n\\n  /// @notice Returns the zero leaf at a specified level\\n  /// @param _level The level at which to return the zero leaf\\n  /// @return zero The zero leaf at the specified level\\n  function getZero(uint256 _level) internal view override returns (uint256 zero) {\\n    zero = zeros[_level];\\n  }\\n}\\n\",\"keccak256\":\"0x6c9de13993738eed3ee9b2a13cb896536b7d0c12aa26f7c9a0bc9d8a60ab70af\",\"license\":\"MIT\"},\"contracts/maci-contracts/trees/zeros/MerkleQuinaryBlankSl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nabstract contract MerkleZeros {\\n  uint256[33] internal zeros;\\n\\n  // Quinary tree zeros (hash of a blank state leaf)\\n  constructor() {\\n    zeros[0] = uint256(6769006970205099520508948723718471724660867171122235270773600567925038008762);\\n    zeros[1] = uint256(1817443256073160983037956906834195537015546107754139333779374752610409243040);\\n    zeros[2] = uint256(5025334324706345710800763986625066818722194863275454698142520938431664775139);\\n    zeros[3] = uint256(14192954438167108345302805021925904074255585459982294518284934685870159779036);\\n    zeros[4] = uint256(20187882570958996766847085412101405873580281668670041750401431925441526137696);\\n    zeros[5] = uint256(19003337309269317766726592380821628773167513668895143249995308839385810331053);\\n    zeros[6] = uint256(8492845964288036916491732908697290386617362835683911619537012952509890847451);\\n    zeros[7] = uint256(21317322053785868903775560086424946986124609731059541056518805391492871868814);\\n    zeros[8] = uint256(4256218134522031233385262696416028085306220785615095518146227774336224649500);\\n    zeros[9] = uint256(20901832483812704342876390942522900825096860186886589193649848721504734341597);\\n    zeros[10] = uint256(9267454486648593048583319961333207622177969074484816717792204743506543655505);\\n    zeros[11] = uint256(7650747654726613674993974917452464536868175649563857452207429547024788245109);\\n    zeros[12] = uint256(12795449162487060618571749226308575208199045387848354123797521555997299022426);\\n    zeros[13] = uint256(2618557044910497521493457299926978327841926538380467450910611798747947773417);\\n    zeros[14] = uint256(4921285654960018268026585535199462620025474147042548993648101553653712920841);\\n    zeros[15] = uint256(3955171118947393404895230582611078362154691627898437205118006583966987624963);\\n    zeros[16] = uint256(14699122743207261418107167543163571550551347592030521489185842204376855027947);\\n    zeros[17] = uint256(19194001556311522650950142975587831061973644651464593103195262630226529549573);\\n    zeros[18] = uint256(6797319293744791648201295415173228627305696583566554220235084234134847845566);\\n    zeros[19] = uint256(1267384159070923114421683251804507954363252272096341442482679590950570779538);\\n    zeros[20] = uint256(3856223245980092789300785214737986268213218594679123772901587106666007826613);\\n    zeros[21] = uint256(18676489457897260843888223351978541467312325190019940958023830749320128516742);\\n    zeros[22] = uint256(1264182110328471160091364892521750324454825019784514769029658712768604765832);\\n    zeros[23] = uint256(2656996430278859489720531694992812241970377217691981498421470018287262214836);\\n    zeros[24] = uint256(18383091906017498328025573868990834275527351249551450291689105976789994000945);\\n    zeros[25] = uint256(13529005048172217954112431586843818755284974925259175262114689118374272942448);\\n    zeros[26] = uint256(12992932230018177961399273443546858115054107741258772159002781102941121463198);\\n    zeros[27] = uint256(2863122912185356538647249583178796893334871904920344676880115119793539219810);\\n    zeros[28] = uint256(21225940722224750787686036600289689346822264717843340643526494987845938066724);\\n    zeros[29] = uint256(10287710058152238258370855601473179390407624438853416678054122418589867334291);\\n    zeros[30] = uint256(19473882726731003241332772446613588021823731071450664115530121948154136765165);\\n    zeros[31] = uint256(5317840242664832852914696563734700089268851122527105938301831862363938018455);\\n    zeros[32] = uint256(16560004488485252485490851383643926099553282582813695748927880827248594395952);\\n  }\\n}\\n\",\"keccak256\":\"0x7cb041ca0192fe5740dcd396c4d106c96469bf9ff3a4d0b568da110a8e41c254\",\"license\":\"MIT\"},\"contracts/maci-contracts/utilities/DomainObjs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @title DomainObjs\\n/// @notice An utility contract that holds\\n/// a number of domain objects and functions\\ncontract DomainObjs {\\n  /// @notice the length of a MACI message\\n  uint8 public constant MESSAGE_DATA_LENGTH = 10;\\n\\n  /// @title Message\\n  /// @notice this struct represents a MACI message\\n  /// @dev msgType: 1 for vote message, 2 for topup message (size 2)\\n  struct Message {\\n    uint256 msgType;\\n    uint256[MESSAGE_DATA_LENGTH] data;\\n  }\\n\\n  /// @title PubKey\\n  /// @notice A MACI public key\\n  struct PubKey {\\n    uint256 x;\\n    uint256 y;\\n  }\\n\\n  /// @title StateLeaf\\n  /// @notice A MACI state leaf\\n  /// @dev used to represent a user's state\\n  /// in the state Merkle tree\\n  struct StateLeaf {\\n    PubKey pubKey;\\n    uint256 voiceCreditBalance;\\n    uint256 timestamp;\\n  }\\n}\\n\",\"keccak256\":\"0x2d6a390a36a2e95985959cd1ef5b896c6dfedad01c09154674b2ff48e54785bb\",\"license\":\"MIT\"},\"contracts/maci-contracts/utilities/Params.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { IMACI } from \\\"../interfaces/IMACI.sol\\\";\\nimport { AccQueue } from \\\"../trees/AccQueue.sol\\\";\\nimport { TopupCredit } from \\\"../TopupCredit.sol\\\";\\n\\n/// @title Params\\n/// @notice This contracts contains a number of structures\\n/// which are to be passed as parameters to Poll contracts.\\n/// This way we can reduce the number of parameters\\n/// and avoid a stack too deep error during compilation.\\ncontract Params {\\n  /// @notice A struct holding the depths of the merkle trees\\n  struct TreeDepths {\\n    uint8 intStateTreeDepth;\\n    uint8 messageTreeSubDepth;\\n    uint8 messageTreeDepth;\\n    uint8 voteOptionTreeDepth;\\n  }\\n\\n  /// @notice A struct holding the max values for the poll\\n  struct MaxValues {\\n    uint256 maxMessages;\\n    uint256 maxVoteOptions;\\n  }\\n\\n  /// @notice A struct holding the external contracts\\n  /// that are to be passed to a Poll contract on\\n  /// deployment\\n  struct ExtContracts {\\n    IMACI maci;\\n    AccQueue messageAq;\\n    TopupCredit topupCredit;\\n  }\\n}\\n\",\"keccak256\":\"0x10c725c49e9193b7641574733666e231886e2ccc301c755e1dd9567aff7c5c9c\",\"license\":\"MIT\"},\"contracts/maci-contracts/utilities/Utilities.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\nimport { DomainObjs } from \\\"./DomainObjs.sol\\\";\\nimport { Hasher } from \\\"../crypto/Hasher.sol\\\";\\nimport { SnarkConstants } from \\\"../crypto/SnarkConstants.sol\\\";\\n\\n/// @title Utilities\\n/// @notice An utility contract that can be used to:\\n/// * hash a state leaf\\n/// * pad and hash a MACI message\\n/// * hash a MACI message and an encryption public key\\ncontract Utilities is SnarkConstants, DomainObjs, Hasher {\\n  /// @notice custom errors\\n  error InvalidMessage();\\n\\n  /// @notice An utility function used to hash a state leaf\\n  /// @param _stateLeaf the state leaf to be hashed\\n  /// @return ciphertext The hash of the state leaf\\n  function hashStateLeaf(StateLeaf memory _stateLeaf) public pure returns (uint256 ciphertext) {\\n    uint256[4] memory plaintext;\\n    plaintext[0] = _stateLeaf.pubKey.x;\\n    plaintext[1] = _stateLeaf.pubKey.y;\\n    plaintext[2] = _stateLeaf.voiceCreditBalance;\\n    plaintext[3] = _stateLeaf.timestamp;\\n\\n    ciphertext = hash4(plaintext);\\n  }\\n\\n  /// @notice An utility function used to pad and hash a MACI message\\n  /// @param dataToPad the data to be padded\\n  /// @param msgType the type of the message\\n  /// @return message The padded message\\n  /// @return padKey The padding public key\\n  /// @return msgHash The hash of the padded message and encryption key\\n  function padAndHashMessage(\\n    uint256[2] memory dataToPad,\\n    uint256 msgType\\n  ) public pure returns (Message memory message, PubKey memory padKey, uint256 msgHash) {\\n    // add data and pad it to 10 elements (automatically cause it's the default value)\\n    uint256[10] memory dat;\\n    dat[0] = dataToPad[0];\\n    dat[1] = dataToPad[1];\\n\\n    padKey = PubKey(PAD_PUBKEY_X, PAD_PUBKEY_Y);\\n    message = Message({ msgType: msgType, data: dat });\\n    msgHash = hashMessageAndEncPubKey(message, padKey);\\n  }\\n\\n  /// @notice An utility function used to hash a MACI message and an encryption public key\\n  /// @param _message the message to be hashed\\n  /// @param _encPubKey the encryption public key to be hashed\\n  /// @return msgHash The hash of the message and the encryption public key\\n  function hashMessageAndEncPubKey(\\n    Message memory _message,\\n    PubKey memory _encPubKey\\n  ) public pure returns (uint256 msgHash) {\\n    if (_message.data.length != 10) {\\n      revert InvalidMessage();\\n    }\\n\\n    uint256[5] memory n;\\n    n[0] = _message.data[0];\\n    n[1] = _message.data[1];\\n    n[2] = _message.data[2];\\n    n[3] = _message.data[3];\\n    n[4] = _message.data[4];\\n\\n    uint256[5] memory m;\\n    m[0] = _message.data[5];\\n    m[1] = _message.data[6];\\n    m[2] = _message.data[7];\\n    m[3] = _message.data[8];\\n    m[4] = _message.data[9];\\n\\n    msgHash = hash5([_message.msgType, hash5(n), hash5(m), _encPubKey.x, _encPubKey.y]);\\n  }\\n}\\n\",\"keccak256\":\"0x6dabe0385409cf4dc4a22b80b7483c26d016c4173e5f62930e06085f02d91c09\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346100a157601f611abb38819003918201601f19168301916001600160401b038311848410176100a65780849260409485528339810103126100a15780516001600160a01b03811691908290036100a15760200151908115158092036100a157600380546001600160a01b0319169190911790556008805460ff60a81b191660a89290921b60ff60a81b169190911790556040516119fe90816100bd8239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604052600436101561001257600080fd5b60003560e01c80631096c30e1461108b57806313fb8932146110625780631b6ef3c514610fd55780632b7ac3f314610fac57806331e766a514610f875780633364c4c814610deb57806334a0922c14610dc2578063649d198414610d84578063683f3dc314610d6857806385e82f301461033e5780638da5cb5b14610311578063a2eeeb2f146102f3578063a5a31c08146102cd578063ac98e5df1461028b578063b95e1d25146100f75763faacdaa6146100cc57600080fd5b346100f25760003660031901126100f257602060ff60085460a01c166040519015158152f35b600080fd5b346100f257366003190161012081126100f2576080136100f2576040516001600160401b039060808101828111828210176102755760405260043560ff811681036100f25781526024359160ff831683036100f257602082019283526044359260ff841684036100f257604083019384526064359160ff831683036100f2576060840192835260403660831901126100f25760405190604082019082821090821117610275576040526084358152602081019160a435835260c4359360018060a01b03968786168096036100f25760e435968888168098036100f2576101043598891515809a036100f25761ff00916101fc60ff926101f4611310565b16331461137e565b511663ff00000062ff00006004549651945160101b16945160181b169463ffffffff1916179160081b1617171760045551600555516006556bffffffffffffffffffffffff60a01b60075416176007556008549160ff60a01b9060a01b16916affffffffffffffffffffff60a81b161717600855600080f35b634e487b7160e01b600052604160045260246000fd5b346100f25760003660031901126100f257608060045460ff604051918181168352818160081c166020840152818160101c16604084015260181c166060820152f35b346100f25760003660031901126100f257602060ff60085460a81c166040519015158152f35b346100f25760003660031901126100f2576020600254604051908152f35b346100f25760003660031901126100f257602061032c611310565b6040516001600160a01b039091168152f35b346100f25760803660031901126100f2576004356001600160401b0381116100f25761036e90369060040161125c565b6001600160401b03602435116100f2573660236024350112156100f2576001600160401b0360243560040135116100f25736602480356004013560051b81350101116100f257604435906001600160401b0382116100f2576103d660ff92369060040161125c565b92906103eb6001600160a01b036101f4611310565b606060018060a01b036003541661014460018060a01b03600754166000600854936040519788958694630a48e77560e41b86526064356004870152826004548181166024890152818160081c166044890152818160101c16606489015260181c16608487015260055460a487015260065460c487015260e486015260018060a01b03811661010486015260a81c1615156101248401525af1918215610cf157600092610cfd575b50604051936020808601526104c7856104b9604082016024356004013560248035016113f5565b03601f1981018752866112db565b6104d36064354261147e565b956104df6002546114a1565b948560025560018060a01b0385511660005260016020528560406000205560018060a01b036003541696602060018060a01b038751166024604051809b81936323723fcd60e11b835260048301525afa978815610cf157600098610cbd575b506040519061054c826112a4565b8782528860208301526105603684866114b0565b604083015260608201526105753685876114b0565b60808201528560a08201524260c08201528860e0820152602435600401356101008201526105a8602435600401356114f6565b6105b560405191826112db565b602480356004810135835201602082015b602480356004013560051b813501018210610c7b5750506101208201526040516105ef816112c0565b60008152610140820152866000526000602052604060002090805182556020810151600183015560408101518051906001600160401b0382116102755781906106488261063f600288015461150d565b6002880161155e565b602090601f8311600114610c0957600092610bfe575b50508160011b916000199060031b1c19161760028301555b60608101518051906001600160401b0382116102755781906106a88261069f600388015461150d565b6003880161155e565b602090601f8311600114610b8c57600092610b81575b50508160011b916000199060031b1c19161760038301555b60808101518051906001600160401b038211610275578190610708826106ff600488015461150d565b6004880161155e565b602090601f8311600114610b0f57600092610b04575b50508160011b916000199060031b1c19161760048301555b60a081015180516005840180546001600160a01b03199081166001600160a01b039384161790915560208301516006860180548316918416919091179055604090920151600785018054909316911617905560c0810151600883015560e08101516009830155610100810151600a83015561012081015180519068010000000000000000821161027557600b84015482600b860155808310610a8c575b5060200190600b84016000526020600020916000905b8282106109a9575050505061014001518051906001600160401b038211610275576108248261081b600c86015461150d565b600c860161155e565b602090601f831160011461090957936108dc93600c846108c3957f6f1981bad6f26572f46fadaf2046377f55be191178ad16561cf7e75968f4d2089c9b99956108ea9b996000926108fe575b50508160011b916000199060031b1c1916179101555b6040805189516001600160a01b0390811682526020808c0151821690830152998201519099169089015261010060608901526101008801916113d4565b85810360808701526024356004013560248035016113f5565b9184830360a08601526113d4565b944260c083015260e08201528033950390a4005b015190503880610870565b90600c840160005260206000209160005b601f1985168110610991575093600c6001857f6f1981bad6f26572f46fadaf2046377f55be191178ad16561cf7e75968f4d2089c9b99956108ea9b99956108dc996108c399601f19811610610978575b505050811b01910155610886565b015160001960f88460031b161c1916905538808061096a565b9192602060018192868501518155019401920161091a565b80518051906001600160401b038211610275576109d0826109ca885461150d565b8861155e565b602090601f8311600114610a1c579282600194936020938695600092610a11575b5050600019600383901b1c191690841b1787555b019401910190926107e9565b0151905038806109f1565b908660005260206000209160005b601f1985168110610a74575083602093600196938796938794601f19811610610a5b575b505050811b018755610a05565b015160001960f88460031b161c19169055388080610a4e565b91926020600181928685015181550194019201610a2a565b600b85016000526020600020908382015b8183018110610aad5750506107d3565b80610aba6001925461150d565b80610ac7575b5001610a9d565b601f81118314610add5750600081555b38610ac0565b600090828252610afb601f60208420920160051c8201858301611547565b81835555610ad7565b015190508c8061071e565b9250600485016000526020600020906000935b601f1984168510610b66576001945083601f19811610610b4d575b505050811b016004830155610736565b015160001960f88460031b161c191690558c8080610b3d565b81810151835560209485019460019093019290910190610b22565b015190508c806106be565b9250600385016000526020600020906000935b601f1984168510610be3576001945083601f19811610610bca575b505050811b0160038301556106d6565b015160001960f88460031b161c191690558c8080610bba565b81810151835560209485019460019093019290910190610b9f565b015190508c8061065e565b9250600285016000526020600020906000935b601f1984168510610c60576001945083601f19811610610c47575b505050811b016002830155610676565b015160001960f88460031b161c191690558c8080610c37565b81810151835560209485019460019093019290910190610c1c565b81356001600160401b0381116100f25760243501366043820112156100f257602091610cb2839236906044602482013591016114b0565b8152019101906105c6565b9097506020813d602011610ce9575b81610cd9602093836112db565b810103126100f25751968961053e565b3d9150610ccc565b6040513d6000823e3d90fd5b9091506060813d606011610d60575b81610d19606093836112db565b810103126100f257610d546040805192610d3284611289565b610d3b816112fc565b8452610d49602082016112fc565b6020850152016112fc565b60408201529085610492565b3d9150610d0c565b346100f25760003660031901126100f2576020604051600a8152f35b346100f25760203660031901126100f2576004356001600160a01b038116908190036100f25760005260016020526020604060002054604051908152f35b346100f25760003660031901126100f2576003546040516001600160a01b039091168152602090f35b346100f25760403660031901126100f2576001600160401b036004356024358281116100f257610e1f90369060040161125c565b9092610e346001600160a01b036101f4611310565b60025483111580610f7e575b610e49906115a5565b8260005260209060008252604060002090600c820190841161027557610e7984610e73835461150d565b8361155e565b6000601f8511600114610ef157849392610ee1927f598a224e6d3d815eb873e74dbb8aed119cdbe9fe282b7ca3e28cd41a120d782b96600193600091610ee6575b50600019600388901b1c191686841b1790555b0154956040519383859485528401916113d4565b0390a3005b90508901358a610eba565b601f1985169082600052846000209160005b818110610f67575092600192879695927f598a224e6d3d815eb873e74dbb8aed119cdbe9fe282b7ca3e28cd41a120d782b98610ee19610610f4d575b50508286811b019055610ecd565b8a0135600019600389901b60f8161c191690558980610f3f565b91928660018192868d013581550194019201610f03565b50821515610e40565b346100f25760003660031901126100f257604060055460065482519182526020820152f35b346100f25760003660031901126100f2576007546040516001600160a01b039091168152602090f35b346100f25760603660031901126100f25760443580151581036100f25761100190602435600435611870565b60405160209182820192808352815180945260408301938160408260051b8601019301916000955b8287106110365785850386f35b909192938280611052600193603f198a82030186528851611136565b9601920196019592919092611029565b346100f25760003660031901126100f2576008546040516001600160a01b039091168152602090f35b346100f25760203660031901126100f2576004356110a76115f4565b50600254811115806110ed575b6110bd906115a5565b60005260006020526110e96110d56040600020611722565b604051918291602083526020830190611136565b0390f35b508015156110b4565b919082519283825260005b848110611122575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201611101565b919082518152602090818401518282015261118a61117861116660408701516101a08060408701528501906110f6565b606087015184820360608601526110f6565b608086015183820360808501526110f6565b60a08086015180516001600160a01b03908116928501929092526020810151821660c0850152604001511660e08301529360c081015190610100918284015260e08101519161012092838501528101519161014092838501528101519383870361016085015284518088528188019180808360051b8b01019701926000905b83821061122f57505050505061122c9495500151906101808184039101526110f6565b90565b9091929397838061124d6001938e601f199082030186528c516110f6565b9a019201920190939291611209565b9181601f840112156100f2578235916001600160401b0383116100f257602083818601950101116100f257565b606081019081106001600160401b0382111761027557604052565b61016081019081106001600160401b0382111761027557604052565b602081019081106001600160401b0382111761027557604052565b90601f801991011681019081106001600160401b0382111761027557604052565b51906001600160a01b03821682036100f257565b600354604051638da5cb5b60e01b815290602090829060049082906001600160a01b03165afa908115610cf157600091611348575090565b906020823d8211611376575b81611361602093836112db565b81010312611373575061122c906112fc565b80fd5b3d9150611354565b1561138557565b60405162461bcd60e51b815260206004820152602160248201527f6f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f6044820152603760f91b6064820152608490fd5b908060209392818452848401376000828201840152601f01601f1916010190565b9082818152602080910193818360051b82010194846000925b85841061141f575050505050505090565b90919293949596601f198282030184528735601e19843603018112156100f25783018681019190356001600160401b0381116100f25780360383136100f25761146d889283926001956113d4565b99019401940192959493919061140e565b9190820180921161148b57565b634e487b7160e01b600052601160045260246000fd5b600019811461148b5760010190565b9291926001600160401b03821161027557604051916114d9601f8201601f1916602001846112db565b8294818452818301116100f2578281602093846000960137010152565b6001600160401b0381116102755760051b60200190565b90600182811c9216801561153d575b602083101461152757565b634e487b7160e01b600052602260045260246000fd5b91607f169161151c565b818110611552575050565b60008155600101611547565b9190601f811161156d57505050565b611599926000526020600020906020601f840160051c8301931061159b575b601f0160051c0190611547565b565b909150819061158c565b156115ac57565b60405162461bcd60e51b81526020600482015260136024820152721c1bdb1b08191bd95cc81b9bdd08195e1a5cdd606a1b6044820152606490fd5b9190820391821161148b57565b60405190611601826112a4565b81610140600091828152826020820152606092836040830152838083015283608083015260405161163181611289565b81815281602082015281604082015260a08301528060c08301528060e0830152610100820152826101208201520152565b80518210156116765760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b906000929180549161169d8361150d565b9182825260019384811690816000146116ff57506001146116bf575b50505050565b90919394506000526020928360002092846000945b8386106116eb5750505050010190388080806116b9565b8054858701830152940193859082016116d4565b9294505050602093945060ff191683830152151560051b010190388080806116b9565b90604091825190611732826112a4565b8193815483526001808301549060209182860152825161176081611759816002890161168c565b03826112db565b83860152825161177781611759816003890161168c565b6060860152825161178f81611759816004890161168c565b6080860152825161179f81611289565b60058501546001600160a01b03908116825260068601548116848301526007860154168482015260a0860152600884015460c0860152600984015460e0860152600a840154610100860152600b84018054906117fa826114f6565b93611807865195866112db565b82855260009182528082208186015b84841061184e5750505050505061014092611843859361184a93610120600c98015251809681930161168c565b03846112db565b0152565b858381928a5161186281611759818961168c565b815201920193019290611816565b6000199392848201929091831161148b578083029280840482149015171561148b5760019081840180941161148b576118a9908461147e565b94850194851161148b5784916002548096116119c0575b8584116119a7576118d184846115e7565b9082820180921161148b576118e5826114f6565b926040926118f5845195866112db565b808552611904601f19916114f6565b0160005b81811061199057505083976000965b86811115611929575050505050505050565b808415611974575b9061196f9160005260006020526119698660002099611958611952826114a1565b9b611722565b611962828b611662565b5288611662565b506114a1565b611917565b5061197f81836115e7565b9083820180921161148b5790611931565b60209061199b6115f4565b82828901015201611908565b5050505090506040516119b9816112c0565b6000815290565b8592506118c056fea26469706673582212204774dd893d8657b2f0ded458b7e40255ed40ab6f5ce443a7bbbfb87e37d6d98d64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c80631096c30e1461108b57806313fb8932146110625780631b6ef3c514610fd55780632b7ac3f314610fac57806331e766a514610f875780633364c4c814610deb57806334a0922c14610dc2578063649d198414610d84578063683f3dc314610d6857806385e82f301461033e5780638da5cb5b14610311578063a2eeeb2f146102f3578063a5a31c08146102cd578063ac98e5df1461028b578063b95e1d25146100f75763faacdaa6146100cc57600080fd5b346100f25760003660031901126100f257602060ff60085460a01c166040519015158152f35b600080fd5b346100f257366003190161012081126100f2576080136100f2576040516001600160401b039060808101828111828210176102755760405260043560ff811681036100f25781526024359160ff831683036100f257602082019283526044359260ff841684036100f257604083019384526064359160ff831683036100f2576060840192835260403660831901126100f25760405190604082019082821090821117610275576040526084358152602081019160a435835260c4359360018060a01b03968786168096036100f25760e435968888168098036100f2576101043598891515809a036100f25761ff00916101fc60ff926101f4611310565b16331461137e565b511663ff00000062ff00006004549651945160101b16945160181b169463ffffffff1916179160081b1617171760045551600555516006556bffffffffffffffffffffffff60a01b60075416176007556008549160ff60a01b9060a01b16916affffffffffffffffffffff60a81b161717600855600080f35b634e487b7160e01b600052604160045260246000fd5b346100f25760003660031901126100f257608060045460ff604051918181168352818160081c166020840152818160101c16604084015260181c166060820152f35b346100f25760003660031901126100f257602060ff60085460a81c166040519015158152f35b346100f25760003660031901126100f2576020600254604051908152f35b346100f25760003660031901126100f257602061032c611310565b6040516001600160a01b039091168152f35b346100f25760803660031901126100f2576004356001600160401b0381116100f25761036e90369060040161125c565b6001600160401b03602435116100f2573660236024350112156100f2576001600160401b0360243560040135116100f25736602480356004013560051b81350101116100f257604435906001600160401b0382116100f2576103d660ff92369060040161125c565b92906103eb6001600160a01b036101f4611310565b606060018060a01b036003541661014460018060a01b03600754166000600854936040519788958694630a48e77560e41b86526064356004870152826004548181166024890152818160081c166044890152818160101c16606489015260181c16608487015260055460a487015260065460c487015260e486015260018060a01b03811661010486015260a81c1615156101248401525af1918215610cf157600092610cfd575b50604051936020808601526104c7856104b9604082016024356004013560248035016113f5565b03601f1981018752866112db565b6104d36064354261147e565b956104df6002546114a1565b948560025560018060a01b0385511660005260016020528560406000205560018060a01b036003541696602060018060a01b038751166024604051809b81936323723fcd60e11b835260048301525afa978815610cf157600098610cbd575b506040519061054c826112a4565b8782528860208301526105603684866114b0565b604083015260608201526105753685876114b0565b60808201528560a08201524260c08201528860e0820152602435600401356101008201526105a8602435600401356114f6565b6105b560405191826112db565b602480356004810135835201602082015b602480356004013560051b813501018210610c7b5750506101208201526040516105ef816112c0565b60008152610140820152866000526000602052604060002090805182556020810151600183015560408101518051906001600160401b0382116102755781906106488261063f600288015461150d565b6002880161155e565b602090601f8311600114610c0957600092610bfe575b50508160011b916000199060031b1c19161760028301555b60608101518051906001600160401b0382116102755781906106a88261069f600388015461150d565b6003880161155e565b602090601f8311600114610b8c57600092610b81575b50508160011b916000199060031b1c19161760038301555b60808101518051906001600160401b038211610275578190610708826106ff600488015461150d565b6004880161155e565b602090601f8311600114610b0f57600092610b04575b50508160011b916000199060031b1c19161760048301555b60a081015180516005840180546001600160a01b03199081166001600160a01b039384161790915560208301516006860180548316918416919091179055604090920151600785018054909316911617905560c0810151600883015560e08101516009830155610100810151600a83015561012081015180519068010000000000000000821161027557600b84015482600b860155808310610a8c575b5060200190600b84016000526020600020916000905b8282106109a9575050505061014001518051906001600160401b038211610275576108248261081b600c86015461150d565b600c860161155e565b602090601f831160011461090957936108dc93600c846108c3957f6f1981bad6f26572f46fadaf2046377f55be191178ad16561cf7e75968f4d2089c9b99956108ea9b996000926108fe575b50508160011b916000199060031b1c1916179101555b6040805189516001600160a01b0390811682526020808c0151821690830152998201519099169089015261010060608901526101008801916113d4565b85810360808701526024356004013560248035016113f5565b9184830360a08601526113d4565b944260c083015260e08201528033950390a4005b015190503880610870565b90600c840160005260206000209160005b601f1985168110610991575093600c6001857f6f1981bad6f26572f46fadaf2046377f55be191178ad16561cf7e75968f4d2089c9b99956108ea9b99956108dc996108c399601f19811610610978575b505050811b01910155610886565b015160001960f88460031b161c1916905538808061096a565b9192602060018192868501518155019401920161091a565b80518051906001600160401b038211610275576109d0826109ca885461150d565b8861155e565b602090601f8311600114610a1c579282600194936020938695600092610a11575b5050600019600383901b1c191690841b1787555b019401910190926107e9565b0151905038806109f1565b908660005260206000209160005b601f1985168110610a74575083602093600196938796938794601f19811610610a5b575b505050811b018755610a05565b015160001960f88460031b161c19169055388080610a4e565b91926020600181928685015181550194019201610a2a565b600b85016000526020600020908382015b8183018110610aad5750506107d3565b80610aba6001925461150d565b80610ac7575b5001610a9d565b601f81118314610add5750600081555b38610ac0565b600090828252610afb601f60208420920160051c8201858301611547565b81835555610ad7565b015190508c8061071e565b9250600485016000526020600020906000935b601f1984168510610b66576001945083601f19811610610b4d575b505050811b016004830155610736565b015160001960f88460031b161c191690558c8080610b3d565b81810151835560209485019460019093019290910190610b22565b015190508c806106be565b9250600385016000526020600020906000935b601f1984168510610be3576001945083601f19811610610bca575b505050811b0160038301556106d6565b015160001960f88460031b161c191690558c8080610bba565b81810151835560209485019460019093019290910190610b9f565b015190508c8061065e565b9250600285016000526020600020906000935b601f1984168510610c60576001945083601f19811610610c47575b505050811b016002830155610676565b015160001960f88460031b161c191690558c8080610c37565b81810151835560209485019460019093019290910190610c1c565b81356001600160401b0381116100f25760243501366043820112156100f257602091610cb2839236906044602482013591016114b0565b8152019101906105c6565b9097506020813d602011610ce9575b81610cd9602093836112db565b810103126100f25751968961053e565b3d9150610ccc565b6040513d6000823e3d90fd5b9091506060813d606011610d60575b81610d19606093836112db565b810103126100f257610d546040805192610d3284611289565b610d3b816112fc565b8452610d49602082016112fc565b6020850152016112fc565b60408201529085610492565b3d9150610d0c565b346100f25760003660031901126100f2576020604051600a8152f35b346100f25760203660031901126100f2576004356001600160a01b038116908190036100f25760005260016020526020604060002054604051908152f35b346100f25760003660031901126100f2576003546040516001600160a01b039091168152602090f35b346100f25760403660031901126100f2576001600160401b036004356024358281116100f257610e1f90369060040161125c565b9092610e346001600160a01b036101f4611310565b60025483111580610f7e575b610e49906115a5565b8260005260209060008252604060002090600c820190841161027557610e7984610e73835461150d565b8361155e565b6000601f8511600114610ef157849392610ee1927f598a224e6d3d815eb873e74dbb8aed119cdbe9fe282b7ca3e28cd41a120d782b96600193600091610ee6575b50600019600388901b1c191686841b1790555b0154956040519383859485528401916113d4565b0390a3005b90508901358a610eba565b601f1985169082600052846000209160005b818110610f67575092600192879695927f598a224e6d3d815eb873e74dbb8aed119cdbe9fe282b7ca3e28cd41a120d782b98610ee19610610f4d575b50508286811b019055610ecd565b8a0135600019600389901b60f8161c191690558980610f3f565b91928660018192868d013581550194019201610f03565b50821515610e40565b346100f25760003660031901126100f257604060055460065482519182526020820152f35b346100f25760003660031901126100f2576007546040516001600160a01b039091168152602090f35b346100f25760603660031901126100f25760443580151581036100f25761100190602435600435611870565b60405160209182820192808352815180945260408301938160408260051b8601019301916000955b8287106110365785850386f35b909192938280611052600193603f198a82030186528851611136565b9601920196019592919092611029565b346100f25760003660031901126100f2576008546040516001600160a01b039091168152602090f35b346100f25760203660031901126100f2576004356110a76115f4565b50600254811115806110ed575b6110bd906115a5565b60005260006020526110e96110d56040600020611722565b604051918291602083526020830190611136565b0390f35b508015156110b4565b919082519283825260005b848110611122575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201611101565b919082518152602090818401518282015261118a61117861116660408701516101a08060408701528501906110f6565b606087015184820360608601526110f6565b608086015183820360808501526110f6565b60a08086015180516001600160a01b03908116928501929092526020810151821660c0850152604001511660e08301529360c081015190610100918284015260e08101519161012092838501528101519161014092838501528101519383870361016085015284518088528188019180808360051b8b01019701926000905b83821061122f57505050505061122c9495500151906101808184039101526110f6565b90565b9091929397838061124d6001938e601f199082030186528c516110f6565b9a019201920190939291611209565b9181601f840112156100f2578235916001600160401b0383116100f257602083818601950101116100f257565b606081019081106001600160401b0382111761027557604052565b61016081019081106001600160401b0382111761027557604052565b602081019081106001600160401b0382111761027557604052565b90601f801991011681019081106001600160401b0382111761027557604052565b51906001600160a01b03821682036100f257565b600354604051638da5cb5b60e01b815290602090829060049082906001600160a01b03165afa908115610cf157600091611348575090565b906020823d8211611376575b81611361602093836112db565b81010312611373575061122c906112fc565b80fd5b3d9150611354565b1561138557565b60405162461bcd60e51b815260206004820152602160248201527f6f6e6c79206f776e65722063616e2063616c6c20746869732066756e6374696f6044820152603760f91b6064820152608490fd5b908060209392818452848401376000828201840152601f01601f1916010190565b9082818152602080910193818360051b82010194846000925b85841061141f575050505050505090565b90919293949596601f198282030184528735601e19843603018112156100f25783018681019190356001600160401b0381116100f25780360383136100f25761146d889283926001956113d4565b99019401940192959493919061140e565b9190820180921161148b57565b634e487b7160e01b600052601160045260246000fd5b600019811461148b5760010190565b9291926001600160401b03821161027557604051916114d9601f8201601f1916602001846112db565b8294818452818301116100f2578281602093846000960137010152565b6001600160401b0381116102755760051b60200190565b90600182811c9216801561153d575b602083101461152757565b634e487b7160e01b600052602260045260246000fd5b91607f169161151c565b818110611552575050565b60008155600101611547565b9190601f811161156d57505050565b611599926000526020600020906020601f840160051c8301931061159b575b601f0160051c0190611547565b565b909150819061158c565b156115ac57565b60405162461bcd60e51b81526020600482015260136024820152721c1bdb1b08191bd95cc81b9bdd08195e1a5cdd606a1b6044820152606490fd5b9190820391821161148b57565b60405190611601826112a4565b81610140600091828152826020820152606092836040830152838083015283608083015260405161163181611289565b81815281602082015281604082015260a08301528060c08301528060e0830152610100820152826101208201520152565b80518210156116765760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b906000929180549161169d8361150d565b9182825260019384811690816000146116ff57506001146116bf575b50505050565b90919394506000526020928360002092846000945b8386106116eb5750505050010190388080806116b9565b8054858701830152940193859082016116d4565b9294505050602093945060ff191683830152151560051b010190388080806116b9565b90604091825190611732826112a4565b8193815483526001808301549060209182860152825161176081611759816002890161168c565b03826112db565b83860152825161177781611759816003890161168c565b6060860152825161178f81611759816004890161168c565b6080860152825161179f81611289565b60058501546001600160a01b03908116825260068601548116848301526007860154168482015260a0860152600884015460c0860152600984015460e0860152600a840154610100860152600b84018054906117fa826114f6565b93611807865195866112db565b82855260009182528082208186015b84841061184e5750505050505061014092611843859361184a93610120600c98015251809681930161168c565b03846112db565b0152565b858381928a5161186281611759818961168c565b815201920193019290611816565b6000199392848201929091831161148b578083029280840482149015171561148b5760019081840180941161148b576118a9908461147e565b94850194851161148b5784916002548096116119c0575b8584116119a7576118d184846115e7565b9082820180921161148b576118e5826114f6565b926040926118f5845195866112db565b808552611904601f19916114f6565b0160005b81811061199057505083976000965b86811115611929575050505050505050565b808415611974575b9061196f9160005260006020526119698660002099611958611952826114a1565b9b611722565b611962828b611662565b5288611662565b506114a1565b611917565b5061197f81836115e7565b9083820180921161148b5790611931565b60209061199b6115f4565b82828901015201611908565b5050505090506040516119b9816112c0565b6000815290565b8592506118c056fea26469706673582212204774dd893d8657b2f0ded458b7e40255ed40ab6f5ce443a7bbbfb87e37d6d98d64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "MESSAGE_DATA_LENGTH()": {
        "notice": "the length of a MACI message"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3685,
        "contract": "contracts/PollManager.sol:PollManager",
        "label": "polls",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(PollData)3680_storage)"
      },
      {
        "astId": 3689,
        "contract": "contracts/PollManager.sol:PollManager",
        "label": "pollIdByAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3691,
        "contract": "contracts/PollManager.sol:PollManager",
        "label": "totalPolls",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3694,
        "contract": "contracts/PollManager.sol:PollManager",
        "label": "maci",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(MACI)4744"
      },
      {
        "astId": 3697,
        "contract": "contracts/PollManager.sol:PollManager",
        "label": "treeDepths",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(TreeDepths)13594_storage"
      },
      {
        "astId": 3700,
        "contract": "contracts/PollManager.sol:PollManager",
        "label": "coordinatorPubKey",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(PubKey)13565_storage"
      },
      {
        "astId": 3702,
        "contract": "contracts/PollManager.sol:PollManager",
        "label": "verifier",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 3704,
        "contract": "contracts/PollManager.sol:PollManager",
        "label": "vkRegistry",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 3706,
        "contract": "contracts/PollManager.sol:PollManager",
        "label": "useSubsidy",
        "offset": 20,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 3708,
        "contract": "contracts/PollManager.sol:PollManager",
        "label": "isQv",
        "offset": 21,
        "slot": "8",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(MACI)4744": {
        "encoding": "inplace",
        "label": "contract MACI",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(PollData)3680_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PollManager.PollData)",
        "numberOfBytes": "32",
        "value": "t_struct(PollData)3680_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(PollContracts)4203_storage": {
        "encoding": "inplace",
        "label": "struct MACI.PollContracts",
        "members": [
          {
            "astId": 4198,
            "contract": "contracts/PollManager.sol:PollManager",
            "label": "poll",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4200,
            "contract": "contracts/PollManager.sol:PollManager",
            "label": "messageProcessor",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 4202,
            "contract": "contracts/PollManager.sol:PollManager",
            "label": "tally",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PollData)3680_storage": {
        "encoding": "inplace",
        "label": "struct PollManager.PollData",
        "members": [
          {
            "astId": 3657,
            "contract": "contracts/PollManager.sol:PollManager",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3659,
            "contract": "contracts/PollManager.sol:PollManager",
            "label": "maciPollId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3661,
            "contract": "contracts/PollManager.sol:PollManager",
            "label": "name",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 3663,
            "contract": "contracts/PollManager.sol:PollManager",
            "label": "encodedOptions",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes_storage"
          },
          {
            "astId": 3665,
            "contract": "contracts/PollManager.sol:PollManager",
            "label": "ipfsHash",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 3668,
            "contract": "contracts/PollManager.sol:PollManager",
            "label": "pollContracts",
            "offset": 0,
            "slot": "5",
            "type": "t_struct(PollContracts)4203_storage"
          },
          {
            "astId": 3670,
            "contract": "contracts/PollManager.sol:PollManager",
            "label": "startTime",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 3672,
            "contract": "contracts/PollManager.sol:PollManager",
            "label": "endTime",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 3674,
            "contract": "contracts/PollManager.sol:PollManager",
            "label": "numOfOptions",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 3677,
            "contract": "contracts/PollManager.sol:PollManager",
            "label": "options",
            "offset": 0,
            "slot": "11",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 3679,
            "contract": "contracts/PollManager.sol:PollManager",
            "label": "tallyJsonCID",
            "offset": 0,
            "slot": "12",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(PubKey)13565_storage": {
        "encoding": "inplace",
        "label": "struct DomainObjs.PubKey",
        "members": [
          {
            "astId": 13562,
            "contract": "contracts/PollManager.sol:PollManager",
            "label": "x",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 13564,
            "contract": "contracts/PollManager.sol:PollManager",
            "label": "y",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TreeDepths)13594_storage": {
        "encoding": "inplace",
        "label": "struct Params.TreeDepths",
        "members": [
          {
            "astId": 13587,
            "contract": "contracts/PollManager.sol:PollManager",
            "label": "intStateTreeDepth",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 13589,
            "contract": "contracts/PollManager.sol:PollManager",
            "label": "messageTreeSubDepth",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 13591,
            "contract": "contracts/PollManager.sol:PollManager",
            "label": "messageTreeDepth",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 13593,
            "contract": "contracts/PollManager.sol:PollManager",
            "label": "voteOptionTreeDepth",
            "offset": 3,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}