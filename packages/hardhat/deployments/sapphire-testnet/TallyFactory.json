{
  "address": "0x9ecb939F179A37241eD2E383Ea36D30336F1964E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vkRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_poll",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_messageProcessor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isQv",
          "type": "bool"
        }
      ],
      "name": "deploy",
      "outputs": [
        {
          "internalType": "address",
          "name": "tallyAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xda012055dc25a60649b0f0d41a14dd70f861d741dfb79bac5642427d8d572709",
  "receipt": {
    "to": null,
    "from": "0xa916330337ff3143691fA95aE084e59C28E0CDC2",
    "contractAddress": "0x9ecb939F179A37241eD2E383Ea36D30336F1964E",
    "transactionIndex": 1,
    "gasUsed": "2026488",
    "logsBloom": "0x
    "blockHash": "0xadee72eeee5b0f8eb4974ca3f1ee6589e261980bff021d29fe39e5dd0c065848",
    "transactionHash": "0xda012055dc25a60649b0f0d41a14dd70f861d741dfb79bac5642427d8d572709",
    "logs": [],
    "blockNumber": 5783651,
    "cumulativeGasUsed": "2048631",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "79ae3e088114d792164a9068ef4ed3b4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vkRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poll\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_messageProcessor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isQv\",\"type\":\"bool\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tallyAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deploy(address,address,address,address,address,bool)\":{\"params\":{\"_isQv\":\"Whether to support QV or not\",\"_messageProcessor\":\"MessageProcessor contract\",\"_owner\":\"Owner of the contract\",\"_poll\":\"Poll contract\",\"_verifier\":\"Verifier contract\",\"_vkRegistry\":\"VkRegistry contract\"},\"returns\":{\"tallyAddr\":\"The deployed contract\"}}},\"title\":\"TallyFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deploy(address,address,address,address,address,bool)\":{\"notice\":\"Deploy a new Tally contract and return the address.\"}},\"notice\":\"A factory contract which deploys Tally contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/maci-contracts/TallyFactory.sol\":\"TallyFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/maci-contracts/Tally.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { IMACI } from \\\"./interfaces/IMACI.sol\\\";\\nimport { Hasher } from \\\"./crypto/Hasher.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IPoll } from \\\"./interfaces/IPoll.sol\\\";\\nimport { IMessageProcessor } from \\\"./interfaces/IMessageProcessor.sol\\\";\\nimport { SnarkCommon } from \\\"./crypto/SnarkCommon.sol\\\";\\nimport { IVerifier } from \\\"./interfaces/IVerifier.sol\\\";\\nimport { IVkRegistry } from \\\"./interfaces/IVkRegistry.sol\\\";\\nimport { CommonUtilities } from \\\"./utilities/CommonUtilities.sol\\\";\\n\\n/// @title Tally\\n/// @notice The Tally contract is used during votes tallying\\n/// and by users to verify the tally results.\\ncontract Tally is Ownable, SnarkCommon, CommonUtilities, Hasher {\\n  uint256 internal constant TREE_ARITY = 5;\\n\\n  /// @notice The commitment to the tally results. Its initial value is 0, but after\\n  /// the tally of each batch is proven on-chain via a zk-SNARK, it should be\\n  /// updated to:\\n  ///\\n  /// QV:\\n  /// hash3(\\n  ///   hashLeftRight(merkle root of current results, salt0)\\n  ///   hashLeftRight(number of spent voice credits, salt1),\\n  ///   hashLeftRight(merkle root of the no. of spent voice credits per vote option, salt2)\\n  /// )\\n  ///\\n  /// Non-QV:\\n  /// hash2(\\n  ///   hashLeftRight(merkle root of current results, salt0)\\n  ///   hashLeftRight(number of spent voice credits, salt1),\\n  /// )\\n  ///\\n  /// Where each salt is unique and the merkle roots are of arrays of leaves\\n  /// TREE_ARITY ** voteOptionTreeDepth long.\\n  uint256 public tallyCommitment;\\n\\n  uint256 public tallyBatchNum;\\n\\n  // The final commitment to the state and ballot roots\\n  uint256 public sbCommitment;\\n\\n  IVerifier public immutable verifier;\\n  IVkRegistry public immutable vkRegistry;\\n  IPoll public immutable poll;\\n  IMessageProcessor public immutable messageProcessor;\\n  bool public immutable isQv;\\n\\n  /// @notice custom errors\\n  error ProcessingNotComplete();\\n  error InvalidTallyVotesProof();\\n  error AllBallotsTallied();\\n  error NumSignUpsTooLarge();\\n  error BatchStartIndexTooLarge();\\n  error TallyBatchSizeTooLarge();\\n  error NotSupported();\\n\\n  /// @notice Create a new Tally contract\\n  /// @param _verifier The Verifier contract\\n  /// @param _vkRegistry The VkRegistry contract\\n  /// @param _poll The Poll contract\\n  /// @param _mp The MessageProcessor contract\\n  constructor(address _verifier, address _vkRegistry, address _poll, address _mp, bool _isQv) payable {\\n    verifier = IVerifier(_verifier);\\n    vkRegistry = IVkRegistry(_vkRegistry);\\n    poll = IPoll(_poll);\\n    messageProcessor = IMessageProcessor(_mp);\\n    isQv = _isQv;\\n  }\\n\\n  /// @notice Pack the batch start index and number of signups into a 100-bit value.\\n  /// @param _numSignUps: number of signups\\n  /// @param _batchStartIndex: the start index of given batch\\n  /// @param _tallyBatchSize: size of batch\\n  /// @return result an uint256 representing the 3 inputs packed together\\n  function genTallyVotesPackedVals(\\n    uint256 _numSignUps,\\n    uint256 _batchStartIndex,\\n    uint256 _tallyBatchSize\\n  ) public pure returns (uint256 result) {\\n    if (_numSignUps >= 2 ** 50) revert NumSignUpsTooLarge();\\n    if (_batchStartIndex >= 2 ** 50) revert BatchStartIndexTooLarge();\\n    if (_tallyBatchSize >= 2 ** 50) revert TallyBatchSizeTooLarge();\\n\\n    result = (_batchStartIndex / _tallyBatchSize) + (_numSignUps << uint256(50));\\n  }\\n\\n  /// @notice Check if all ballots are tallied\\n  /// @return tallied whether all ballots are tallied\\n  function isTallied() public view returns (bool tallied) {\\n    (uint8 intStateTreeDepth, , , ) = poll.treeDepths();\\n    (uint256 numSignUps, ) = poll.numSignUpsAndMessages();\\n\\n    // Require that there are untallied ballots left\\n    tallied = tallyBatchNum * (TREE_ARITY ** intStateTreeDepth) >= numSignUps;\\n  }\\n\\n  /// @notice generate hash of public inputs for tally circuit\\n  /// @param _numSignUps: number of signups\\n  /// @param _batchStartIndex: the start index of given batch\\n  /// @param _tallyBatchSize: size of batch\\n  /// @param _newTallyCommitment: the new tally commitment to be updated\\n  /// @return inputHash hash of public inputs\\n  function genTallyVotesPublicInputHash(\\n    uint256 _numSignUps,\\n    uint256 _batchStartIndex,\\n    uint256 _tallyBatchSize,\\n    uint256 _newTallyCommitment\\n  ) public view returns (uint256 inputHash) {\\n    uint256 packedVals = genTallyVotesPackedVals(_numSignUps, _batchStartIndex, _tallyBatchSize);\\n    uint256[] memory input = new uint256[](4);\\n    input[0] = packedVals;\\n    input[1] = sbCommitment;\\n    input[2] = tallyCommitment;\\n    input[3] = _newTallyCommitment;\\n    inputHash = sha256Hash(input);\\n  }\\n\\n  /// @notice Update the state and ballot root commitment\\n  function updateSbCommitment() public onlyOwner {\\n    // Require that all messages have been processed\\n    if (!messageProcessor.processingComplete()) {\\n      revert ProcessingNotComplete();\\n    }\\n\\n    if (sbCommitment == 0) {\\n      sbCommitment = messageProcessor.sbCommitment();\\n    }\\n  }\\n\\n  /// @notice Verify the result of a tally batch\\n  /// @param _newTallyCommitment the new tally commitment to be verified\\n  /// @param _proof the proof generated after tallying this batch\\n  function tallyVotes(uint256 _newTallyCommitment, uint256[8] calldata _proof) public onlyOwner {\\n    _votingPeriodOver(poll);\\n    updateSbCommitment();\\n\\n    // get the batch size and start index\\n    (uint8 intStateTreeDepth, , , ) = poll.treeDepths();\\n    uint256 tallyBatchSize = TREE_ARITY ** intStateTreeDepth;\\n    uint256 batchStartIndex = tallyBatchNum * tallyBatchSize;\\n\\n    // save some gas because we won't overflow uint256\\n    unchecked {\\n      tallyBatchNum++;\\n    }\\n\\n    (uint256 numSignUps, ) = poll.numSignUpsAndMessages();\\n\\n    // Require that there are untallied ballots left\\n    if (batchStartIndex >= numSignUps) {\\n      revert AllBallotsTallied();\\n    }\\n\\n    bool isValid = verifyTallyProof(_proof, numSignUps, batchStartIndex, tallyBatchSize, _newTallyCommitment);\\n\\n    if (!isValid) {\\n      revert InvalidTallyVotesProof();\\n    }\\n\\n    // Update the tally commitment and the tally batch num\\n    tallyCommitment = _newTallyCommitment;\\n  }\\n\\n  /// @notice Verify the tally proof using the verifying key\\n  /// @param _proof the proof generated after processing all messages\\n  /// @param _numSignUps number of signups for a given poll\\n  /// @param _batchStartIndex the number of batches multiplied by the size of the batch\\n  /// @param _tallyBatchSize batch size for the tally\\n  /// @param _newTallyCommitment the tally commitment to be verified at a given batch index\\n  /// @return isValid whether the proof is valid\\n  function verifyTallyProof(\\n    uint256[8] calldata _proof,\\n    uint256 _numSignUps,\\n    uint256 _batchStartIndex,\\n    uint256 _tallyBatchSize,\\n    uint256 _newTallyCommitment\\n  ) public view returns (bool isValid) {\\n    (uint8 intStateTreeDepth, , , uint8 voteOptionTreeDepth) = poll.treeDepths();\\n\\n    (IMACI maci, , ) = poll.extContracts();\\n\\n    // Get the verifying key\\n    IVkRegistry.Mode mode = isQv ? IVkRegistry.Mode.QV : IVkRegistry.Mode.NON_QV;\\n    VerifyingKey memory vk = vkRegistry.getTallyVk(maci.stateTreeDepth(), intStateTreeDepth, voteOptionTreeDepth, mode);\\n\\n    // Get the public inputs\\n    uint256 publicInputHash = genTallyVotesPublicInputHash(\\n      _numSignUps,\\n      _batchStartIndex,\\n      _tallyBatchSize,\\n      _newTallyCommitment\\n    );\\n\\n    // Verify the proof\\n    isValid = verifier.verify(_proof, vk, publicInputHash);\\n  }\\n\\n  /// @notice Compute the merkle root from the path elements\\n  /// and a leaf\\n  /// @param _depth the depth of the merkle tree\\n  /// @param _index the index of the leaf\\n  /// @param _leaf the leaf\\n  /// @param _pathElements the path elements to reconstruct the merkle root\\n  /// @return current The merkle root\\n  function computeMerkleRootFromPath(\\n    uint8 _depth,\\n    uint256 _index,\\n    uint256 _leaf,\\n    uint256[][] calldata _pathElements\\n  ) internal pure returns (uint256 current) {\\n    uint256 pos = _index % TREE_ARITY;\\n    current = _leaf;\\n    uint8 k;\\n\\n    uint256[TREE_ARITY] memory level;\\n\\n    for (uint8 i = 0; i < _depth; ++i) {\\n      for (uint8 j = 0; j < TREE_ARITY; ++j) {\\n        if (j == pos) {\\n          level[j] = current;\\n        } else {\\n          if (j > pos) {\\n            k = j - 1;\\n          } else {\\n            k = j;\\n          }\\n          level[j] = _pathElements[i][k];\\n        }\\n      }\\n\\n      _index /= TREE_ARITY;\\n      pos = _index % TREE_ARITY;\\n      current = hash5(level);\\n    }\\n  }\\n\\n  /// @notice Verify the number of spent voice credits from the tally.json\\n  /// @param _totalSpent spent field retrieved in the totalSpentVoiceCredits object\\n  /// @param _totalSpentSalt the corresponding salt in the totalSpentVoiceCredit object\\n  /// @param _resultCommitment hashLeftRight(merkle root of the results.tally, results.salt) in tally.json file\\n  /// @param _perVOSpentVoiceCreditsHash only for QV - hashLeftRight(merkle root of the no spent voice credits per vote option, salt)\\n  /// @return isValid Whether the provided values are valid\\n  function verifySpentVoiceCredits(\\n    uint256 _totalSpent,\\n    uint256 _totalSpentSalt,\\n    uint256 _resultCommitment,\\n    uint256 _perVOSpentVoiceCreditsHash\\n  ) public view returns (bool isValid) {\\n    uint256[3] memory tally;\\n    tally[0] = _resultCommitment;\\n    tally[1] = hashLeftRight(_totalSpent, _totalSpentSalt);\\n    tally[2] = _perVOSpentVoiceCreditsHash;\\n\\n    isValid = isQv\\n      ? verifyQvSpentVoiceCredits(_totalSpent, _totalSpentSalt, _resultCommitment, _perVOSpentVoiceCreditsHash)\\n      : verifyNonQvSpentVoiceCredits(_totalSpent, _totalSpentSalt, _resultCommitment);\\n  }\\n\\n  /// @notice Verify the number of spent voice credits for QV from the tally.json\\n  /// @param _totalSpent spent field retrieved in the totalSpentVoiceCredits object\\n  /// @param _totalSpentSalt the corresponding salt in the totalSpentVoiceCredit object\\n  /// @param _resultCommitment hashLeftRight(merkle root of the results.tally, results.salt) in tally.json file\\n  /// @param _perVOSpentVoiceCreditsHash hashLeftRight(merkle root of the no spent voice credits per vote option, salt)\\n  /// @return isValid Whether the provided values are valid\\n  function verifyQvSpentVoiceCredits(\\n    uint256 _totalSpent,\\n    uint256 _totalSpentSalt,\\n    uint256 _resultCommitment,\\n    uint256 _perVOSpentVoiceCreditsHash\\n  ) internal view returns (bool isValid) {\\n    uint256[3] memory tally;\\n    tally[0] = _resultCommitment;\\n    tally[1] = hashLeftRight(_totalSpent, _totalSpentSalt);\\n    tally[2] = _perVOSpentVoiceCreditsHash;\\n\\n    isValid = hash3(tally) == tallyCommitment;\\n  }\\n\\n  /// @notice Verify the number of spent voice credits for Non-QV from the tally.json\\n  /// @param _totalSpent spent field retrieved in the totalSpentVoiceCredits object\\n  /// @param _totalSpentSalt the corresponding salt in the totalSpentVoiceCredit object\\n  /// @param _resultCommitment hashLeftRight(merkle root of the results.tally, results.salt) in tally.json file\\n  /// @return isValid Whether the provided values are valid\\n  function verifyNonQvSpentVoiceCredits(\\n    uint256 _totalSpent,\\n    uint256 _totalSpentSalt,\\n    uint256 _resultCommitment\\n  ) internal view returns (bool isValid) {\\n    uint256[2] memory tally;\\n    tally[0] = _resultCommitment;\\n    tally[1] = hashLeftRight(_totalSpent, _totalSpentSalt);\\n\\n    isValid = hash2(tally) == tallyCommitment;\\n  }\\n\\n  /// @notice Verify the number of spent voice credits per vote option from the tally.json\\n  /// @param _voteOptionIndex the index of the vote option where credits were spent\\n  /// @param _spent the spent voice credits for a given vote option index\\n  /// @param _spentProof proof generated for the perVOSpentVoiceCredits\\n  /// @param _spentSalt the corresponding salt given in the tally perVOSpentVoiceCredits object\\n  /// @param _voteOptionTreeDepth depth of the vote option tree\\n  /// @param _spentVoiceCreditsHash hashLeftRight(number of spent voice credits, spent salt)\\n  /// @param _resultCommitment hashLeftRight(merkle root of the results.tally, results.salt)\\n  // in the tally.json file\\n  /// @return isValid Whether the provided proof is valid\\n  function verifyPerVOSpentVoiceCredits(\\n    uint256 _voteOptionIndex,\\n    uint256 _spent,\\n    uint256[][] calldata _spentProof,\\n    uint256 _spentSalt,\\n    uint8 _voteOptionTreeDepth,\\n    uint256 _spentVoiceCreditsHash,\\n    uint256 _resultCommitment\\n  ) public view returns (bool isValid) {\\n    if (!isQv) {\\n      revert NotSupported();\\n    }\\n\\n    uint256 computedRoot = computeMerkleRootFromPath(_voteOptionTreeDepth, _voteOptionIndex, _spent, _spentProof);\\n\\n    uint256[3] memory tally;\\n    tally[0] = _resultCommitment;\\n    tally[1] = _spentVoiceCreditsHash;\\n    tally[2] = hashLeftRight(computedRoot, _spentSalt);\\n\\n    isValid = hash3(tally) == tallyCommitment;\\n  }\\n\\n  /// @notice Verify the result generated from the tally.json\\n  /// @param _voteOptionIndex the index of the vote option to verify the correctness of the tally\\n  /// @param _tallyResult Flattened array of the tally\\n  /// @param _tallyResultProof Corresponding proof of the tally result\\n  /// @param _tallyResultSalt the respective salt in the results object in the tally.json\\n  /// @param _voteOptionTreeDepth depth of the vote option tree\\n  /// @param _spentVoiceCreditsHash hashLeftRight(number of spent voice credits, spent salt)\\n  /// @param _perVOSpentVoiceCreditsHash hashLeftRight(merkle root of the no spent voice\\n  /// credits per vote option, perVOSpentVoiceCredits salt)\\n  /// @return isValid Whether the provided proof is valid\\n  function verifyTallyResult(\\n    uint256 _voteOptionIndex,\\n    uint256 _tallyResult,\\n    uint256[][] calldata _tallyResultProof,\\n    uint256 _tallyResultSalt,\\n    uint8 _voteOptionTreeDepth,\\n    uint256 _spentVoiceCreditsHash,\\n    uint256 _perVOSpentVoiceCreditsHash\\n  ) public view returns (bool isValid) {\\n    uint256 computedRoot = computeMerkleRootFromPath(\\n      _voteOptionTreeDepth,\\n      _voteOptionIndex,\\n      _tallyResult,\\n      _tallyResultProof\\n    );\\n\\n    if (isQv) {\\n      uint256[3] memory tally = [\\n        hashLeftRight(computedRoot, _tallyResultSalt),\\n        _spentVoiceCreditsHash,\\n        _perVOSpentVoiceCreditsHash\\n      ];\\n\\n      isValid = hash3(tally) == tallyCommitment;\\n    } else {\\n      uint256[2] memory tally = [hashLeftRight(computedRoot, _tallyResultSalt), _spentVoiceCreditsHash];\\n\\n      isValid = hash2(tally) == tallyCommitment;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xcd95ae56596d3d518aa268a86b93f3ef5efa0aaa3370c54cd9d4438b65df22b4\",\"license\":\"MIT\"},\"contracts/maci-contracts/TallyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { Tally } from \\\"./Tally.sol\\\";\\nimport { ITallyFactory } from \\\"./interfaces/ITallyFactory.sol\\\";\\n\\n/// @title TallyFactory\\n/// @notice A factory contract which deploys Tally contracts.\\ncontract TallyFactory is ITallyFactory {\\n  /// @inheritdoc ITallyFactory\\n  function deploy(\\n    address _verifier,\\n    address _vkRegistry,\\n    address _poll,\\n    address _messageProcessor,\\n    address _owner,\\n    bool _isQv\\n  ) public virtual returns (address tallyAddr) {\\n    // deploy Tally for this Poll\\n    Tally tally = new Tally(_verifier, _vkRegistry, _poll, _messageProcessor, _isQv);\\n    tally.transferOwnership(_owner);\\n    tallyAddr = address(tally);\\n  }\\n}\\n\",\"keccak256\":\"0x5d75ea61ba628794b8dfc1310eb35b23e598f7524b8b6f0f8fa83a5d2899998c\",\"license\":\"MIT\"},\"contracts/maci-contracts/TopupCredit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title TopupCredit\\n/// @notice A contract representing a token used to topup a MACI's voter\\n/// credits\\ncontract TopupCredit is ERC20, Ownable {\\n  uint8 public constant DECIMALS = 1;\\n  uint256 public constant MAXIMUM_AIRDROP_AMOUNT = 100000 * 10 ** DECIMALS;\\n\\n  /// @notice custom errors\\n  error ExceedLimit();\\n\\n  /// @notice create  a new TopupCredit token\\n  constructor() payable ERC20(\\\"TopupCredit\\\", \\\"TopupCredit\\\") {}\\n\\n  /// @notice mint tokens to an account\\n  /// @param account the account to mint tokens to\\n  /// @param amount the amount of tokens to mint\\n  function airdropTo(address account, uint256 amount) public onlyOwner {\\n    if (amount >= MAXIMUM_AIRDROP_AMOUNT) {\\n      revert ExceedLimit();\\n    }\\n\\n    _mint(account, amount);\\n  }\\n\\n  /// @notice mint tokens to the contract owner\\n  /// @param amount the amount of tokens to mint\\n  function airdrop(uint256 amount) public onlyOwner {\\n    if (amount >= MAXIMUM_AIRDROP_AMOUNT) {\\n      revert ExceedLimit();\\n    }\\n\\n    _mint(msg.sender, amount);\\n  }\\n}\\n\",\"keccak256\":\"0x088cf42d9b7eb3cc3606131bd810feb9edc9b3c78219c0088e6ae6a44632d6a1\",\"license\":\"MIT\"},\"contracts/maci-contracts/crypto/Hasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { SnarkConstants } from \\\"./SnarkConstants.sol\\\";\\nimport { PoseidonT3 } from \\\"./PoseidonT3.sol\\\";\\nimport { PoseidonT4 } from \\\"./PoseidonT4.sol\\\";\\nimport { PoseidonT5 } from \\\"./PoseidonT5.sol\\\";\\nimport { PoseidonT6 } from \\\"./PoseidonT6.sol\\\";\\n\\n/// @notice A SHA256 hash function for any number of input elements, and Poseidon hash\\n/// functions for 2, 3, 4, 5, and 12 input elements.\\ncontract Hasher is SnarkConstants {\\n  /// @notice Computes the SHA256 hash of an array of uint256 elements.\\n  /// @param array The array of uint256 elements.\\n  /// @return result The SHA256 hash of the array.\\n  function sha256Hash(uint256[] memory array) public pure returns (uint256 result) {\\n    result = uint256(sha256(abi.encodePacked(array))) % SNARK_SCALAR_FIELD;\\n  }\\n\\n  /// @notice Computes the Poseidon hash of two uint256 elements.\\n  /// @param array An array of two uint256 elements.\\n  /// @return result The Poseidon hash of the two elements.\\n  function hash2(uint256[2] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT3.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of three uint256 elements.\\n  /// @param array An array of three uint256 elements.\\n  /// @return result The Poseidon hash of the three elements.\\n  function hash3(uint256[3] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT4.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of four uint256 elements.\\n  /// @param array An array of four uint256 elements.\\n  /// @return result The Poseidon hash of the four elements.\\n  function hash4(uint256[4] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT5.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of five uint256 elements.\\n  /// @param array An array of five uint256 elements.\\n  /// @return result The Poseidon hash of the five elements.\\n  function hash5(uint256[5] memory array) public pure returns (uint256 result) {\\n    result = PoseidonT6.poseidon(array);\\n  }\\n\\n  /// @notice Computes the Poseidon hash of two uint256 elements.\\n  /// @param left the first element to hash.\\n  /// @param right the second element to hash.\\n  /// @return result The Poseidon hash of the two elements.\\n  function hashLeftRight(uint256 left, uint256 right) public pure returns (uint256 result) {\\n    uint256[2] memory input;\\n    input[0] = left;\\n    input[1] = right;\\n    result = hash2(input);\\n  }\\n}\\n\",\"keccak256\":\"0x64a6181ac6e0df316ab26432098f6fc48b2d356f2397d3886f887a13446c7137\",\"license\":\"MIT\"},\"contracts/maci-contracts/crypto/Pairing.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to\\n// deal in the Software without restriction, including without limitation the\\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\\n// sell copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\\n// IN THE SOFTWARE.\\n\\n// 2019 OKIMS\\n\\npragma solidity ^0.8.10;\\n\\n/// @title Pairing\\n/// @notice A library implementing the alt_bn128 elliptic curve operations.\\nlibrary Pairing {\\n  uint256 public constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n  struct G1Point {\\n    uint256 x;\\n    uint256 y;\\n  }\\n\\n  // Encoding of field elements is: X[0] * z + X[1]\\n  struct G2Point {\\n    uint256[2] x;\\n    uint256[2] y;\\n  }\\n\\n  /// @notice custom errors\\n  error PairingAddFailed();\\n  error PairingMulFailed();\\n  error PairingOpcodeFailed();\\n\\n  /// @notice The negation of p, i.e. p.plus(p.negate()) should be zero.\\n  function negate(G1Point memory p) internal pure returns (G1Point memory) {\\n    // The prime q in the base field F_q for G1\\n    if (p.x == 0 && p.y == 0) {\\n      return G1Point(0, 0);\\n    } else {\\n      return G1Point(p.x, PRIME_Q - (p.y % PRIME_Q));\\n    }\\n  }\\n\\n  /// @notice r Returns the sum of two points of G1.\\n  function plus(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {\\n    uint256[4] memory input;\\n    input[0] = p1.x;\\n    input[1] = p1.y;\\n    input[2] = p2.x;\\n    input[3] = p2.y;\\n    bool success;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n\\n    if (!success) {\\n      revert PairingAddFailed();\\n    }\\n  }\\n\\n  /// @notice r Return the product of a point on G1 and a scalar, i.e.\\n  ///         p == p.scalarMul(1) and p.plus(p) == p.scalarMul(2) for all\\n  ///         points p.\\n  function scalarMul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {\\n    uint256[3] memory input;\\n    input[0] = p.x;\\n    input[1] = p.y;\\n    input[2] = s;\\n    bool success;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n\\n    if (!success) {\\n      revert PairingMulFailed();\\n    }\\n  }\\n\\n  /// @return isValid The result of computing the pairing check\\n  ///         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n  ///        For example,\\n  ///        pairing([P1(), P1().negate()], [P2(), P2()]) should return true.\\n  function pairing(\\n    G1Point memory a1,\\n    G2Point memory a2,\\n    G1Point memory b1,\\n    G2Point memory b2,\\n    G1Point memory c1,\\n    G2Point memory c2,\\n    G1Point memory d1,\\n    G2Point memory d2\\n  ) internal view returns (bool isValid) {\\n    G1Point[4] memory p1 = [a1, b1, c1, d1];\\n    G2Point[4] memory p2 = [a2, b2, c2, d2];\\n\\n    uint256 inputSize = 24;\\n    uint256[] memory input = new uint256[](inputSize);\\n\\n    for (uint256 i = 0; i < 4; i++) {\\n      uint256 j = i * 6;\\n      input[j + 0] = p1[i].x;\\n      input[j + 1] = p1[i].y;\\n      input[j + 2] = p2[i].x[0];\\n      input[j + 3] = p2[i].x[1];\\n      input[j + 4] = p2[i].y[0];\\n      input[j + 5] = p2[i].y[1];\\n    }\\n\\n    uint256[1] memory out;\\n    bool success;\\n\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)\\n      // Use \\\"invalid\\\" to make gas estimation work\\n      switch success\\n      case 0 {\\n        invalid()\\n      }\\n    }\\n\\n    if (!success) {\\n      revert PairingOpcodeFailed();\\n    }\\n\\n    isValid = out[0] != 0;\\n  }\\n}\\n\",\"keccak256\":\"0x5ce2f85d56cec9a08960ebf54fe89a0867deb7f97d3151699ba238848598a1a4\",\"license\":\"MIT\"},\"contracts/maci-contracts/crypto/PoseidonT3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT3 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[2] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0xfff415a7054b60f0826d0f731aa47b8edf59a1ae485a803ca73b3280855a5cdf\",\"license\":\"MIT\"},\"contracts/maci-contracts/crypto/PoseidonT4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT4 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[3] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0xa5422f08624b09ec1766b8d36ea527ec8af3f76121fa136846a9adc9ea3cc717\",\"license\":\"MIT\"},\"contracts/maci-contracts/crypto/PoseidonT5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT5 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[4] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0xb27ffc3b4c053ab97006c9d2d634e326a101926f0f704d456cec3d33e5757cc5\",\"license\":\"MIT\"},\"contracts/maci-contracts/crypto/PoseidonT6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @notice A library which provides functions for computing Pedersen hashes.\\nlibrary PoseidonT6 {\\n  // solhint-disable-next-line no-empty-blocks\\n  function poseidon(uint256[5] memory input) public pure returns (uint256) {}\\n}\\n\",\"keccak256\":\"0x7e378eb768102153e5153b6f0f8bb08732d6950d0be09d5563973a31cc844fea\",\"license\":\"MIT\"},\"contracts/maci-contracts/crypto/SnarkCommon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\nimport { Pairing } from \\\"./Pairing.sol\\\";\\n\\n/// @title SnarkCommon\\n/// @notice a Contract which holds a struct\\n/// representing a Groth16 verifying key\\ncontract SnarkCommon {\\n  /// @notice a struct representing a Groth16 verifying key\\n  struct VerifyingKey {\\n    Pairing.G1Point alpha1;\\n    Pairing.G2Point beta2;\\n    Pairing.G2Point gamma2;\\n    Pairing.G2Point delta2;\\n    Pairing.G1Point[] ic;\\n  }\\n}\\n\",\"keccak256\":\"0xdccb710f060330d75763c92bd6828dd2cc891c3ea5a30ce30ae221c177a7eba7\",\"license\":\"MIT\"},\"contracts/maci-contracts/crypto/SnarkConstants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @title SnarkConstants\\n/// @notice This contract contains constants related to the SNARK\\n/// components of MACI.\\ncontract SnarkConstants {\\n  /// @notice The scalar field\\n  uint256 internal constant SNARK_SCALAR_FIELD =\\n    21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n  /// @notice The public key here is the first Pedersen base\\n  /// point from iden3's circomlib implementation of the Pedersen hash.\\n  /// Since it is generated using a hash-to-curve function, we are\\n  /// confident that no-one knows the private key associated with this\\n  /// public key. See:\\n  /// https://github.com/iden3/circomlib/blob/d5ed1c3ce4ca137a6b3ca48bec4ac12c1b38957a/src/pedersen_printbases.js\\n  /// Its hash should equal\\n  /// 6769006970205099520508948723718471724660867171122235270773600567925038008762.\\n  uint256 internal constant PAD_PUBKEY_X =\\n    10457101036533406547632367118273992217979173478358440826365724437999023779287;\\n  uint256 internal constant PAD_PUBKEY_Y =\\n    19824078218392094440610104313265183977899662750282163392862422243483260492317;\\n\\n  /// @notice The Keccack256 hash of 'Maci'\\n  uint256 internal constant NOTHING_UP_MY_SLEEVE =\\n    8370432830353022751713833565135785980866757267633941821328460903436894336785;\\n}\\n\",\"keccak256\":\"0xea489c5ac94d4f25f6255dbfeed0388c2841ead6d9d5e52a19bc8dd2c27b4d21\",\"license\":\"MIT\"},\"contracts/maci-contracts/interfaces/IMACI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { AccQueue } from \\\"../trees/AccQueue.sol\\\";\\n\\n/// @title IMACI\\n/// @notice MACI interface\\ninterface IMACI {\\n  /// @notice Get the depth of the state tree\\n  /// @return The depth of the state tree\\n  function stateTreeDepth() external view returns (uint8);\\n\\n  /// @notice Return the main root of the StateAq contract\\n  /// @return The Merkle root\\n  function getStateAqRoot() external view returns (uint256);\\n\\n  /// @notice Allow Poll contracts to merge the state subroots\\n  /// @param _numSrQueueOps Number of operations\\n  /// @param _pollId The ID of the active Poll\\n  function mergeStateAqSubRoots(uint256 _numSrQueueOps, uint256 _pollId) external;\\n\\n  /// @notice Allow Poll contracts to merge the state root\\n  /// @param _pollId The active Poll ID\\n  /// @return The calculated Merkle root\\n  function mergeStateAq(uint256 _pollId) external returns (uint256);\\n\\n  /// @notice Get the number of signups\\n  /// @return numsignUps The number of signups\\n  function numSignUps() external view returns (uint256);\\n\\n  /// @notice Get the state AccQueue\\n  /// @return The state AccQueue\\n  function stateAq() external view returns (AccQueue);\\n}\\n\",\"keccak256\":\"0x5046e3e06d927152c6cea0e910af0542bc0178381fd3d9e43b2023ca8ba2f3eb\",\"license\":\"MIT\"},\"contracts/maci-contracts/interfaces/IMessageProcessor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @title IMessageProcessor\\n/// @notice MessageProcessor interface\\ninterface IMessageProcessor {\\n  /// @notice Get the result of whether there are unprocessed messages left\\n  /// @return Whether there are unprocessed messages left\\n  function processingComplete() external view returns (bool);\\n\\n  /// @notice Get the commitment to the state and ballot roots\\n  /// @return The commitment to the state and ballot roots\\n  function sbCommitment() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x917bdb4c5eae4d20ccf6d0c9dc0c2cf1868a6951bc6fb74efbc91977309f505a\",\"license\":\"MIT\"},\"contracts/maci-contracts/interfaces/IPoll.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { DomainObjs } from \\\"../utilities/DomainObjs.sol\\\";\\nimport { IMACI } from \\\"./IMACI.sol\\\";\\nimport { AccQueue } from \\\"../trees/AccQueue.sol\\\";\\nimport { TopupCredit } from \\\"../TopupCredit.sol\\\";\\n\\n/// @title IPoll\\n/// @notice Poll interface\\ninterface IPoll {\\n  /// @notice The number of messages which have been processed and the number of signups\\n  /// @return numSignups The number of signups\\n  /// @return numMsgs The number of messages sent by voters\\n  function numSignUpsAndMessages() external view returns (uint256 numSignups, uint256 numMsgs);\\n\\n  /// @notice Allows to publish a Topup message\\n  /// @param stateIndex The index of user in the state queue\\n  /// @param amount The amount of credits to topup\\n  function topup(uint256 stateIndex, uint256 amount) external;\\n\\n  /// @notice Allows anyone to publish a message (an encrypted command and signature).\\n  /// This function also enqueues the message.\\n  /// @param _message The message to publish\\n  /// @param _encPubKey An epheremal public key which can be combined with the\\n  /// coordinator's private key to generate an ECDH shared key with which\\n  /// to encrypt the message.\\n  function publishMessage(DomainObjs.Message memory _message, DomainObjs.PubKey calldata _encPubKey) external;\\n\\n  /// @notice The first step of merging the MACI state AccQueue. This allows the\\n  /// ProcessMessages circuit to access the latest state tree and ballots via\\n  /// currentSbCommitment.\\n  /// @param _numSrQueueOps Number of operations\\n  /// @param _pollId The ID of the active Poll\\n  function mergeMaciStateAqSubRoots(uint256 _numSrQueueOps, uint256 _pollId) external;\\n\\n  /// @notice The second step of merging the MACI state AccQueue. This allows the\\n  /// ProcessMessages circuit to access the latest state tree and ballots via\\n  /// currentSbCommitment.\\n  /// @param _pollId The ID of the active Poll\\n  function mergeMaciStateAq(uint256 _pollId) external;\\n\\n  /// @notice The first step in merging the message AccQueue so that the\\n  /// ProcessMessages circuit can access the message root.\\n  /// @param _numSrQueueOps The number of subroot queue operations to perform\\n  function mergeMessageAqSubRoots(uint256 _numSrQueueOps) external;\\n\\n  /// @notice The second step in merging the message AccQueue so that the\\n  /// ProcessMessages circuit can access the message root.\\n  function mergeMessageAq() external;\\n\\n  /// @notice Returns the Poll's deploy time and duration\\n  /// @return _deployTime The deployment timestamp\\n  /// @return _duration The duration of the poll\\n  function getDeployTimeAndDuration() external view returns (uint256 _deployTime, uint256 _duration);\\n\\n  /// @notice Get the result of whether the MACI contract's stateAq has been merged by this contract\\n  /// @return Whether the MACI contract's stateAq has been merged by this contract\\n  function stateAqMerged() external view returns (bool);\\n\\n  /// @notice Get the depths of the merkle trees\\n  /// @return intStateTreeDepth The depth of the state tree\\n  /// @return messageTreeSubDepth The subdepth of the message tree\\n  /// @return messageTreeDepth The depth of the message tree\\n  /// @return voteOptionTreeDepth The subdepth of the vote option tree\\n  function treeDepths()\\n    external\\n    view\\n    returns (uint8 intStateTreeDepth, uint8 messageTreeSubDepth, uint8 messageTreeDepth, uint8 voteOptionTreeDepth);\\n\\n  /// @notice Get the max values for the poll\\n  /// @return maxMessages The maximum number of messages\\n  /// @return maxVoteOptions The maximum number of vote options\\n  function maxValues() external view returns (uint256 maxMessages, uint256 maxVoteOptions);\\n\\n  /// @notice Get the external contracts\\n  /// @return maci The IMACI contract\\n  /// @return messageAq The AccQueue contract\\n  /// @return topupCredit The TopupCredit contract\\n  function extContracts() external view returns (IMACI maci, AccQueue messageAq, TopupCredit topupCredit);\\n\\n  /// @notice Get the hash of coordinator's public key\\n  /// @return _coordinatorPubKeyHash the hash of coordinator's public key\\n  function coordinatorPubKeyHash() external view returns (uint256 _coordinatorPubKeyHash);\\n\\n  /// @notice Get the commitment to the state leaves and the ballots. This is\\n  /// hash3(stateRoot, ballotRoot, salt).\\n  /// Its initial value should be\\n  /// hash(maciStateRootSnapshot, emptyBallotRoot, 0)\\n  /// Each successful invocation of processMessages() should use a different\\n  /// salt to update this value, so that an external observer cannot tell in\\n  /// the case that none of the messages are valid.\\n  /// @return The commitment to the state leaves and the ballots\\n  function currentSbCommitment() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6543c65572462d7e052503a4094a1900a12cb450ed91f097bed1e8d97ad0243c\",\"license\":\"MIT\"},\"contracts/maci-contracts/interfaces/ITallyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @title ITallyFactory\\n/// @notice TallyFactory interface\\ninterface ITallyFactory {\\n  /// @notice Deploy a new Tally contract and return the address.\\n  /// @param _verifier Verifier contract\\n  /// @param _vkRegistry VkRegistry contract\\n  /// @param _poll Poll contract\\n  /// @param _messageProcessor MessageProcessor contract\\n  /// @param _owner Owner of the contract\\n  /// @param _isQv Whether to support QV or not\\n  /// @return The deployed contract\\n  function deploy(\\n    address _verifier,\\n    address _vkRegistry,\\n    address _poll,\\n    address _messageProcessor,\\n    address _owner,\\n    bool _isQv\\n  ) external returns (address);\\n}\\n\",\"keccak256\":\"0x931b29d319383f1e48b5aed92c4407204ddf3cf82506e8c4d3065d96aa668a5f\",\"license\":\"MIT\"},\"contracts/maci-contracts/interfaces/IVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { SnarkCommon } from \\\"../crypto/SnarkCommon.sol\\\";\\n\\n/// @title IVerifier\\n/// @notice an interface for a Groth16 verifier contract\\ninterface IVerifier {\\n  /// @notice Verify a zk-SNARK proof\\n  /// @param _proof The proof\\n  /// @param vk The verifying key\\n  /// @param input The public inputs to the circuit\\n  /// @return Whether the proof is valid given the verifying key and public\\n  ///          input. Note that this function only supports one public input.\\n  ///          Refer to the Semaphore source code for a verifier that supports\\n  ///          multiple public inputs.\\n  function verify(\\n    uint256[8] memory _proof,\\n    SnarkCommon.VerifyingKey memory vk,\\n    uint256 input\\n  ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf237bf3e3dbc948b577cb689eeecf3633c38205e6bd8e8ef0eb1356197e02247\",\"license\":\"MIT\"},\"contracts/maci-contracts/interfaces/IVkRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { SnarkCommon } from \\\"../crypto/SnarkCommon.sol\\\";\\n\\n/// @title IVkRegistry\\n/// @notice VkRegistry interface\\ninterface IVkRegistry {\\n  /// @notice Multi store support for QV and Non-QV poll\\n  enum Mode {\\n    QV,\\n    NON_QV\\n  }\\n\\n  /// @notice Get the tally verifying key\\n  /// @param _stateTreeDepth The state tree depth\\n  /// @param _intStateTreeDepth The intermediate state tree depth\\n  /// @param _voteOptionTreeDepth The vote option tree depth\\n  /// @param _mode QV or Non-QV\\n  /// @return The verifying key\\n  function getTallyVk(\\n    uint256 _stateTreeDepth,\\n    uint256 _intStateTreeDepth,\\n    uint256 _voteOptionTreeDepth,\\n    Mode _mode\\n  ) external view returns (SnarkCommon.VerifyingKey memory);\\n\\n  /// @notice Get the process verifying key\\n  /// @param _stateTreeDepth The state tree depth\\n  /// @param _messageTreeDepth The message tree depth\\n  /// @param _voteOptionTreeDepth The vote option tree depth\\n  /// @param _messageBatchSize The message batch size\\n  /// @param _mode QV or Non-QV\\n  /// @return The verifying key\\n  function getProcessVk(\\n    uint256 _stateTreeDepth,\\n    uint256 _messageTreeDepth,\\n    uint256 _voteOptionTreeDepth,\\n    uint256 _messageBatchSize,\\n    Mode _mode\\n  ) external view returns (SnarkCommon.VerifyingKey memory);\\n}\\n\",\"keccak256\":\"0x39aa9351c0676786c04ecf592ae1d99f6da296eacbfd0cc4c862da3b216b0dfb\",\"license\":\"MIT\"},\"contracts/maci-contracts/trees/AccQueue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Hasher } from \\\"../crypto/Hasher.sol\\\";\\n\\n/// @title AccQueue\\n/// @notice This contract defines a Merkle tree where each leaf insertion only updates a\\n/// subtree. To obtain the main tree root, the contract owner must merge the\\n/// subtrees together. Merging subtrees requires at least 2 operations:\\n/// mergeSubRoots(), and merge(). To get around the gas limit,\\n/// the mergeSubRoots() can be performed in multiple transactions.\\nabstract contract AccQueue is Ownable, Hasher {\\n  // The maximum tree depth\\n  uint256 public constant MAX_DEPTH = 32;\\n\\n  /// @notice A Queue is a 2D array of Merkle roots and indices which represents nodes\\n  /// in a Merkle tree while it is progressively updated.\\n  struct Queue {\\n    /// @notice IMPORTANT: the following declares an array of b elements of type T: T[b]\\n    /// And the following declares an array of b elements of type T[a]: T[a][b]\\n    /// As such, the following declares an array of MAX_DEPTH+1 arrays of\\n    /// uint256[4] arrays, **not the other way round**:\\n    uint256[4][MAX_DEPTH + 1] levels;\\n    uint256[MAX_DEPTH + 1] indices;\\n  }\\n\\n  // The depth of each subtree\\n  uint256 internal immutable subDepth;\\n\\n  // The number of elements per hash operation. Should be either 2 (for\\n  // binary trees) or 5 (quinary trees). The limit is 5 because that is the\\n  // maximum supported number of inputs for the EVM implementation of the\\n  // Poseidon hash function\\n  uint256 internal immutable hashLength;\\n\\n  // hashLength ** subDepth\\n  uint256 internal immutable subTreeCapacity;\\n\\n  // True hashLength == 2, false if hashLength == 5\\n  bool internal isBinary;\\n\\n  // The index of the current subtree. e.g. the first subtree has index 0, the\\n  // second has 1, and so on\\n  uint256 internal currentSubtreeIndex;\\n\\n  // Tracks the current subtree.\\n  Queue internal leafQueue;\\n\\n  // Tracks the smallest tree of subroots\\n  Queue internal subRootQueue;\\n\\n  // Subtree roots\\n  mapping(uint256 => uint256) internal subRoots;\\n\\n  // Merged roots\\n  uint256[MAX_DEPTH + 1] internal mainRoots;\\n\\n  // Whether the subtrees have been merged\\n  bool public subTreesMerged;\\n\\n  // Whether entire merkle tree has been merged\\n  bool public treeMerged;\\n\\n  // The root of the shortest possible tree which fits all current subtree\\n  // roots\\n  uint256 internal smallSRTroot;\\n\\n  // Tracks the next subroot to queue\\n  uint256 internal nextSubRootIndex;\\n\\n  // The number of leaves inserted across all subtrees so far\\n  uint256 public numLeaves;\\n\\n  /// @notice custom errors\\n  error SubDepthCannotBeZero();\\n  error SubdepthTooLarge(uint256 _subDepth, uint256 max);\\n  error InvalidHashLength();\\n  error DepthCannotBeZero();\\n  error SubTreesAlreadyMerged();\\n  error NothingToMerge();\\n  error SubTreesNotMerged();\\n  error DepthTooLarge(uint256 _depth, uint256 max);\\n  error DepthTooSmall(uint256 _depth, uint256 min);\\n  error InvalidIndex(uint256 _index);\\n  error InvalidLevel();\\n\\n  /// @notice Create a new AccQueue\\n  /// @param _subDepth The depth of each subtree.\\n  /// @param _hashLength The number of leaves per node (2 or 5).\\n  constructor(uint256 _subDepth, uint256 _hashLength) payable {\\n    /// validation\\n    if (_subDepth == 0) revert SubDepthCannotBeZero();\\n    if (_subDepth > MAX_DEPTH) revert SubdepthTooLarge(_subDepth, MAX_DEPTH);\\n    if (_hashLength != 2 && _hashLength != 5) revert InvalidHashLength();\\n\\n    isBinary = _hashLength == 2;\\n    subDepth = _subDepth;\\n    hashLength = _hashLength;\\n    subTreeCapacity = _hashLength ** _subDepth;\\n  }\\n\\n  /// @notice Hash the contents of the specified level and the specified leaf.\\n  /// This is a virtual function as the hash function which the overriding\\n  /// contract uses will be either hashLeftRight or hash5, which require\\n  /// different input array lengths.\\n  /// @param _level The level to hash.\\n  /// @param _leaf The leaf include with the level.\\n  /// @return _hash The hash of the level and leaf.\\n  // solhint-disable-next-line no-empty-blocks\\n  function hashLevel(uint256 _level, uint256 _leaf) internal virtual returns (uint256 _hash) {}\\n\\n  /// @notice Hash the contents of the specified level and the specified leaf.\\n  /// This is a virtual function as the hash function which the overriding\\n  /// contract uses will be either hashLeftRight or hash5, which require\\n  /// different input array lengths.\\n  /// @param _level The level to hash.\\n  /// @param _leaf The leaf include with the level.\\n  /// @return _hash The hash of the level and leaf.\\n  // solhint-disable-next-line no-empty-blocks\\n  function hashLevelLeaf(uint256 _level, uint256 _leaf) public view virtual returns (uint256 _hash) {}\\n\\n  /// @notice Returns the zero leaf at a specified level.\\n  /// This is a virtual function as the hash function which the overriding\\n  /// contract uses will be either hashLeftRight or hash5, which will produce\\n  /// different zero values (e.g. hashLeftRight(0, 0) vs\\n  /// hash5([0, 0, 0, 0, 0]). Moreover, the zero value may be a\\n  /// nothing-up-my-sleeve value.\\n  /// @param _level The level at which to return the zero leaf.\\n  /// @return zero The zero leaf at the specified level.\\n  // solhint-disable-next-line no-empty-blocks\\n  function getZero(uint256 _level) internal virtual returns (uint256 zero) {}\\n\\n  /// @notice Add a leaf to the queue for the current subtree.\\n  /// @param _leaf The leaf to add.\\n  /// @return leafIndex The index of the leaf in the queue.\\n  function enqueue(uint256 _leaf) public onlyOwner returns (uint256 leafIndex) {\\n    leafIndex = numLeaves;\\n    // Recursively queue the leaf\\n    _enqueue(_leaf, 0);\\n\\n    // Update the leaf counter\\n    numLeaves = leafIndex + 1;\\n\\n    // Now that a new leaf has been added, mainRoots and smallSRTroot are\\n    // obsolete\\n    delete mainRoots;\\n    delete smallSRTroot;\\n    subTreesMerged = false;\\n\\n    // If a subtree is full\\n    if (numLeaves % subTreeCapacity == 0) {\\n      // Store the subroot\\n      subRoots[currentSubtreeIndex] = leafQueue.levels[subDepth][0];\\n\\n      // Increment the index\\n      currentSubtreeIndex++;\\n\\n      // Delete ancillary data\\n      delete leafQueue.levels[subDepth][0];\\n      delete leafQueue.indices;\\n    }\\n  }\\n\\n  /// @notice Updates the queue at a given level and hashes any subroots\\n  /// that need to be hashed.\\n  /// @param _leaf The leaf to add.\\n  /// @param _level The level at which to queue the leaf.\\n  function _enqueue(uint256 _leaf, uint256 _level) internal {\\n    if (_level > subDepth) {\\n      revert InvalidLevel();\\n    }\\n\\n    while (true) {\\n      uint256 n = leafQueue.indices[_level];\\n\\n      if (n != hashLength - 1) {\\n        // Just store the leaf\\n        leafQueue.levels[_level][n] = _leaf;\\n\\n        if (_level != subDepth) {\\n          // Update the index\\n          leafQueue.indices[_level]++;\\n        }\\n\\n        return;\\n      }\\n\\n      // Hash the leaves to next level\\n      _leaf = hashLevel(_level, _leaf);\\n\\n      // Reset the index for this level\\n      delete leafQueue.indices[_level];\\n\\n      // Queue the hash of the leaves into to the next level\\n      _level++;\\n    }\\n  }\\n\\n  /// @notice Fill any empty leaves of the current subtree with zeros and store the\\n  /// resulting subroot.\\n  function fill() public onlyOwner {\\n    if (numLeaves % subTreeCapacity == 0) {\\n      // If the subtree is completely empty, then the subroot is a\\n      // precalculated zero value\\n      subRoots[currentSubtreeIndex] = getZero(subDepth);\\n    } else {\\n      // Otherwise, fill the rest of the subtree with zeros\\n      _fill(0);\\n\\n      // Store the subroot\\n      subRoots[currentSubtreeIndex] = leafQueue.levels[subDepth][0];\\n\\n      // Reset the subtree data\\n      delete leafQueue.levels;\\n\\n      // Reset the merged roots\\n      delete mainRoots;\\n    }\\n\\n    // Increment the subtree index\\n    uint256 curr = currentSubtreeIndex + 1;\\n    currentSubtreeIndex = curr;\\n\\n    // Update the number of leaves\\n    numLeaves = curr * subTreeCapacity;\\n\\n    // Reset the subroot tree root now that it is obsolete\\n    delete smallSRTroot;\\n\\n    subTreesMerged = false;\\n  }\\n\\n  /// @notice A function that queues zeros to the specified level, hashes,\\n  /// the level, and enqueues the hash to the next level.\\n  /// @param _level The level at which to queue zeros.\\n  // solhint-disable-next-line no-empty-blocks\\n  function _fill(uint256 _level) internal virtual {}\\n\\n  /// Insert a subtree. Used for batch enqueues.\\n  function insertSubTree(uint256 _subRoot) public onlyOwner {\\n    subRoots[currentSubtreeIndex] = _subRoot;\\n\\n    // Increment the subtree index\\n    currentSubtreeIndex++;\\n\\n    // Update the number of leaves\\n    numLeaves += subTreeCapacity;\\n\\n    // Reset the subroot tree root now that it is obsolete\\n    delete smallSRTroot;\\n\\n    subTreesMerged = false;\\n  }\\n\\n  /// @notice Calculate the lowest possible height of a tree with\\n  /// all the subroots merged together.\\n  /// @return depth The lowest possible height of a tree with all the\\n  function calcMinHeight() public view returns (uint256 depth) {\\n    depth = 1;\\n    while (true) {\\n      if (hashLength ** depth >= currentSubtreeIndex) {\\n        break;\\n      }\\n      depth++;\\n    }\\n  }\\n\\n  /// @notice Merge all subtrees to form the shortest possible tree.\\n  /// This function can be called either once to merge all subtrees in a\\n  /// single transaction, or multiple times to do the same in multiple\\n  /// transactions.\\n  /// @param _numSrQueueOps The number of times this function will call\\n  ///                       queueSubRoot(), up to the maximum number of times\\n  ///                       necessary. If it is set to 0, it will call\\n  ///                       queueSubRoot() as many times as is necessary. Set\\n  ///                       this to a low number and call this function\\n  ///                       multiple times if there are many subroots to\\n  ///                       merge, or a single transaction could run out of\\n  ///                       gas.\\n  function mergeSubRoots(uint256 _numSrQueueOps) public onlyOwner {\\n    // This function can only be called once unless a new subtree is created\\n    if (subTreesMerged) revert SubTreesAlreadyMerged();\\n\\n    // There must be subtrees to merge\\n    if (numLeaves == 0) revert NothingToMerge();\\n\\n    // Fill any empty leaves in the current subtree with zeros only if the\\n    // current subtree is not full\\n    if (numLeaves % subTreeCapacity != 0) {\\n      fill();\\n    }\\n\\n    // If there is only 1 subtree, use its root\\n    if (currentSubtreeIndex == 1) {\\n      smallSRTroot = getSubRoot(0);\\n      subTreesMerged = true;\\n      return;\\n    }\\n\\n    uint256 depth = calcMinHeight();\\n\\n    uint256 queueOpsPerformed = 0;\\n    for (uint256 i = nextSubRootIndex; i < currentSubtreeIndex; i++) {\\n      if (_numSrQueueOps != 0 && queueOpsPerformed == _numSrQueueOps) {\\n        // If the limit is not 0, stop if the limit has been reached\\n        return;\\n      }\\n\\n      // Queue the next subroot\\n      queueSubRoot(getSubRoot(nextSubRootIndex), 0, depth);\\n\\n      // Increment the next subroot counter\\n      nextSubRootIndex++;\\n\\n      // Increment the ops counter\\n      queueOpsPerformed++;\\n    }\\n\\n    // The height of the tree of subroots\\n    uint256 m = hashLength ** depth;\\n\\n    // Queue zeroes to fill out the SRT\\n    if (nextSubRootIndex == currentSubtreeIndex) {\\n      uint256 z = getZero(subDepth);\\n      for (uint256 i = currentSubtreeIndex; i < m; i++) {\\n        queueSubRoot(z, 0, depth);\\n      }\\n    }\\n\\n    // Store the smallest main root\\n    smallSRTroot = subRootQueue.levels[depth][0];\\n    subTreesMerged = true;\\n  }\\n\\n  /// @notice Queues a subroot into the subroot tree.\\n  /// @param _leaf The value to queue.\\n  /// @param _level The level at which to queue _leaf.\\n  /// @param _maxDepth The depth of the tree.\\n  function queueSubRoot(uint256 _leaf, uint256 _level, uint256 _maxDepth) internal {\\n    if (_level > _maxDepth) {\\n      return;\\n    }\\n\\n    uint256 n = subRootQueue.indices[_level];\\n\\n    if (n != hashLength - 1) {\\n      // Just store the leaf\\n      subRootQueue.levels[_level][n] = _leaf;\\n      subRootQueue.indices[_level]++;\\n    } else {\\n      // Hash the elements in this level and queue it in the next level\\n      uint256 hashed;\\n      if (isBinary) {\\n        uint256[2] memory inputs;\\n        inputs[0] = subRootQueue.levels[_level][0];\\n        inputs[1] = _leaf;\\n        hashed = hash2(inputs);\\n      } else {\\n        uint256[5] memory inputs;\\n        for (uint8 i = 0; i < n; i++) {\\n          inputs[i] = subRootQueue.levels[_level][i];\\n        }\\n        inputs[n] = _leaf;\\n        hashed = hash5(inputs);\\n      }\\n\\n      // TODO: change recursion to a while loop\\n      // Recurse\\n      delete subRootQueue.indices[_level];\\n      queueSubRoot(hashed, _level + 1, _maxDepth);\\n    }\\n  }\\n\\n  /// @notice Merge all subtrees to form a main tree with a desired depth.\\n  /// @param _depth The depth of the main tree. It must fit all the leaves or\\n  ///               this function will revert.\\n  /// @return root The root of the main tree.\\n  function merge(uint256 _depth) public onlyOwner returns (uint256 root) {\\n    // The tree depth must be more than 0\\n    if (_depth == 0) revert DepthCannotBeZero();\\n\\n    // Ensure that the subtrees have been merged\\n    if (!subTreesMerged) revert SubTreesNotMerged();\\n\\n    // Check the depth\\n    if (_depth > MAX_DEPTH) revert DepthTooLarge(_depth, MAX_DEPTH);\\n\\n    // Calculate the SRT depth\\n    uint256 srtDepth = subDepth;\\n    while (true) {\\n      if (hashLength ** srtDepth >= numLeaves) {\\n        break;\\n      }\\n      srtDepth++;\\n    }\\n\\n    if (_depth < srtDepth) revert DepthTooSmall(_depth, srtDepth);\\n\\n    // If the depth is the same as the SRT depth, just use the SRT root\\n    if (_depth == srtDepth) {\\n      mainRoots[_depth] = smallSRTroot;\\n      treeMerged = true;\\n      return smallSRTroot;\\n    } else {\\n      root = smallSRTroot;\\n\\n      // Calculate the main root\\n\\n      for (uint256 i = srtDepth; i < _depth; i++) {\\n        uint256 z = getZero(i);\\n\\n        if (isBinary) {\\n          uint256[2] memory inputs;\\n          inputs[0] = root;\\n          inputs[1] = z;\\n          root = hash2(inputs);\\n        } else {\\n          uint256[5] memory inputs;\\n          inputs[0] = root;\\n          inputs[1] = z;\\n          inputs[2] = z;\\n          inputs[3] = z;\\n          inputs[4] = z;\\n          root = hash5(inputs);\\n        }\\n      }\\n\\n      mainRoots[_depth] = root;\\n      treeMerged = true;\\n    }\\n  }\\n\\n  /// @notice Returns the subroot at the specified index. Reverts if the index refers\\n  /// to a subtree which has not been filled yet.\\n  /// @param _index The subroot index.\\n  /// @return subRoot The subroot at the specified index.\\n  function getSubRoot(uint256 _index) public view returns (uint256 subRoot) {\\n    if (currentSubtreeIndex <= _index) revert InvalidIndex(_index);\\n    subRoot = subRoots[_index];\\n  }\\n\\n  /// @notice Returns the subroot tree (SRT) root. Its value must first be computed\\n  /// using mergeSubRoots.\\n  /// @return smallSubTreeRoot The SRT root.\\n  function getSmallSRTroot() public view returns (uint256 smallSubTreeRoot) {\\n    if (!subTreesMerged) revert SubTreesNotMerged();\\n    smallSubTreeRoot = smallSRTroot;\\n  }\\n\\n  /// @notice Return the merged Merkle root of all the leaves at a desired depth.\\n  /// @dev merge() or merged(_depth) must be called first.\\n  /// @param _depth The depth of the main tree. It must first be computed\\n  ///               using mergeSubRoots() and merge().\\n  /// @return mainRoot The root of the main tree.\\n  function getMainRoot(uint256 _depth) public view returns (uint256 mainRoot) {\\n    if (hashLength ** _depth < numLeaves) revert DepthTooSmall(_depth, numLeaves);\\n\\n    mainRoot = mainRoots[_depth];\\n  }\\n\\n  /// @notice Get the next subroot index and the current subtree index.\\n  function getSrIndices() public view returns (uint256 next, uint256 current) {\\n    next = nextSubRootIndex;\\n    current = currentSubtreeIndex;\\n  }\\n}\\n\",\"keccak256\":\"0x1f37694c7dcac8552daf04d6561e46c48cbf7c53573032e387db09f3ef9ff0e7\",\"license\":\"MIT\"},\"contracts/maci-contracts/utilities/CommonUtilities.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport { IPoll } from \\\"../interfaces/IPoll.sol\\\";\\n\\n/// @title CommonUtilities\\n/// @notice A contract that holds common utilities\\n/// which are to be used by multiple contracts\\n/// namely Tally and MessageProcessor\\ncontract CommonUtilities {\\n  error VotingPeriodNotPassed();\\n\\n  /// @notice common function for MessageProcessor, and Tally\\n  /// @param _poll the poll to be checked\\n  function _votingPeriodOver(IPoll _poll) internal view {\\n    (uint256 deployTime, uint256 duration) = _poll.getDeployTimeAndDuration();\\n    // Require that the voting period is over\\n    uint256 secondsPassed = block.timestamp - deployTime;\\n    if (secondsPassed <= duration) {\\n      revert VotingPeriodNotPassed();\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x22884e7142cf65fc13ef4b4cec70f7f5ed1905210b63ddd14e034ce2a3938496\",\"license\":\"MIT\"},\"contracts/maci-contracts/utilities/DomainObjs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n/// @title DomainObjs\\n/// @notice An utility contract that holds\\n/// a number of domain objects and functions\\ncontract DomainObjs {\\n  /// @notice the length of a MACI message\\n  uint8 public constant MESSAGE_DATA_LENGTH = 10;\\n\\n  /// @title Message\\n  /// @notice this struct represents a MACI message\\n  /// @dev msgType: 1 for vote message, 2 for topup message (size 2)\\n  struct Message {\\n    uint256 msgType;\\n    uint256[MESSAGE_DATA_LENGTH] data;\\n  }\\n\\n  /// @title PubKey\\n  /// @notice A MACI public key\\n  struct PubKey {\\n    uint256 x;\\n    uint256 y;\\n  }\\n\\n  /// @title StateLeaf\\n  /// @notice A MACI state leaf\\n  /// @dev used to represent a user's state\\n  /// in the state Merkle tree\\n  struct StateLeaf {\\n    PubKey pubKey;\\n    uint256 voiceCreditBalance;\\n    uint256 timestamp;\\n  }\\n}\\n\",\"keccak256\":\"0x2d6a390a36a2e95985959cd1ef5b896c6dfedad01c09154674b2ff48e54785bb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657612399908161001c8239f35b600080fdfe6080604090808252600436101561001557600080fd5b600091823560e01c63f68abb591461002c57600080fd5b3461017b5760c036600319011261017b576004356001600160a01b038181169182900361014f57602435938185168095036101775760443592828416809403610173576064359383851680950361016f576084359484861680960361016b5760a43591821515809303610167576121e4988986019467ffffffffffffffff9a8787108c88111761015357918795939160a0979593610180883985526020850152898401526060830152608082015203019086f08015610145571692833b1561014f5782519163f2fde38b60e01b83526004830152848260248183885af180156101455761011e575b6020848451908152f35b8111610131576020935081523880610114565b634e487b7160e01b84526041600452602484fd5b83513d87823e3d90fd5b8480fd5b634e487b7160e01b8d52604160045260248dfd5b8980fd5b8880fd5b8780fd5b8680fd5b8580fd5b8280fdfe610120601f620021e438819003918201601f19168301916001600160401b03831184841017620001865780849260a094604052833981010312620001815762000048816200019c565b9062000057602082016200019c565b62000065604083016200019c565b91608062000076606083016200019c565b9101519384151585036200018157600054933360018060a01b03198616176000556040519460018060a01b03948580948193823391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3166080521660a0521660c0521660e0526101009182526120329182620001b2833960805182818161084801528181610e7501526111db015260a051828181610755015281816110ec01526116f2015260c05182818161022f0152818161057a015281816106630152610ee0015260e05182818161036a01528181610f4401526115f9015251818181610461015281816104aa015281816106cd01528181610de40152818161106301526117610152f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620001815756fe60c060408181526004908136101561001657600080fd5b600092833560e01c90816310bc5f51146117215750806313fb8932146116dd57806316425eeb146115ce57806323e3feb114610ea45780632b7ac3f314610e605780632d966bf414610dc75780633dfb88b214610ca757806358bfc37914610c1b5780635bb9399514610bf85780636175029314610bd957806362a361bb14610b7f5780636b148b6014610b60578063715018a614610b065780637485dba11461062c5780638da5cb5b146106045780639cfced97146105a9578063a117527914610565578063a21fb51114610486578063a5a31c0814610449578063afb93bd31461042a578063b03698f2146103ff578063bea140b314610399578063d0380fe214610355578063d13181b814610332578063e3ff76061461020e5763f2fde38b1461014257600080fd5b3461020a57602036600319011261020a576001600160a01b0382358181169391929084900361020657610173611911565b83156101b457505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8480fd5b8280fd5b50903461020a578260031936011261020a57815163ac98e5df60e01b8152827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166080838581845afa9283156103285786936102f5575b508151634f367f0f60e01b815293849182905afa9182156102e857602094926102b4575b506102ab906102a560ff6002549216611a65565b90611ad4565b10159051908152f35b6102ab9192506102d990843d86116102e1575b6102d181836118d7565b810190611a4f565b509190610291565b503d6102c7565b50505051903d90823e3d90fd5b61031791935060803d8111610321575b61030f81836118d7565b810190611a11565b505050913861026d565b503d610305565b82513d88823e3d90fd5b8382346103515781600319360112610351576020906003549051908152f35b5080fd5b838234610351578160031936011261035157517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50903461020a57606036600319011261020a57366023121561020a578151906103c1826118bb565b816064913683116103fb5760209550905b8282106103ec575050506103e590611f0c565b9051908152f35b813581529085019085016103d2565b8580fd5b50823461042757606036600319011261042757506103e5602092604435906024359035611969565b80fd5b8382346103515781600319360112610351576020906002549051908152f35b838234610351578160031936011261035157602090517f000000000000000000000000000000000000000000000000000000000000000015158152f35b508234610427576104a8610499366117fe565b97949295918997919750611c8e565b7f00000000000000000000000000000000000000000000000000000000000000001561053057855194606086019086821067ffffffffffffffff83111761051d575086526020965061050f9493929161050091611fda565b83528583015283820152611f0c565b60015414905b519015158152f35b634e487b7160e01b815260418952602490fd5b92506020955061055b93506105509085519361054b8561186d565b611fda565b825284820152611e77565b6001541490610515565b838234610351578160031936011261035157517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50903461020a5760a036600319011261020a57366023121561020a578151906105d18261189f565b8160a4913683116103fb5760209550905b8282106105f5575050506103e590611f73565b813581529085019085016105e2565b838234610351578160031936011261035157905490516001600160a01b039091168152602090f35b5082903461035157610180366003190112610351576101049236841161020a57815163ac98e5df60e01b81526001600160a01b03947f000000000000000000000000000000000000000000000000000000000000000086166080838581845afa928315610afc5786908794610ad6575b50855193849263bc14ee2b60e01b8452838760609788935afa928315610acc57908995949392918993610a71575b507f000000000000000000000000000000000000000000000000000000000000000015610a695788915b88519363194b1db960e21b855284898160209e8f94165afa938415610a5f578a94610a22575b5088516310b37e4d60e01b815260ff948516898201529084166024820152921660448301526002811015610a0f5760648201528681608481877f0000000000000000000000000000000000000000000000000000000000000000165afa908115610a05579086929188916108db575b509185939160808a96946108156101649561014496610140610124966101006107b884358c358b358535611ae7565b99516308adcb2560e21b81529e8f9d8e01378b01528a6103248b01988551908151908d01520151908a01526107f58a8401516101848b0190611c4c565b6108078c8401516102048b0190611c4c565b820151610284890190611c4c565b0151926101e061030487015283518091528661034487019401908a5b8a8282106108ba57505050508401528290039082907f0000000000000000000000000000000000000000000000000000000000000000165afa9283156108af5792610880575b50519015158152f35b6108a1919250833d85116108a8575b61089981836118d7565b810190611b66565b9083610877565b503d61088f565b8251903d90823e3d90fd5b8351805188528a01518a8801528d998b995096019590920191600101610831565b919250503d8088833e6108ee81836118d7565b81018882820312610a0157815167ffffffffffffffff928382116109fd5701916101e0838303126109f9578751926109258461189f565b61092f8382611b7e565b845261093d838a8301611beb565b8b85015261094e8360c08301611beb565b89850152610960836101408301611beb565b868501526101c08101519182116109fd570181601f820112156109f9578051610988816118f9565b926109958a5194856118d7565b8184528b8085019260061b840101928184116109f557908c808c98979695949301925b8484106109d2575050505050906080918282015290610789565b6109e38385969798999a9495611b7e565b8152019201908c8b97969594936109b8565b8b80fd5b8880fd5b8980fd5b8780fd5b86513d89823e3d90fd5b634e487b7160e01b885260218652602488fd5b9093508a81813d8311610a58575b610a3a81836118d7565b810103126109fd579060ff610a4f8193611a03565b9491925061071a565b503d610a30565b89513d8c823e3d90fd5b6001916106f4565b85809750819394509194953d8311610ac5575b610a8e81836118d7565b81010312610a015780519089821682036109f95760208101518a8116036109f95787015189811603610a015790889493928a6106ca565b503d610a84565b87513d8a823e3d90fd5b9050610af191935060803d81116103215761030f81836118d7565b94929150508861069c565b85513d88823e3d90fd5b8334610427578060031936011261042757610b1f611911565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b838234610351576020906103e5610b76366117db565b92919091611ae7565b50903461020a578160031936011261020a57366023121561020a57815190610ba68261186d565b816044913683116103fb5760209550905b828210610bca575050506103e590611e77565b81358152908501908501610bb7565b8382346103515781600319360112610351576020906001549051908152f35b508234610427578160031936011261042757506103e56020926024359035611fda565b50903461020a57602092836003193601126104275781359167ffffffffffffffff8311610351573660238401121561035157820135610c59816118f9565b92610c66855194856118d7565b81845260248685019260051b820101923684116104275750906024869201905b838210610c985782866103e587611dbe565b81358152908201908201610c86565b503461020a57608036600319011261020a57366023121561020a578051916080830183811067ffffffffffffffff821117610db4578252608490833683116103fb57819491905b838210610da4575050825163248f667760e01b8152938491868284015b838210610d8a57505050506020918173Af8D2aF5AB9654e4818142c6511754771c8064A55af4918215610d80578392610d49575b6020838351908152f35b9091506020813d8211610d78575b81610d64602093836118d7565b8101031261020a5760209250519038610d3f565b3d9150610d57565b81513d85823e3d90fd5b825181528794506020928301926001929092019101610d0b565b8135815260209182019101610cee565b634e487b7160e01b855260418252602485fd5b5082346104275750610dd8366117fe565b989691909592969493947f000000000000000000000000000000000000000000000000000000000000000015610e52575093610e4796936020999693610e2193610e3e97611c8e565b90865194610e2e866118bb565b6060368737855287850152611fda565b83820152611f0c565b600154149051908152f35b8851630280e1e560e61b8152fd5b838234610351578160031936011261035157517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461020a5761012036600319011261020a57610124913683116115ca57610eca611911565b8151634909229f60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116939182818581885afa90811561124257879088926115aa575b50420342811161159757111561158957610f32611911565b81516321d8f43160e21b8152602091907f000000000000000000000000000000000000000000000000000000000000000082169083818781855afa90811561157f578991611562575b501561155257828591600354156114ee575b5050835163ac98e5df60e01b80825296915060809081818881865afa9081156114e457610fc59160ff918c916114c4575b5016611a65565b9760025497610fd48a8a611ad4565b996001809a01600255875191634f367f0f60e01b835288838b81895afa928315611388578d936114a4575b50828c101561149457908c969594939291895190815284818c81895afa90811561148a5788908992611467575b508a5163bc14ee2b60e01b8152606097889082908f9082905afa90811561145d578b8f928f8f9695948e8e9581946113fc575b50507f0000000000000000000000000000000000000000000000000000000000000000156113f657508d965b5163194b1db960e21b81529384928391165afa9a8b156113eb578e918e919c6113a5575b50516310b37e4d60e01b815260ff9b8c1691810191909152908a1660248201529816604489015260028110156113925760648801528c87608481897f0000000000000000000000000000000000000000000000000000000000000000165afa968715611388578d9761126b575b509a879593969492918a359c611133928e92611ae7565b908c89519788966308adcb2560e21b88528c8801602461010091376101048801610140905261032488019589825180516101448c015201516101648a0152898201516101848a0161118391611c4c565b8c8201516102048a0161119591611c4c565b81015161028489016111a691611c4c565b01519361030487016101e0905284518091528761034488019501915b8d8c83831061124c5750505050508401528290039082907f0000000000000000000000000000000000000000000000000000000000000000165afa918215611242578792611225575b5050156112185750505580f35b516341acf34d60e01b8152fd5b61123b9250803d106108a85761089981836118d7565b388061120b565b83513d89823e3d90fd5b8451805189528b01518b8901528c9a8c9a5097019690930192016111c2565b9096503d808e833e61127d81836118d7565b8101888282031261138457815167ffffffffffffffff928382116113805701916101e08383031261137c578a51926112b48461189f565b6112be8382611b7e565b84526112cc838d8301611beb565b8b8501526112dd8360c08301611beb565b8c8501526112ef836101408301611beb565b888501526101c0810151918211611380570181601f8201121561137c578051611317816118f9565b926113248d5194856118d7565b8184528b8085019260061b84010192818411611376578c808f9201935b85851061135e57505050505085830191909152509561113361111c565b6113688486611b7e565b8152019201918c8e91611341565b50508f80fd5b8e80fd5b8f80fd5b8d80fd5b89513d8f823e3d90fd5b634e487b7160e01b8e5260218b5260248efd5b9b505050908a8a813d83116113e4575b6113bf81836118d7565b810103126113805760ff80928e828f9d6113d890611a03565b9d9294955050916110af565b503d6113b5565b8d51903d90823e3d90fd5b9661108b565b98505050505050508783813d8311611456575b61141981836118d7565b810103126109fd578251928984168403611452578b8101518a811603611452578c0151898116036109fd57888b8f8f8f96918e3861105f565b8a80fd5b503d61140f565b8c513d8c823e3d90fd5b90506114809150853d87116103215761030f81836118d7565b929150503861102c565b8a513d8a823e3d90fd5b885163b3f8c18960e01b81528a90fd5b6114bc919350893d8b116102e1576102d181836118d7565b509138610fff565b6114db9150843d86116103215761030f81836118d7565b50505038610fbe565b86513d8c823e3d90fd5b8551631a26303760e31b815292839182905afa90811561154857889161151b575b50600355838238610f8d565b90508281813d8311611541575b61153281836118d7565b81010312610a0157513861150f565b503d611528565b84513d8a823e3d90fd5b5050505163f13e1b8560e01b8152fd5b6115799150843d86116108a85761089981836118d7565b38610f7b565b85513d8b823e3d90fd5b5051635c3017c560e11b8152fd5b634e487b7160e01b885260118552602488fd5b90506115c39150833d85116102e1576102d181836118d7565b9038610f1a565b8380fd5b50903461020a578260031936011261020a576115e8611911565b81516321d8f43160e21b81526020907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169082818581855afa908115610afc5786916116c0575b50156116b05760035415611649578480f35b8190845193848092631a26303760e31b82525afa9283156116a757508392611679575b5050600355388080808480f35b90809250813d83116116a0575b61169081836118d7565b810103126103515751388061166c565b503d611686565b513d85823e3d90fd5b835163f13e1b8560e01b81528390fd5b6116d79150833d85116108a85761089981836118d7565b38611637565b838234610351578160031936011261035157517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b8285913461020a5760209282611736366117db565b93866117468693979495986118bb565b60603682378681526117588589611fda565b818b01520152507f0000000000000000000000000000000000000000000000000000000000000000156117b2576117a59061050f94865194611799866118bb565b60603687378552611fda565b8583015283820152611f0c565b6117d2915061055b938551936117c78561186d565b863686378452611fda565b84820152611e77565b60809060031901126117f95760043590602435906044359060643590565b600080fd5b9060e06003198301126117f957600435916024359160443567ffffffffffffffff928382116117f957806023830112156117f95781600401359384116117f95760248460051b830101116117f95760240191906064359060843560ff811681036117f9579060a4359060c43590565b6040810190811067ffffffffffffffff82111761188957604052565b634e487b7160e01b600052604160045260246000fd5b60a0810190811067ffffffffffffffff82111761188957604052565b6060810190811067ffffffffffffffff82111761188957604052565b90601f8019910116810190811067ffffffffffffffff82111761188957604052565b67ffffffffffffffff81116118895760051b60200190565b6000546001600160a01b0316330361192557565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b91906604000000000000808410156119f157808210156119df578210156119cd5781156119b757049060321b81018091116119a15790565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b60405163cdc3c16b60e01b8152600490fd5b6040516334dd29a960e21b8152600490fd5b604051631805864f60e21b8152600490fd5b519060ff821682036117f957565b91908260809103126117f957611a2682611a03565b91611a3360208201611a03565b91611a4c6060611a4560408501611a03565b9301611a03565b90565b91908260409103126117f9576020825192015190565b8015611ace57600190602081108216604e8210831617611ac65781906005925b808211611a9d575050816000190481116119a1570290565b9092806000190481116119a157818416611abd575b800292811c90611a85565b80920291611ab2565b905060050a90565b50600190565b818102929181159184041417156119a157565b90611af29291611969565b60405190611aff8261189f565b60048252602082016080368237825115611b505752600354815160011015611b50576040820152600154815160021015611b50576060820152805160031015611b5057611a4c916080820152611dbe565b634e487b7160e01b600052603260045260246000fd5b908160209103126117f9575180151581036117f95790565b91908260409103126117f957604051611b968161186d565b6020808294805184520151910152565b9080601f830112156117f95760405191611bbf8361186d565b8290604081019283116117f957905b828210611bdb5750505090565b8151815260209182019101611bce565b91906080838203126117f9576020611c1f60405192611c098461186d565b60408496611c178382611ba6565b865201611ba6565b910152565b6000915b60028310611c3557505050565b600190825181526020809101920192019190611c28565b9060406020611c6a93611c60848251611c24565b0151910190611c24565b565b60ff1660ff81146119a15760010190565b906005811015611b505760051b0190565b909291939460059283850695966000611cb2604051608060a0528060a0515261189f565b60a03681515137905b60ff9384831695858116871015611db25760005b8681169089821015611d84578c828d03611cfe57611cf3611cf99360a05151611c7d565b52611c6c565b611ccf565b508b821115611d7d5760001982018881116119a157915b858a1015611b5057611fe0878c1b16880135601e19893603018112156117f957880192833567ffffffffffffffff81116117f957602090808e1b3603868301136117f9578b83161015611b5057611cf994611fe0611cf3938f1b160101359160a05151611c7d565b8091611d15565b50509550935096509650938390049383850695611dac611da660a05151611f73565b98611c6c565b90611cbb565b50975050505050505050565b604051815160209283019082908482019060005b86828210611e6057505050611df0925003601f1981018352826118d7565b604051908051908360005b838110611e4e5750505090806000928101838152039060025afa15611e42577f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016000510690565b6040513d6000823e3d90fd5b81818401015181860152018490611dfb565b855184529485019486945090920191600101611dd2565b6040516314d2f97b60e11b815290600090600483015b60028310611ef5575050506020816044817347076a871Ae4e442784dff8BCB42E3E4E440D5195af4908115611e4257600091611ec7575090565b906020823d8211611eed575b81611ee0602093836118d7565b8101031261042757505190565b3d9150611ed3565b600190825181526020809101920192019190611e8d565b6040516304b98e1d60e31b815290600090600483015b60038310611f5c5750505060208160648173Fa21436084377C74855b2DB9CFe7322a4DDC1c3C5af4908115611e4257600091611ec7575090565b600190825181526020809101920192019190611f22565b604051630926f44b60e31b815290600090600483015b60058310611fc35750505060208160a481732D610532b8e16e950DD853572Fee9493d3c339625af4908115611e4257600091611ec7575090565b600190825181526020809101920192019190611f89565b611a4c9160405191611feb8361186d565b604036843782526020820152611e7756fea2646970667358221220fcbca9127a24f23336b280bbd9d3c2a0347597534f8a73d97d5407a38ab5e64c64736f6c63430008140033a26469706673582212204774a84f557e22be72931ab9573c8c3c233364bb42d57b6cd607eebcaf51582c64736f6c63430008140033",
  "deployedBytecode": "0x6080604090808252600436101561001557600080fd5b600091823560e01c63f68abb591461002c57600080fd5b3461017b5760c036600319011261017b576004356001600160a01b038181169182900361014f57602435938185168095036101775760443592828416809403610173576064359383851680950361016f576084359484861680960361016b5760a43591821515809303610167576121e4988986019467ffffffffffffffff9a8787108c88111761015357918795939160a0979593610180883985526020850152898401526060830152608082015203019086f08015610145571692833b1561014f5782519163f2fde38b60e01b83526004830152848260248183885af180156101455761011e575b6020848451908152f35b8111610131576020935081523880610114565b634e487b7160e01b84526041600452602484fd5b83513d87823e3d90fd5b8480fd5b634e487b7160e01b8d52604160045260248dfd5b8980fd5b8880fd5b8780fd5b8680fd5b8580fd5b8280fdfe610120601f620021e438819003918201601f19168301916001600160401b03831184841017620001865780849260a094604052833981010312620001815762000048816200019c565b9062000057602082016200019c565b62000065604083016200019c565b91608062000076606083016200019c565b9101519384151585036200018157600054933360018060a01b03198616176000556040519460018060a01b03948580948193823391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3166080521660a0521660c0521660e0526101009182526120329182620001b2833960805182818161084801528181610e7501526111db015260a051828181610755015281816110ec01526116f2015260c05182818161022f0152818161057a015281816106630152610ee0015260e05182818161036a01528181610f4401526115f9015251818181610461015281816104aa015281816106cd01528181610de40152818161106301526117610152f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620001815756fe60c060408181526004908136101561001657600080fd5b600092833560e01c90816310bc5f51146117215750806313fb8932146116dd57806316425eeb146115ce57806323e3feb114610ea45780632b7ac3f314610e605780632d966bf414610dc75780633dfb88b214610ca757806358bfc37914610c1b5780635bb9399514610bf85780636175029314610bd957806362a361bb14610b7f5780636b148b6014610b60578063715018a614610b065780637485dba11461062c5780638da5cb5b146106045780639cfced97146105a9578063a117527914610565578063a21fb51114610486578063a5a31c0814610449578063afb93bd31461042a578063b03698f2146103ff578063bea140b314610399578063d0380fe214610355578063d13181b814610332578063e3ff76061461020e5763f2fde38b1461014257600080fd5b3461020a57602036600319011261020a576001600160a01b0382358181169391929084900361020657610173611911565b83156101b457505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8480fd5b8280fd5b50903461020a578260031936011261020a57815163ac98e5df60e01b8152827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166080838581845afa9283156103285786936102f5575b508151634f367f0f60e01b815293849182905afa9182156102e857602094926102b4575b506102ab906102a560ff6002549216611a65565b90611ad4565b10159051908152f35b6102ab9192506102d990843d86116102e1575b6102d181836118d7565b810190611a4f565b509190610291565b503d6102c7565b50505051903d90823e3d90fd5b61031791935060803d8111610321575b61030f81836118d7565b810190611a11565b505050913861026d565b503d610305565b82513d88823e3d90fd5b8382346103515781600319360112610351576020906003549051908152f35b5080fd5b838234610351578160031936011261035157517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50903461020a57606036600319011261020a57366023121561020a578151906103c1826118bb565b816064913683116103fb5760209550905b8282106103ec575050506103e590611f0c565b9051908152f35b813581529085019085016103d2565b8580fd5b50823461042757606036600319011261042757506103e5602092604435906024359035611969565b80fd5b8382346103515781600319360112610351576020906002549051908152f35b838234610351578160031936011261035157602090517f000000000000000000000000000000000000000000000000000000000000000015158152f35b508234610427576104a8610499366117fe565b97949295918997919750611c8e565b7f00000000000000000000000000000000000000000000000000000000000000001561053057855194606086019086821067ffffffffffffffff83111761051d575086526020965061050f9493929161050091611fda565b83528583015283820152611f0c565b60015414905b519015158152f35b634e487b7160e01b815260418952602490fd5b92506020955061055b93506105509085519361054b8561186d565b611fda565b825284820152611e77565b6001541490610515565b838234610351578160031936011261035157517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b50903461020a5760a036600319011261020a57366023121561020a578151906105d18261189f565b8160a4913683116103fb5760209550905b8282106105f5575050506103e590611f73565b813581529085019085016105e2565b838234610351578160031936011261035157905490516001600160a01b039091168152602090f35b5082903461035157610180366003190112610351576101049236841161020a57815163ac98e5df60e01b81526001600160a01b03947f000000000000000000000000000000000000000000000000000000000000000086166080838581845afa928315610afc5786908794610ad6575b50855193849263bc14ee2b60e01b8452838760609788935afa928315610acc57908995949392918993610a71575b507f000000000000000000000000000000000000000000000000000000000000000015610a695788915b88519363194b1db960e21b855284898160209e8f94165afa938415610a5f578a94610a22575b5088516310b37e4d60e01b815260ff948516898201529084166024820152921660448301526002811015610a0f5760648201528681608481877f0000000000000000000000000000000000000000000000000000000000000000165afa908115610a05579086929188916108db575b509185939160808a96946108156101649561014496610140610124966101006107b884358c358b358535611ae7565b99516308adcb2560e21b81529e8f9d8e01378b01528a6103248b01988551908151908d01520151908a01526107f58a8401516101848b0190611c4c565b6108078c8401516102048b0190611c4c565b820151610284890190611c4c565b0151926101e061030487015283518091528661034487019401908a5b8a8282106108ba57505050508401528290039082907f0000000000000000000000000000000000000000000000000000000000000000165afa9283156108af5792610880575b50519015158152f35b6108a1919250833d85116108a8575b61089981836118d7565b810190611b66565b9083610877565b503d61088f565b8251903d90823e3d90fd5b8351805188528a01518a8801528d998b995096019590920191600101610831565b919250503d8088833e6108ee81836118d7565b81018882820312610a0157815167ffffffffffffffff928382116109fd5701916101e0838303126109f9578751926109258461189f565b61092f8382611b7e565b845261093d838a8301611beb565b8b85015261094e8360c08301611beb565b89850152610960836101408301611beb565b868501526101c08101519182116109fd570181601f820112156109f9578051610988816118f9565b926109958a5194856118d7565b8184528b8085019260061b840101928184116109f557908c808c98979695949301925b8484106109d2575050505050906080918282015290610789565b6109e38385969798999a9495611b7e565b8152019201908c8b97969594936109b8565b8b80fd5b8880fd5b8980fd5b8780fd5b86513d89823e3d90fd5b634e487b7160e01b885260218652602488fd5b9093508a81813d8311610a58575b610a3a81836118d7565b810103126109fd579060ff610a4f8193611a03565b9491925061071a565b503d610a30565b89513d8c823e3d90fd5b6001916106f4565b85809750819394509194953d8311610ac5575b610a8e81836118d7565b81010312610a015780519089821682036109f95760208101518a8116036109f95787015189811603610a015790889493928a6106ca565b503d610a84565b87513d8a823e3d90fd5b9050610af191935060803d81116103215761030f81836118d7565b94929150508861069c565b85513d88823e3d90fd5b8334610427578060031936011261042757610b1f611911565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b838234610351576020906103e5610b76366117db565b92919091611ae7565b50903461020a578160031936011261020a57366023121561020a57815190610ba68261186d565b816044913683116103fb5760209550905b828210610bca575050506103e590611e77565b81358152908501908501610bb7565b8382346103515781600319360112610351576020906001549051908152f35b508234610427578160031936011261042757506103e56020926024359035611fda565b50903461020a57602092836003193601126104275781359167ffffffffffffffff8311610351573660238401121561035157820135610c59816118f9565b92610c66855194856118d7565b81845260248685019260051b820101923684116104275750906024869201905b838210610c985782866103e587611dbe565b81358152908201908201610c86565b503461020a57608036600319011261020a57366023121561020a578051916080830183811067ffffffffffffffff821117610db4578252608490833683116103fb57819491905b838210610da4575050825163248f667760e01b8152938491868284015b838210610d8a57505050506020918173__$f67ed442b9d6bc4da64e961e2430b82eb6$$8658d3171857788947ecb1d152a017ec62$__5af4908115611e4257600091611ec7575090565b906020823d8211611eed575b81611ee0602093836118d7565b8101031261042757505190565b3d9150611ed3565b600190825181526020809101920192019190611e8d565b6040516304b98e1d60e31b815290600090600483015b60038310611f5c5750505060208160648173__$90b9196d445cf176c504004dde0b0062ce$__5af4908115611e4257600091611ec7575090565b600190825181526020809101920192019190611f22565b604051630926f44b60e31b815290600090600483015b60058310611fc35750505060208160a48173__$d643f7f71d754779bfbed637a90c4a7526$__5af4908115611e4257600091611ec7575090565b600190825181526020809101920192019190611f89565b611a4c9160405191611feb8361186d565b604036843782526020820152611e7756fea2646970667358221220fcbca9127a24f23336b280bbd9d3c2a0347597534f8a73d97d5407a38ab5e64c64736f6c63430008140033a26469706673582212204774a84f557e22be72931ab9573c8c3c233364bb42d57b6cd607eebcaf51582c64736f6c63430008140033",
  "libraries": {
    "PoseidonT3": "0x47076a871Ae4e442784dff8BCB42E3E4E440D519",
    "PoseidonT4": "0xFa21436084377C74855b2DB9CFe7322a4DDC1c3C",
    "PoseidonT5": "0xAf8D2aF5AB9654e4818142c6511754771c8064A5",
    "PoseidonT6": "0x2D610532b8e16e950DD853572Fee9493d3c33962"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "deploy(address,address,address,address,address,bool)": {
        "params": {
          "_isQv": "Whether to support QV or not",
          "_messageProcessor": "MessageProcessor contract",
          "_owner": "Owner of the contract",
          "_poll": "Poll contract",
          "_verifier": "Verifier contract",
          "_vkRegistry": "VkRegistry contract"
        },
        "returns": {
          "tallyAddr": "The deployed contract"
        }
      }
    },
    "title": "TallyFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deploy(address,address,address,address,address,bool)": {
        "notice": "Deploy a new Tally contract and return the address."
      }
    },
    "notice": "A factory contract which deploys Tally contracts.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}